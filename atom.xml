<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guard warm</title>
  
  <subtitle>编程学习之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-17T00:48:35.385Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>grandwarm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx</title>
    <link href="http://yoursite.com/2020/04/17/nginx/"/>
    <id>http://yoursite.com/2020/04/17/nginx/</id>
    <published>2020-04-17T08:48:35.000Z</published>
    <updated>2020-04-17T00:48:35.385Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://yoursite.com/2020/04/04/heima57/Redis/"/>
    <id>http://yoursite.com/2020/04/04/heima57/Redis/</id>
    <published>2020-04-03T21:38:34.000Z</published>
    <updated>2020-04-17T04:15:02.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​        Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求</p><p>​        将数据存储在内存中，也可以持久化到硬盘</p><h2 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​    NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><p>​    随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动</p><p>态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</p><p>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ol><li><p>成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价便宜。</p></li><li><p>查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</p></li><li><p>存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集等各种格式，而数据库则只支持基础类型。</p></li><li><p>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</p></li><li><p>不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</p></li><li><p>不提供关系型数据库对事务的处理。</p></li></ol><p><strong>非关系型数据库的优势：</strong></p><ul><li>性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li><li>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><p><strong>关系型数据库的优势：</strong></p><ul><li>复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</li></ul><p><strong>总结</strong></p><ul><li>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候让NoSQL数据库对关系型数据库的不足进行弥补。</li><li>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</li></ul><h3 id="主流产品"><a href="#主流产品" class="headerlink" title="主流产品"></a>主流产品</h3><ul><li><p>键值(Key-Value)存储数据库</p><blockquote><p>​    相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB<br>​    典型应用： 内容缓存，主要用于处理大量数据的高访问负载。<br>​    数据模型： 一系列键值对<br>​    优势： 快速查询<br>​    劣势： 存储的数据缺少结构化</p></blockquote></li><li><p>列存储数据库</p><blockquote><p>​    相关产品：Cassandra, HBase, Riak<br>​    典型应用：分布式的文件系统<br>​    数据模型：以列簇式存储，将同一列数据存在一起<br>​    优势：查找速度快，可扩展性强，更容易进行分布式扩展<br>​    劣势：功能相对局限</p></blockquote></li><li><p>文档型数据库</p><blockquote><p>​    相关产品：CouchDB、MongoDB<br>​    典型应用：Web应用（与Key-Value类似，Value是结构化的）<br>​    数据模型： 一系列键值对<br>​    优势：数据结构要求不严格<br>​    劣势： 查询性能不高，而且缺乏统一的查询语法</p></blockquote></li><li><p>图形(Graph)数据库</p><blockquote><p>​    相关数据库：Neo4J、InfoGrid、Infinite Graph<br>​    典型应用：社交网络<br>​    数据模型：图结构<br>​    优势：利用图结构相关算法。<br>​    劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p></blockquote></li></ul><h2 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h2><p>redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构</p><ol><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ul><h1 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://redis.io" target="_blank" rel="noopener">官网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-5.0.8.tar.gz</span><br><span class="line">$ tar xzf redis-5.0.8.tar.gz</span><br><span class="line">$ cd redis-5.0.8</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>./src/redis-server redis.conf</code>    启动服务器端</p><p> <code>./src/redis-cli -p 6379</code>    启动客户端</p><p><code>./src/redis-cli shutdown</code> 关闭服务器</p><p>或者<code>netstat -tulpn</code> 先获取端口号再kill掉</p><p><code>auth 密码</code>    连接之后经行认证</p><p>redis.conf常用配置</p><p><img src="/images/Redis/typora20200405125922-169761-1587096625362.png" alt="image-20200405125921198"></p><p>开发时为了远程连接，可以如下修改        还得开放相应端口</p><p><img src="/images/Redis/typora20200405133507-48022.png" alt="image-20200405133503971"></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>type key ： 获取键对应的value的类型</p><p><img src="/images/Redis/typora20200405131732-673614.png" alt="image-20200405131731109"></p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>最大512mb,但建议单个不超过100kb</p><p><img src="/images/Redis/typora20200405132241-201893.png" alt="image-20200405132233430"></p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>存储结构化数据</p><p><img src="/images/Redis/typora20200405132347-891458.png" alt="image-20200405132345832"></p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>最大长度为2的32次方-1</p><ol><li>添加：<ol><li>lpush key value: 将元素加入列表左表        </li><li>rpush key value：将元素加入列表右边</li></ol></li><li>获取：<ul><li>lrange key start end ：范围获取</li></ul></li><li>删除：<ul><li>lpop key： 删除列表最左边的元素，并将元素返回</li><li>rpop key： 删除列表最右边的元素，并将元素返回</li></ul></li></ol><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ol><li>存储：sadd key value</li><li>获取：smembers key:获取set集合中所有元素</li><li>删除：srem key value:删除set集合中的某个元素</li><li>交集：sinter set1 set2</li><li>并集：sunion set1 set2</li><li>差集：sdiff set1 set2</li></ol><h2 id="sortedset"><a href="#sortedset" class="headerlink" title="sortedset"></a>sortedset</h2><p>每个值关联一个score，通过score来排序</p><ol><li>存储：zadd key score value</li><li>获取：<ul><li>zrange key start end [withscores]</li><li>zrangebyscore key score1 score2    获取分数在这个区间内的元素</li></ul></li><li>删除：zrem key value</li></ol><h1 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>默认方式，不需要进行配置，默认就使用这种机制</p><ul><li>在一定的间隔时间中，检测key的变化情况，然后持久化数据</li></ul><ol><li>编辑redis.conf文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">save 900 1</span><br><span class="line"># after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">save 300 10</span><br><span class="line"># after 60 sec if at least 10000 keys changed</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>重新启动redis服务器，并指定配置文件名称</p><p> <code>redis-server redis.conf</code>    </p></li></ol><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><ol><li><p>编辑redis.conf文件<br> appendonly no（关闭aof） –&gt; appendonly yes （开启aof）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># appendfsync always ： 每一次操作都进行持久化</span><br><span class="line">appendfsync everysec ： 每隔一秒进行一次持久化</span><br><span class="line"># appendfsync no ： 不进行持久化</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>重新启动redis服务器，并指定配置文件名称</p><p><code>redis-server redis.conf</code></p></li></ol><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>导入jar包</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1. 获取连接</span><br><span class="line">Jedis jedis = new Jedis(&quot;localhost&quot;,6379);</span><br><span class="line">//2. 操作和redis命令一致</span><br><span class="line">jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</span><br><span class="line">//3. 关闭连接</span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li></ol><h2 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h2><ul><li><p>加载配置文件，配置连接池的参数</p></li><li><p>提供获取连接的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream(<span class="string">"jedis.properties"</span>);</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">"host"</span>),Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jedis.properties</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">host=127.0.0.1</span><br><span class="line">port=6379</span><br><span class="line">maxTotal=50</span><br><span class="line">maxIdle=10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;​        Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>IDEA</title>
    <link href="http://yoursite.com/2020/03/30/%E6%A1%86%E6%9E%B6/IDEA/"/>
    <id>http://yoursite.com/2020/03/30/框架/IDEA/</id>
    <published>2020-03-30T08:06:05.000Z</published>
    <updated>2020-03-30T00:09:32.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>强大的整合能力，比如git，Maven，Spring等</p><p>提示功能的快速，便捷，范围广</p><p>好用的快捷键和代码模板</p><p>精确搜索</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>.idea    IDEA自己用的</li><li>src    源码</li><li>out    生成的class文件</li></ul><h2 id="管理结构"><a href="#管理结构" class="headerlink" title="管理结构"></a>管理结构</h2><p>项目&gt;模块&gt;包&gt;java文件</p><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p><a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">下载地址</a></p><p>安装目录</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.JPG" alt></p><p>第一个目录存的是配置信息，比如字体，快捷键设置，插件</p><p>第二个存的是索引，缓存等（刚启动时会自动生成索引，这段时间最好安静等待，不然可能会报一些莫名其妙的错）</p><p>如果出了什么问题，可以把第二个目录干掉，一般重启一下就好了</p><p>程序主体安装在自己安装时选择的目录下</p><a id="more"></a><h1 id="Debug追踪"><a href="#Debug追踪" class="headerlink" title="Debug追踪"></a>Debug追踪</h1><table><thead><tr><th>按键</th><th>效果</th></tr></thead><tbody><tr><td>shift+F9</td><td>开始调试</td></tr><tr><td>F7</td><td>进入方法</td></tr><tr><td>ctrl+shift+F8</td><td>查看所有断点</td></tr><tr><td>shift+F8</td><td>跳出方法</td></tr><tr><td>F8</td><td>逐行执行</td></tr><tr><td>F9</td><td>跳到下一断点</td></tr><tr><td>Ctrl+F2</td><td>停止调试</td></tr></tbody></table><p>循环中的断点在跳到下一断点时，相当于循环内就有多个断点</p><p>行号旁边单击可以添加断点，右击断点可以改为条件断点</p><h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><p><a href="https://www.bilibili.com/video/BV1V7411U78L" target="_blank" rel="noopener">codesheep链接</a></p><h1 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h1><h2 id="取消自动更新"><a href="#取消自动更新" class="headerlink" title="取消自动更新"></a>取消自动更新</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%8F%96%E6%B6%88%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.JPG" alt></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>可以直接在设置中查找插件    Plugins</p><p>热门插件自行百度</p><h2 id="生成javadoc"><a href="#生成javadoc" class="headerlink" title="生成javadoc"></a>生成javadoc</h2><p>tool -&gt; generate javadoc</p><p>选择要生成的文件，位置</p><p>locate     zh_CN</p><p>other command line arguments: -encoding UTF-8 -charset UTF-8</p><h2 id="文件双开"><a href="#文件双开" class="headerlink" title="文件双开"></a>文件双开</h2><p>右击别的文件标签可以设置显示方式，同时打开多个文件</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="窗口快捷键"><a href="#窗口快捷键" class="headerlink" title="窗口快捷键"></a>窗口快捷键</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328214241-259.png" alt="image-20200328214231289"></p><h3 id="代码快捷键"><a href="#代码快捷键" class="headerlink" title="代码快捷键"></a>代码快捷键</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328214508-430991.png" alt="image-20200328214506775"></p><p><code>alt+shift</code>再用鼠标点击，做到多光标</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328214620-615214.png" alt="image-20200328214616124"></p><h3 id="代码定位"><a href="#代码定位" class="headerlink" title="代码定位"></a>代码定位</h3><p><code>Ctrl+g</code>        跳转到指定行</p><p>jar包中标签只能加在文件第一行</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328214831-761652.png" alt="image-20200328214829740"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><table><thead><tr><th>命令</th><th>作用·</th></tr></thead><tbody><tr><td>双击shift</td><td>查询一切</td></tr><tr><td>setting -&gt;keymap</td><td>设置快捷键</td></tr><tr><td>shift+f10</td><td>运行</td></tr><tr><td>Ctrl+Alt+空格</td><td>提示补全</td></tr><tr><td>Ctrl+/</td><td>单行注释</td></tr><tr><td>Ctrl+shift+/</td><td>多行注释</td></tr><tr><td>Ctrl+d</td><td>向下复制一行</td></tr><tr><td>Ctrl+y</td><td>删除选中行</td></tr><tr><td><code>Ctrl+shift+↑/↓</code></td><td>移动选中行</td></tr><tr><td>Ctrl+enter</td><td>向下开始新的一行</td></tr><tr><td>Ctrl+shift+enter</td><td>向上开始新的一行</td></tr><tr><td>Ctrl</td><td>查看源码</td></tr><tr><td>alt+enter</td><td>万能解错</td></tr><tr><td><code>alt+←/→</code></td><td>返回到前/后一个编辑的页面</td></tr><tr><td>ctrl+h</td><td>查看继承关系</td></tr><tr><td>Ctrl+alt+L</td><td>格式化代码</td></tr><tr><td>Ctrl+p</td><td>提示方法参数</td></tr><tr><td>Ctrl+z</td><td>撤销</td></tr><tr><td>ctrl+shift+z</td><td>反撤销</td></tr><tr><td>tab</td><td>选中数行，整体后移</td></tr><tr><td>shift+tab</td><td>选中数行，整体前移</td></tr><tr><td>ctrl+o</td><td>查看类的结构</td></tr><tr><td>shift+f6</td><td>重命名</td></tr><tr><td>Ctrl+shift+u</td><td>大小写转化</td></tr><tr><td>alt+fn+insert</td><td>生成构造函数</td></tr><tr><td>Ctrl+q</td><td>查看文档说明</td></tr><tr><td>Ctrl+shift+减号</td><td>收起所有方法</td></tr><tr><td>Ctrl+shift+等号</td><td>打开所有方法</td></tr><tr><td>Ctrl+shift+x(自己设置的)</td><td>打开代码所在硬盘文件夹</td></tr><tr><td>alt+ctrl+T</td><td>生成try—catch等</td></tr><tr><td>ctrl+空格</td><td>代码提示</td></tr></tbody></table><h2 id="live-template"><a href="#live-template" class="headerlink" title="live template"></a>live template</h2><h3 id="内置"><a href="#内置" class="headerlink" title="内置"></a>内置</h3><table><thead><tr><th>命令</th><th>效果</th></tr></thead><tbody><tr><td>syso</td><td>输出</td></tr><tr><td>psvm</td><td>生成main函数</td></tr><tr><td>fori    (eg:5.fori)</td><td>生成for函数</td></tr><tr><td>forr</td><td>生成逆序的for函数</td></tr><tr><td>iter</td><td>增强for循环</td></tr></tbody></table><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328215649-185202.png" alt="image-20200328215646682"></p><p>先加个组，然后再添加代码并配置用于那些文件</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328215826-293346.png" alt="image-20200328215826412"></p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328233916-865530.png" alt="image-20200328233915109"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328233947-624007.png" alt="image-20200328233944941"></p><h2 id="war包"><a href="#war包" class="headerlink" title="war包"></a>war包</h2><p>web项目只有在debug模式下才可以实现热部署</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200328234243-812830.png" alt="image-20200328234242028"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;强大的整合能力，比如git，Maven，Spring等&lt;/p&gt;
&lt;p&gt;提示功能的快速，便捷，范围广&lt;/p&gt;
&lt;p&gt;好用的快捷键和代码模板&lt;/p&gt;
&lt;p&gt;精确搜索&lt;/p&gt;
&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;.idea    IDEA自己用的&lt;/li&gt;
&lt;li&gt;src    源码&lt;/li&gt;
&lt;li&gt;out    生成的class文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;管理结构&quot;&gt;&lt;a href=&quot;#管理结构&quot; class=&quot;headerlink&quot; title=&quot;管理结构&quot;&gt;&lt;/a&gt;管理结构&lt;/h2&gt;&lt;p&gt;项目&amp;gt;模块&amp;gt;包&amp;gt;java文件&lt;/p&gt;
&lt;h2 id=&quot;下载与安装&quot;&gt;&lt;a href=&quot;#下载与安装&quot; class=&quot;headerlink&quot; title=&quot;下载与安装&quot;&gt;&lt;/a&gt;下载与安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/download/#section=windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.JPG&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;第一个目录存的是配置信息，比如字体，快捷键设置，插件&lt;/p&gt;
&lt;p&gt;第二个存的是索引，缓存等（刚启动时会自动生成索引，这段时间最好安静等待，不然可能会报一些莫名其妙的错）&lt;/p&gt;
&lt;p&gt;如果出了什么问题，可以把第二个目录干掉，一般重启一下就好了&lt;/p&gt;
&lt;p&gt;程序主体安装在自己安装时选择的目录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>前端进阶</title>
    <link href="http://yoursite.com/2020/03/26/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2020/03/26/前端/前端进阶/</id>
    <published>2020-03-26T11:59:13.000Z</published>
    <updated>2020-03-31T00:55:01.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已</p><p>去官网下载即可，通过引入js文件的方式来使用</p><p>核心是<strong>选择器</strong>，然后对选择元素进行<strong>操作</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326121919-203877.png" alt="image-20200326121911630"></p><h2 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h2><p>JQuery对象在操作时更加方便，但JQuery对象和js对象方法不通用的.</p><p>当同样操作一个数组时，js对象需要遍历逐个操作，JQuery可直接对选择中的数组进行操作，会自动对其中所有元素操作</p><p>jq – &gt; js : jq对象[索引] 或者 jq对象.get(索引)</p><p>js – &gt; jq : $(js对象)</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326122311-443687.png" alt="image-20200326122308613"></p><h3 id="层叠选择器"><a href="#层叠选择器" class="headerlink" title="层叠选择器"></a>层叠选择器</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326131902-162357.png" alt="image-20200326131824422"></p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326132228-82077.png" alt="image-20200326132226455"></p><ol><li>属性名称选择器 </li></ol><ul><li>语法： <code>$(&quot;A[属性名]&quot;)</code> 包含指定属性的选择器</li></ul><ol start="2"><li>属性选择器</li></ol><ul><li>语法： <code>$(&quot;A[属性名=&#39;值&#39;]&quot;)</code> 包含指定属性等于指定值的选择器</li></ul><ol start="3"><li>复合属性选择器</li></ol><ul><li>语法： <code>$(&quot;A[属性名=&#39;值&#39;][]...&quot;)</code> 包含多个属性条件的选择器</li></ul><h3 id="位置选择器"><a href="#位置选择器" class="headerlink" title="位置选择器"></a>位置选择器</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326132019-748141.png" alt="image-20200326131919014"></p><ul><li>非元素选择器<ul><li>语法： :not(selector) 不包括指定内容的元素</li></ul></li><li>大于索引选择器 <ul><li>语法： :gt(index) 大于指定索引元素</li></ul></li><li>小于索引选择器 <ul><li>语法： :lt(index) 小于指定索引元素</li></ul></li><li>标题选择器<ul><li>语法： :header 获得标题（h1~h6）元素，固定写法</li></ul></li></ul><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326132211-810724.png" alt="image-20200326132038864"></p><ul><li>可用元素选择器 <ul><li>语法： :enabled 获得可用元素</li></ul></li><li>不可用元素选择器 <ul><li>语法： :disabled 获得不可用元素</li></ul></li><li>选中选择器 <ul><li>语法： :checked 获得单选/复选框选中的元素</li></ul></li><li>选中选择器 <ul><li>语法： :selected 获得下拉框选中的元素</li></ul></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326133404-143677.png" alt="image-20200326133402948"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. attr(): 获取/设置元素的属性</span><br><span class="line">2. removeAttr():删除属性</span><br><span class="line">3. prop():获取/设置元素的属性</span><br><span class="line">4. removeProp():删除属性</span><br><span class="line"></span><br><span class="line">* attr和prop区别？</span><br><span class="line">    1. 如果操作的是元素的固有属性，则建议使用prop</span><br><span class="line">    2. 如果操作的是元素自定义的属性，则建议使用attr</span><br></pre></td></tr></table></figure><h3 id="元素的CSS样式"><a href="#元素的CSS样式" class="headerlink" title="元素的CSS样式"></a>元素的CSS样式</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326133700-628504.png" alt="image-20200326133658929"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. addClass():添加class属性值</span><br><span class="line">2. removeClass():删除class属性值</span><br><span class="line">3. toggleClass():切换class属性</span><br><span class="line">    * toggleClass(&quot;one&quot;): </span><br><span class="line">    * 判断如果元素对象上存在class=&quot;one&quot;，则将属性值one删除掉。  </span><br><span class="line">  如果元素对象上不存在class=&quot;one&quot;，则添加</span><br><span class="line">4. css():</span><br></pre></td></tr></table></figure><h3 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h3><p>不传入参数为获取，传入为设置</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326133901-175643.png" alt="image-20200326133900354"></p><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><pre><code>1. append():父元素将子元素追加到末尾    * 对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾2. prepend():父元素将子元素追加到开头    * 对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头3. appendTo():    * 对象1.appendTo(对象2):将对象1添加到对象2内部，并且在末尾4. prependTo()：    * 对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头5. after():添加元素到元素后边    * 对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系6. before():添加元素到元素前边    * 对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系7. insertAfter()    * 对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系8. insertBefore()    * 对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系9. remove():移除元素    * 对象.remove():将对象删除掉10. empty():清空元素的所有后代元素。    * 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点11. clone():克隆调用对象</code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre><code>1. js的遍历方式    * for(初始化值;循环结束条件;步长)2. jq的遍历方式    1. jq对象.each(callback)        1. 语法：            jquery对象.each(function(index,element){});                * index:就是元素在集合中的索引                * element：就是集合中的每一个元素对象                * this：集合中的每一个元素对象        2. 回调函数返回值：            * true:如果当前function返回为false，则结束循环(break)。            * false:如果当前function返回为true，则结束本次循环，继续下次循环(continue)    2. $.each(object, [callback])    3. for..of: jquery 3.0 版本之后提供的方式        for(元素对象 of 容器对象)</code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326132747-665183.png" alt="image-20200326132721662"></p><pre><code>1. jquery标准的绑定方式    * jq对象.事件方法(回调函数)；    * 注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。        * 表单对象.submit();//让表单提交2. on绑定事件/off解除绑定    * jq对象.on(&quot;事件名称&quot;,回调函数)    * jq对象.off(&quot;事件名称&quot;)        * 如果off方法不传递任何参数，则将组件上的所有事件全部解绑3. 事件切换：toggle    * jq对象.toggle(fn1,fn2...)        * 当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2.....    * 注意：1.9版本 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。&lt;script src=&quot;../js/jquery-migrate-1.0.0.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></pre><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326132758-474743.png" alt="image-20200326132756884"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//onload是指在页面所有资源加载完成后执行</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert(1);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ready()则是在页面dom被浏览器解释完成后执行</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"页面准备就绪"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化形式</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"p.myclass"</span>).on(<span class="string">"click"</span> , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//$(this)是指当前事件产生的对象</span></span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"background-color"</span> , <span class="string">"yellow"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"span.myclass"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"background-color"</span> , <span class="string">"lightgreen"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"input[name='uname']"</span>).keypress(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 看下该事件对象有哪些属性</span></span><br><span class="line"><span class="built_in">console</span>.log(event);</span><br><span class="line"><span class="keyword">if</span>(event.keyCode == <span class="number">32</span>)&#123;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"color"</span> , <span class="string">"red"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>三种动画方式，传入参数个数任意</p><pre><code>1. 默认显示和隐藏方式    1. show([speed,[easing],[fn]])        1. 参数：            1. speed：动画的速度。三个预定义的值(&quot;slow&quot;,&quot;normal&quot;, &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)            2. easing：用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;                * swing：动画执行时效果是 先慢，中间快，最后又慢                * linear：动画执行时速度是匀速的            3. fn：在动画完成时执行的函数，每个元素执行一次。    2. hide([speed,[easing],[fn]])    3. toggle([speed],[easing],[fn])2. 滑动显示和隐藏方式    1. slideDown([speed],[easing],[fn])    2. slideUp([speed,[easing],[fn]])    3. slideToggle([speed],[easing],[fn])3. 淡入淡出显示和隐藏方式    1. fadeIn([speed],[easing],[fn])    2. fadeOut([speed],[easing],[fn])    3. fadeToggle([speed,[easing],[fn]])</code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>相当于全局函数</p><ol><li>$.fn.extend(object) <ul><li>增强通过Jquery获取的对象的功能  $(“#id”)</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义jqeury的对象插件</span></span><br><span class="line">$.fn.extend(&#123;</span><br><span class="line">    <span class="comment">//定义了一个check()方法。所有的jq对象都可以调用该方法</span></span><br><span class="line">    check:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//让复选框选中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//this:调用该方法的jq对象</span></span><br><span class="line">        <span class="keyword">this</span>.prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    uncheck:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//让复选框不选中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 获取按钮</span></span><br><span class="line">    <span class="comment">//$("#btn-check").check();</span></span><br><span class="line">    <span class="comment">//复选框对象.check();</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#btn-check"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取复选框对象</span></span><br><span class="line">        $(<span class="string">"input[type='checkbox']"</span>).check();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#btn-uncheck"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取复选框对象</span></span><br><span class="line">        $(<span class="string">"input[type='checkbox']"</span>).uncheck();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>$.extend(object)<ul><li>增强JQeury对象自身的功能  $/jQuery</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">          max:<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">              <span class="comment">//返回两数中的较大值</span></span><br><span class="line">              <span class="keyword">return</span> a &gt;= b ? a:b;</span><br><span class="line">          &#125;,</span><br><span class="line">          min:<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">              <span class="comment">//返回两数中的较小值</span></span><br><span class="line">              <span class="keyword">return</span> a &lt;= b ? a:b;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用全局方法</span></span><br><span class="line">      <span class="keyword">var</span> max = $.max(<span class="number">4</span>,<span class="number">3</span>);</span><br><span class="line">      <span class="comment">//alert(max);</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> min = $.min(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h1 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。<br>Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</p><ul><li>框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li><li>好处：<ol><li>定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li>响应式布局。<ul><li>同一套页面可以兼容不同分辨率的设备。</li></ul></li></ol></li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>下载Bootstrap</li><li>在项目中将这三个文件夹复制</li><li>创建html页面，引入必要的资源文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 css 插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><ul><li><p>同一套页面可以兼容不同分辨率的设备。</p></li><li><p>实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</p></li><li><p>步骤：</p><ol><li>定义容器。相当于之前的table、<ul><li>容器分类：<ol><li>container：两边留白</li><li>container-fluid：每一种设备都是100%宽度</li></ol></li></ul></li><li>定义行。相当于之前的tr   样式：row</li><li>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目<ul><li>设备代号：<ol><li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ol></li></ul></li></ol><ul><li>注意：<ol><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li></ol></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.定义容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.定义行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--3.定义元素</span></span><br><span class="line"><span class="comment">                在大显示器一行12个格子</span></span><br><span class="line"><span class="comment">                在pad上一行6个格子</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inner"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inner"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 inner"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>全局CSS样式：</span><br><span class="line"><span class="bullet">* </span>按钮：class="btn btn-default"</span><br><span class="line"><span class="bullet">* </span>图片：</span><br><span class="line"><span class="bullet">*  </span>class="img-responsive"：图片在任意尺寸都占100%，响应式布局</span><br><span class="line"><span class="bullet">*  </span>图片形状</span><br><span class="line"><span class="bullet">*  </span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></span>：方形</span><br><span class="line"><span class="bullet">*  </span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span></span> ： 圆形</span><br><span class="line"><span class="bullet">*  </span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span></span> ：相框</span><br><span class="line"><span class="bullet">* </span>表格</span><br><span class="line"><span class="bullet">* </span>table</span><br><span class="line"><span class="bullet">* </span>table-bordered</span><br><span class="line"><span class="bullet">* </span>table-hover</span><br><span class="line"><span class="bullet">* </span>表单</span><br><span class="line"><span class="bullet">* </span>给表单项添加：class="form-control" </span><br><span class="line"><span class="bullet">2. </span>组件：</span><br><span class="line"><span class="bullet">* </span>导航条</span><br><span class="line"><span class="bullet">* </span>分页条</span><br><span class="line"><span class="bullet">3. </span>插件：</span><br><span class="line"><span class="bullet">* </span>轮播图</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>栅格化布局，大小很方便控制，很像用表格来布局，通过div和row来实现一些简单的嵌套</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.paddtop</span>&#123;</span></span><br><span class="line">            padding-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.search-btn</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ffc900</span>;</span></span><br><span class="line">            width: 90px;</span><br><span class="line">            height: 35px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#ffc900</span> ;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 35px;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.search-input</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ffc900</span>;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 35px;</span><br><span class="line">            padding-left: 5px;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.jx</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ffc900</span>;</span></span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.company</span>&#123;</span></span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ffc900</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span> ;</span></span><br><span class="line">            font-size: 8px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 1.页眉部分--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/top_banner.jpg"</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row paddtop"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/logo.jpg"</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-input"</span> <span class="attr">placeholder</span>=<span class="string">"请输入线路名称"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"search-btn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/hotel_tel.png"</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--导航栏--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">                       <span class="comment">&lt;!-- 定义汉堡按钮 --&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                   <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--轮播图--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span> <span class="attr">role</span>=<span class="string">"listbox"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/banner_1.jpg"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/banner_2.jpg"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/banner_3.jpg"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.主体部分--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row jx"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/icon_5.jpg"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>黑马精选<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row paddtop"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row jx"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/icon_6.jpg"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>国内游<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row paddtop"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/guonei_1.jpg"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/jiangxuan_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">p</span>&gt;</span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>&amp;yen; 699<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 3.页脚部分--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/footer_service.png"</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row company"</span>&gt;</span></span><br><span class="line">           江苏传智播客教育科技股份有限公司 版权所有Copyright 2006-2018, All Rights Reserved 苏ICP备16007882</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JQuery&quot;&gt;&lt;a href=&quot;#JQuery&quot; class=&quot;headerlink&quot; title=&quot;JQuery&quot;&gt;&lt;/a&gt;JQuery&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>工具类</title>
    <link href="http://yoursite.com/2020/03/21/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/03/21/工具/工具类/</id>
    <published>2020-03-21T09:07:40.000Z</published>
    <updated>2020-04-11T03:01:11.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h1><p>简化数据封装，用于封装JavaBean</p><ol><li>JavaBean：标准的Java类<ol><li>要求：<ol><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共setter和getter方法</li></ol></li><li>功能：封装数据</li></ol></li><li>概念：<br> 成员变量：<br> 属性：setter和getter方法截取后的产物<br> 例如：getUsername() –&gt; Username–&gt; username</li><li>方法：<ol><li>setProperty()</li><li>getProperty()</li><li>populate(Object obj , Map map):将map集合的键值对信息封装到对应的JavaBean对象中</li></ol></li></ol><h1 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出格式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%thread] %d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出级别(优先级高到低):</span></span><br><span class="line"><span class="comment">        error: 错误 - 系统的故障日志</span></span><br><span class="line"><span class="comment">        warn: 警告 - 存在风险或使用不当的日志</span></span><br><span class="line"><span class="comment">        info: 一般性消息</span></span><br><span class="line"><span class="comment">        de<span class="doctag">bug:</span> 程序内部用于调试信息</span></span><br><span class="line"><span class="comment">        trace: 程序运行的跟踪信息</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200411105957-380091.png" alt="image-20200411105957687"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BeanUtils&quot;&gt;&lt;a href=&quot;#BeanUtils&quot; class=&quot;headerlink&quot; title=&quot;BeanUtils&quot;&gt;&lt;/a&gt;BeanUtils&lt;/h1&gt;&lt;p&gt;简化数据封装，用于封装JavaBean&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaBean：
      
    
    </summary>
    
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2020/03/05/%E5%B7%A5%E5%85%B7/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/03/05/工具/设计模式/</id>
    <published>2020-03-04T23:24:24.000Z</published>
    <updated>2020-04-10T09:21:20.170Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200310131759-241588.png" alt="image-20200304232456504"></p><p>设计模式是基于场景的解决方案</p><p>是前辈经验的总结，使代码更易理解，更易维护，更可靠</p><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong></p><ul><li>在内存中只有唯一对象，节省内存空间</li><li>避免频繁的创建和销毁对象，提升性能</li><li>避免对对象资源的多重占用</li></ul><p><strong>缺点</strong></p><p>扩展较为困难</p><p>若实例化后长期不使用，会被垃圾回收，造成对象状态丢失</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>创建对象占用资源较多，但又需要创建</li><li>对系统内资源要求统一读写，如读写配置文件信息</li><li>当多个实例存在可能引起逻辑错误，如号码生成器</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200310132717-901759.png" alt="image-20200310132715175"></p><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200310132907-564034.png" alt="image-20200310132905732"></p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>用于隐藏创建对象的细节</li><li>核心：工厂类(Factory)</li><li>可细分为简单工厂、工厂方法，抽象工厂</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p>根据不同的参数返回不同的实现类</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200330114602-34883.png" alt="image-20200330114602146"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200330114958-219426.png" alt="image-20200330114907853"></p><p>工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I18NFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态工厂</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> I18N <span class="title">getI18NObject</span><span class="params">(String area)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(area.equals(<span class="string">"china"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Chinese();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(area.equals(<span class="string">"spain"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Spainish();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(area.equals(<span class="string">"italy"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Italian();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Software &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">I18N i18n = I18NFactory.getI18NObject(&quot;spain&quot;);</span><br><span class="line">System.out.println(i18n.getTitle());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul><li>概念：<ol><li>真实对象：被代理的对象</li><li>代理对象：</li><li>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</li></ol></li><li>实现方式：<ol><li>静态代理：有一个类文件描述代理模式</li><li>动态代理：在内存中形成代理类<ul><li>实现步骤：<ul><li>代理对象和真实对象实现相同的接口</li><li>代理对象 = Proxy.newProxyInstance();</li><li>使用代理对象调用方法。</li><li>增强方法</li></ul></li></ul></li></ol></li><li>增强方式：<pre><code>* 增强参数列表* 增强返回值类型* 增强方法体执行逻辑    </code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200310131759-241588.png&quot; alt=&quot;image-20200304232456504&quot;&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java进阶2</title>
    <link href="http://yoursite.com/2020/02/28/heima57/java%E8%BF%9B%E9%98%B62/"/>
    <id>http://yoursite.com/2020/02/28/heima57/java进阶2/</id>
    <published>2020-02-28T10:17:23.000Z</published>
    <updated>2020-03-10T09:42:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</li><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）。</li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092208-821105.bmp" alt></p><p>并发指的是在一段时间内宏观上有多个程序同时运行</p><a id="more"></a><blockquote><p>注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。</p><p>同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，</p><p>当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为<strong>线程调度</strong>。</p></blockquote><h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><p>一个程序运行后至少有一个进程，一个进程中可以包含多个线程 </p><p>我们可以打开任务管理器查看当前任务的进程：</p><p><strong>线程调度:</strong></p><ul><li><p>分时调度</p><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p></li><li><p>抢占式调度</p><p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，<strong>Java使用</strong>的为抢占式调度。</p><ul><li><p>设置线程的优先级</p></li><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时</p></li></ul></li></ul><p>刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。</p><pre><code>其实，多线程程序并不能提高程序的运行速度，但能够**提高程序运行效率，让CPU的使用率更高。**</code></pre><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="创建线程类"><a href="#创建线程类" class="headerlink" title="创建线程类"></a>创建线程类</h3><p>构造方法：</p><p><code>public Thread()</code> :分配一个新的线程对象。<br><code>public Thread(String name)</code><br><code>public Thread(Runnable target)</code><br><code>public Thread(Runnable target,String name)</code> :分配一个带有指定目标新的线程对象并指定名字。</p><p>常用方法：</p><p><code>public String getName()</code> :获取当前线程名称。<br><code>public void start()</code> :导致此线程开始执行; Java虚拟机调用此线程的run方法。<br><code>public void run()</code> :此线程要执行的任务在此处定义代码。<br><code>public static void sleep(long millis)</code>:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）<br><code>public static Thread currentThread()</code> :返回对当前正在执行的线程对象的引用。</p><p><code>public void join()</code>:等待调用join方法的线程结束后才能执行</p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义指定线程名称的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用父类的String参数的构造方法，指定线程的名称</span></span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写run方法，完成该线程执行的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"小强"</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建自定义线程对象</span></span><br><span class="line">MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">"新的线程！"</span>);</span><br><span class="line"><span class="comment">//开启新线程</span></span><br><span class="line">mt.start();</span><br><span class="line"><span class="comment">//在主方法中执行for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"旺财"</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223102015-961264.png" alt="image-20200223102014703"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223102122-138221.png" alt="image-20200223102121409"></p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" "</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建自定义类对象  线程任务对象</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(mr, <span class="string">"小强"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"旺财 "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过实现Runnable接口，使得该类有了多线程类的特征。</p></li><li><p>Thread类实际上也是实现了Runnable接口的类。</p></li><li><p>所有的多线程代码都是通过运行Thread的start()方法来运行的。因此不管怎么创建的，最终还是通过Thread的对象的API来控制线程的</p></li></ul><h4 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h4><p><strong>实现Runnable接口的优势</strong></p><ol><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li><li>线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。</li></ol><h4 id="扩充"><a href="#扩充" class="headerlink" title="扩充"></a>扩充</h4><p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程</p><p>每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进程。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>匿名内部类方式实现线程的创建 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                  System.out.println(<span class="string">"张宇:"</span>+i);</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  <span class="keyword">new</span> Thread(r).start();</span><br></pre></td></tr></table></figure><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200310174129-276086.png" alt="image-20200310174127374"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200310174232-57512.png" alt="image-20200310174232322"></p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>线程安全问题都是由全局变量及静态变量引起的。</p><ul><li><p>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；</p></li><li><p>若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223134605-158865.png" alt="image-20200223134454077"></p><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>Java中提供了同步机制(synchronized)来解决线程安全问题</p><p>生成一个唯一的锁对象，抢到锁对象的线程可以执行同步方法，其余线程被阻塞，直到锁对象被释放</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223134726-964888.png" alt="image-20200223134725166"></p><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><p>可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">     需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作 </span></span><br><span class="line">        <span class="comment">//窗口 永远开启 </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                    <span class="comment">//出票操作</span></span><br><span class="line">                    <span class="comment">//使用sleep模拟一下出票时间 </span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//获取当前线程对象的名字 </span></span><br><span class="line">                    String name = Thread.currentThread().getName();</span><br><span class="line">                    System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><p>使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于非static方法,同步锁就是this。 </li><li>对于static方法,我们使用当前方法所在类的字节码对象(类名.class)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作 </span></span><br><span class="line">        <span class="comment">//窗口 永远开启 </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            sellTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 锁对象 是 谁调用这个方法 就是谁 </span></span><br><span class="line"><span class="comment">     *   隐含 锁对象 就是  this</span></span><br><span class="line"><span class="comment">     *    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖   </span></span><br><span class="line">            <span class="comment">//出票操作</span></span><br><span class="line">            <span class="comment">//使用sleep模拟一下出票时间 </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取当前线程对象的名字 </span></span><br><span class="line">            String name = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h5><p>提供了比synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> :加同步锁。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> :释放同步锁。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作 </span></span><br><span class="line">        <span class="comment">//窗口 永远开启 </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                <span class="comment">//出票操作 </span></span><br><span class="line">                <span class="comment">//使用sleep模拟一下出票时间 </span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取当前线程对象的名字 </span></span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">            &#125;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><h3 id="常见状态"><a href="#常见状态" class="headerlink" title="常见状态"></a>常见状态</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223112807-10084.png" alt="image-20200223112806050"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200306191508-325266.png" alt="image-20200306191508654"></p><h4 id="Timed-Waiting（计时等待）"><a href="#Timed-Waiting（计时等待）" class="headerlink" title="Timed Waiting（计时等待）"></a>Timed Waiting（计时等待）</h4><p>Timed Waiting在API中的描述为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。</p><p>在写卖票的案例中，为了减少线程执行太快，现象不明显等问题，我们在run方法中添加了sleep语句</p><p>其实当我们调用了sleep方法之后，当前执行的线程就进入到“休眠状态”，其实就是所谓的Timed Waiting(计时等待)</p><p>实现一个计数器，计数到100，在每个数字之间暂停1秒，每隔10个数字输出一个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i) % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"‐‐‐‐‐‐‐"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.print(<span class="string">"线程睡眠1秒！\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>tips：</strong></p><ol><li><p>进入 TIMED_WAITING 状态的一种常见情形是调用 sleep 方法，单独的线程也可以调用，不一定非要有协作关系。</p></li><li><p>为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠</p></li><li><p>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable（可运行）状态。</p><p>小提示：sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就立刻执行。</p></li></ol><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223140342-704108.png" alt="image-20200223140341287"></p><h4 id="BLOCKED（锁阻塞）"><a href="#BLOCKED（锁阻塞）" class="headerlink" title="BLOCKED（锁阻塞）"></a>BLOCKED（锁阻塞）</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223140811-489439.png" alt></p><h4 id="Waiting（无限等待）"><a href="#Waiting（无限等待）" class="headerlink" title="Waiting（无限等待）"></a>Waiting（无限等待）</h4><p>等待唤醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 演示waiting</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println( Thread.currentThread().getName() +<span class="string">"=== 获取到锁对象，调用wait方法，进入waiting状态，释放锁对象"</span>);</span><br><span class="line">                            obj.wait();  <span class="comment">//无限等待</span></span><br><span class="line">                            <span class="comment">//obj.wait(5000); //计时等待, 5秒 时间到，自动醒来</span></span><br><span class="line"> </span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println( Thread.currentThread().getName + <span class="string">"=== 从waiting状态醒来，获取到锁对象，继续执行了"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"等待线程"</span>).start();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;   <span class="comment">//每隔3秒 唤醒一次</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName)</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println( Thread.currentThread().getName<span class="string">"‐‐‐‐‐ 获取到锁对象,调用notify方法，释放锁对象"</span>);</span><br><span class="line">                        obj.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;,<span class="string">"唤醒线程"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述案例我们会发现，一个调用了某个对象的 Object.wait 方法的线程会等待另一个线程调用<strong>此对象</strong>的Object.notify()方</p><p>法 或 Object.notifyAll()方法</p><p>其实waiting状态并不是一个线程的操作，它体现的是<strong>多个线程间的通信</strong>，可以理解为多个线程之间的协作关系，</p><p><strong>多个线程会争取锁，同时相互之间又存在协作关系</strong></p><p>当多个线程协作时，比如A，B线程，如果A线程在Runnable（可运行）状态中调用了wait()方法那么A线程就进入了</p><p>Waiting（无限等待）状态，同时失去了同步锁。假如这个时候B线程获取到了同步锁，在运行状态中调用了notify()方法，那</p><p>么就会将无限等待的A线程唤醒。如果获取到锁对象，那么A线程唤醒后就进入Runnable（可运行）状态；如果没有获取锁对象，那么就进入到Blocked（锁阻塞状态）。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223142500-184550.png" alt="image-20200223142459327"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223142621-546872.png" alt="image-20200223142620323" style="zoom:200%;"><h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><h4 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h4><p><strong>概念：</strong>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同</p><p>多个thread类传入同一个runnable接口，且该runnable接口中有唯一锁对象，通过该对象来实现线程间通信</p><p>比如：线程A用来生成包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092728-871297.bmp" alt></p><p><strong>如何保证线程间通信有效利用资源：</strong></p><p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。 即我们需要</p><p>通过一定的手段使各个线程能有效的利用资源。而这种手段即—— <strong>等待唤醒机制。</strong></p><h4 id="等待唤醒机制-1"><a href="#等待唤醒机制-1" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h4><p><strong>什么是等待唤醒机制</strong></p><p>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，但这并不是故事的全部，线程间也会有协作机制。</p><p>就是在一个线程进行了规定操作后，就进入等待状态， 等待其他线程执行完他们的指定代码过后 再将其唤醒;在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。</p><p>wait/notify 就是线程间的一种协作机制。</p><p><strong>等待唤醒中的方法</strong></p><p>等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义如下：</p><ol><li><p>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态</p><p>即是 WAITING。它还要等别的线程执行一个<strong>特别的动作</strong>，也即是“<strong>通知</strong>”在这个对象上等待的线程从wait set 中释放出</p><p>来，重新进入到调度队列（ready queue）中</p></li><li><p>notify：则选取锁通知对象的 wait set 中的一个线程释放</p></li><li><p>notifyAll：则释放锁通知对象的 wait set 上的全部线程。</p></li></ol><blockquote><p>注意：</p><p>哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁，成功后才能在当初调用 <strong>wait 方法之后的地方恢复执行</strong>。</p><p><strong>总结：</strong></p><ul><li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态；</li><li>否则，从 wait set 出来，又进入 entry set，线程就从 WAITING 状态又变成 BLOCKED 状态</li></ul></blockquote><p><strong>调用wait和notify方法需要注意的细节</strong></p><ol><li><p>wait方法与notify方法必须要由<strong>同一个锁对象调用</strong>。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait</p><p>方法后的线程。</p></li><li><p>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</p></li><li><p>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</p></li></ol><h4 id="生产者与消费者问题"><a href="#生产者与消费者问题" class="headerlink" title="生产者与消费者问题"></a>生产者与消费者问题</h4><p>等待唤醒机制其实就是经典的“生产者与消费者”的问题。</p><p>就拿生产包子消费包子来说等待唤醒机制如何有效利用资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">包子铺线程生产包子，吃货线程消费包子。</span></span><br><span class="line"><span class="comment">当包子没有时，吃货线程等待，</span></span><br><span class="line"><span class="comment">包子铺线程生产包子，并通知吃货线程（解除吃货的等待状态）,因为已经有包子了，那么包子铺线程进入等待状态。</span></span><br><span class="line"><span class="comment">接下来，吃货线程能否进一步执行则取决于锁的获取情况。</span></span><br><span class="line"><span class="comment">如果吃货获取到锁，那么就执行吃包子动作，</span></span><br><span class="line"><span class="comment">包子吃完（包子状态为false），并通知包子铺线程（解除包子铺的等待状态）,吃货线程进入等待。</span></span><br><span class="line"><span class="comment">包子铺线程能否进一步执行则取决于锁的获取情况。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>代码演示：</strong></p><p>包子资源类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>&#123;</span><br><span class="line">     String  pier ;</span><br><span class="line">     String  xianer ;</span><br><span class="line">     <span class="keyword">boolean</span>  flag = <span class="keyword">false</span> ;<span class="comment">//包子资源 是否存在  包子资源状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>吃货线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(String name,BaoZi bz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">false</span>)&#123;<span class="comment">//没包子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"吃货正在吃"</span>+bz.pier+bz.xianer+<span class="string">"包子"</span>);</span><br><span class="line">                bz.flag = <span class="keyword">false</span>;</span><br><span class="line">                bz.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包子铺线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(String name,BaoZi bz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//造包子</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (bz)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bz.flag == <span class="keyword">true</span>)&#123;<span class="comment">//包子资源  存在</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                        bz.wait();</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 没有包子  造包子</span></span><br><span class="line">                System.out.println(<span class="string">"包子铺开始做包子"</span>);</span><br><span class="line">                <span class="keyword">if</span>(count%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 冰皮  五仁</span></span><br><span class="line">                    bz.pier = <span class="string">"冰皮"</span>;</span><br><span class="line">                    bz.xianer = <span class="string">"五仁"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 薄皮  牛肉大葱</span></span><br><span class="line">                    bz.pier = <span class="string">"薄皮"</span>;</span><br><span class="line">                    bz.xianer = <span class="string">"牛肉大葱"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">                bz.flag=<span class="keyword">true</span>;</span><br><span class="line">                System.out.println(<span class="string">"包子造好了："</span>+bz.pier+bz.xianer);</span><br><span class="line">                System.out.println(<span class="string">"吃货来吃吧"</span>);</span><br><span class="line">                <span class="comment">//唤醒等待线程 （吃货）</span></span><br><span class="line">                bz.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//等待唤醒案例</span></span><br><span class="line">        BaoZi bz = <span class="keyword">new</span> BaoZi();</span><br><span class="line"></span><br><span class="line">        ChiHuo ch = <span class="keyword">new</span> ChiHuo(<span class="string">"吃货"</span>,bz);</span><br><span class="line">        BaoZiPu bzp = <span class="keyword">new</span> BaoZiPu(<span class="string">"包子铺"</span>,bz);</span><br><span class="line"></span><br><span class="line">        ch.start();</span><br><span class="line">        bzp.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="线程池思想概述"><a href="#线程池思想概述" class="headerlink" title="线程池思想概述"></a>线程池思想概述</h3><p>在Java中可以通过线程池来使得线程可以复用</p><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul><li><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作</li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092754-441985.bmp" alt></p><p>合理利用线程池的好处：</p><ol><li><p>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</p></li><li><p>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</p></li><li><p>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而导致</p><p>服务器瘫痪(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)</p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个</p><p>执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此</p><p>在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors</p><p>工程类来创建线程池对象。</p><p>Executors类中有个创建线程池的方法如下：</p><ul><li><p><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池,也就是</p><p>池中的线程个数可以指定最大数量)</p></li></ul><p>获取到了一个线程池ExecutorService 对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下：</p><ul><li><p><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</p><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果</p></blockquote></li></ul><p>使用线程池中线程对象的步骤：</p><ol><li>创建线程池对象。</li><li>创建Runnable接口子类对象。(task)</li><li>提交Runnable接口子类对象。(take task)</li><li>关闭线程池(一般不做)。</li></ol><p>Runnable实现类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要一个教练"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"教练来了： "</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"教我游泳,交完后，教练回到了游泳池"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);<span class="comment">//包含2个线程对象</span></span><br><span class="line">        <span class="comment">// 创建Runnable实例对象</span></span><br><span class="line">        MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己创建线程对象的方式</span></span><br><span class="line">        <span class="comment">// Thread t = new Thread(r);</span></span><br><span class="line">        <span class="comment">// t.start(); ---&gt; 调用MyRunnable中的run()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 再获取个线程对象，调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span></span><br><span class="line">        <span class="comment">// 将使用完的线程又归还到了线程池中</span></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        <span class="comment">//service.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public File(String pathname)</code> </li><li><code>public File(String parent, String child)</code> </li><li><code>public File(File parent, String child)</code></li></ul><p>tips：</p><blockquote><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol></blockquote><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h4><ul><li><p><code>public String getAbsolutePath()</code> ：返回此File的绝对路径名字符串。</p></li><li><p><code>public String getPath()</code> ：将此File转换为路径名字符串。 </p></li><li><p><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </p></li><li><p><code>public long length()</code>  ：返回由此File表示的文件的长度。 </p></li></ul><blockquote><p>API中说明：length()，表示文件的长度。但是File对象表示目录，则返回值未指定。</p></blockquote><h4 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h4><ul><li><code>public boolean exists()</code> </li><li><code>public boolean isDirectory()</code> </li><li><code>public boolean isFile()</code> </li></ul><h4 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h4><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。  </li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><blockquote><p>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote><h3 id="目录的遍历"><a href="#目录的遍历" class="headerlink" title="目录的遍历"></a>目录的遍历</h3><ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li></ul><ul><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。  </li></ul><blockquote><p>小贴士：</p><p>​    调用listFiles方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。</p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li><p><strong>递归</strong>：指在当前方法内调用自己的这种现象。</p></li><li><p><strong>递归的分类:</strong></p><ul><li>直接递归称为方法自身调用自己。</li><li>间接递归为A方法调用B方法，B方法调用C方法，C方法调用A方法。</li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</li><li>构造方法禁止递归</li></ul></li><li><p><strong>核心：找到f(n)和f(n-1)的关系</strong></p></li></ul><h3 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h3><ul><li><strong>阶乘</strong>：所有小于及等于该数的正整数的积。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n的阶乘：n! = n * (n-<span class="number">1</span>) *...* <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：这与累和类似,只不过换成了乘法运算，学员可以自己练习，需要注意阶乘值符合int类型的范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推理得出：n! = n * (n-1)!</span><br><span class="line">f(n) = n*f(n-1)</span><br><span class="line">出口：n=1时，返回1</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 1的阶乘为1</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        n不为1时,方法返回 n! = n*(n-1)!</span></span><br><span class="line"><span class="comment">          递归调用getValue方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        <span class="keyword">return</span> n * getValue(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归打印多级目录"><a href="#递归打印多级目录" class="headerlink" title="递归打印多级目录"></a>递归打印多级目录</h3><p><strong>分析</strong>：多级目录的打印，就是当目录的嵌套。遍历之前，无从知道到底有多少级目录，所以我们要使用递归实现。</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 创建File对象</span></span><br><span class="line">        File dir  = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">      <span class="comment">// 调用打印目录方法</span></span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">printDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 获取子文件和目录</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">      <span class="comment">// 循环打印</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        判断:</span></span><br><span class="line"><span class="comment">        当是文件时,打印绝对路径.</span></span><br><span class="line"><span class="comment">        当是目录时,继续调用打印目录的方法,形成递归调用.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">              <span class="comment">// 是文件,输出文件绝对路径</span></span><br><span class="line">                System.out.println(<span class="string">"文件名:"</span>+ file.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 是目录,输出目录绝对路径</span></span><br><span class="line">                System.out.println(<span class="string">"目录:"</span>+file.getAbsolutePath());</span><br><span class="line">              <span class="comment">// 继续遍历,调用printDir,形成递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><p>搜索<code>D:\aaa</code> 目录中的<code>.java</code> 文件。</p><p><strong>分析</strong>：</p><ol><li>目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</li><li>遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</li></ol><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建File对象</span></span><br><span class="line">        File dir  = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">      <span class="comment">// 调用打印目录方法</span></span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 获取子文件和目录</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">              <span class="comment">// 是文件，判断文件名并输出文件绝对路径</span></span><br><span class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".java"</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"文件名:"</span> + file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 是目录，继续遍历,形成递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件过滤器优化"><a href="#文件过滤器优化" class="headerlink" title="文件过滤器优化"></a>文件过滤器优化</h3><p><code>java.io.FileFilter</code>是一个接口，是File的过滤器。 该接口的对象可以传递给File类的<code>listFiles(FileFilter)</code> 作为参数， 接</p><p>口中只有一个方法。</p><p><code>boolean accept(File pathname)</code> ：测试pathname是否应该包含在当前File目录中，符合则返回true。</p><p><strong>分析</strong>：</p><ol><li>接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。</li><li><code>accept</code>方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。保留规则：<ol><li>要么是.java文件。</li><li>要么是目录，用于继续遍历。</li></ol></li><li>通过过滤器的作用，<code>listFiles(FileFilter)</code>返回的数组元素中，子文件对象都是符合条件的，可以直接打印。</li></ol><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">        printDir2(dir);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir2</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 匿名内部类方式,创建过滤器子类对象</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pathname.getName().endsWith(<span class="string">".java"</span>)||pathname.isDirectory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件名:"</span> + file.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                printDir2(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda优化"><a href="#Lambda优化" class="headerlink" title="Lambda优化"></a>Lambda优化</h3><p><strong>分析：</strong><code>FileFilter</code>是函数式接口，因此可以用lambda表达式简写。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir3</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// lambda的改写</span></span><br><span class="line">    File[] files = dir.listFiles(f -&gt;&#123; </span><br><span class="line">      <span class="keyword">return</span> f.getName().endsWith(<span class="string">".java"</span>) || f.isDirectory(); </span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 循环打印</span></span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件名:"</span> + file.getAbsolutePath());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printDir3(file);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IO概述"><a href="#IO概述" class="headerlink" title="IO概述"></a>IO概述</h2><h3 id="什么是IO"><a href="#什么是IO" class="headerlink" title="什么是IO"></a>什么是IO</h3><p>把数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> </p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作</p><h3 id="IO的分类"><a href="#IO的分类" class="headerlink" title="IO的分类"></a>IO的分类</h3><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><h3 id="IO的流向说明图解"><a href="#IO的流向说明图解" class="headerlink" title="IO的流向说明图解"></a>IO的流向说明图解</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223093024-815496.jpeg" alt></p><h3 id="顶级父类们"><a href="#顶级父类们" class="headerlink" title="顶级父类们"></a>顶级父类们</h3><table><thead><tr><th align="center"></th><th align="center"><strong>输入流</strong></th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center"><strong>字节流</strong></td><td align="center">字节输入流<br><strong>InputStream</strong></td><td align="center">字节输出流<br><strong>OutputStream</strong></td></tr><tr><td align="center"><strong>字符流</strong></td><td align="center">字符输入流<br><strong>Reader</strong></td><td align="center">字符输出流<br><strong>Writer</strong></td></tr></tbody></table><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="一切皆为字节"><a href="#一切皆为字节" class="headerlink" title="一切皆为字节"></a>一切皆为字节</h3><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，所以字节流可以传输任意文件数据。</p><p>在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的<strong>始终为二进制数据</strong>。</p><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地</p><ul><li><code>public void close()</code> </li><li><code>public void flush()</code> </li><li><code>public void write(byte[] b)</code></li><li><code>public void write(byte[] b, int off, int len)</code> </li><li><code>public abstract void write(int b)</code> </li></ul><blockquote><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200307084853961.png" alt="image-20200307084853961"></p><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p><code>OutputStream</code>有很多子类</p><p><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件</p><p>如果有这个文件，会清空这个文件的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);      </span><br><span class="line"><span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"b.txt"</span>);</span><br></pre></td></tr></table></figure><h4 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h4><ol><li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line"> FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line"><span class="comment">// 写出数据</span></span><br><span class="line">fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"> fos.close();</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol start="2"><li><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line"> FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line"><span class="comment">// 字符串转换为字节数组</span></span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="string">"黑马程序员"</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出字节数组数据</span></span><br><span class="line">fos.write(b);</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"> fos.close();</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">      FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line">    <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">      fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">      fos.close();</span><br></pre></td></tr></table></figure><h4 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h4><ul><li><code>public FileOutputStream(File file, boolean append)</code></li><li><code>public FileOutputStream(String name, boolean append)</code></li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">      FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>，<span class="keyword">true</span>);     </span><br><span class="line">    <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">      fos.write(b);</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">      fos.close();</span><br></pre></td></tr></table></figure><h4 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h4><p>Windows系统里，换行符号是<code>\r\n</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line"> FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);  </span><br><span class="line"><span class="comment">// 定义字节数组</span></span><br><span class="line"><span class="keyword">byte</span>[] words = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">   <span class="comment">// 写出一个字节</span></span><br><span class="line">     fos.write(words[i]);</span><br><span class="line">   <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">     fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"> fos.close();</span><br></pre></td></tr></table></figure><blockquote><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200307084830555.png" alt="image-20200307084830555"></p><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileInputStream(File file)</code></li><li><code>FileInputStream(String name)</code></li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">  File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">  FileInputStream fos = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">  <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">  FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br></pre></td></tr></table></figure><h4 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h4><ol><li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">     FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">    <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">      <span class="keyword">int</span> b ；</span><br><span class="line">      <span class="comment">// 循环读取</span></span><br><span class="line">      <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">          System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">      fis.close();</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然读取了一个字节，但是会自动提升为int类型</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得</li></ol></blockquote><ol start="2"><li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">     FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">    <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">      <span class="keyword">int</span> len ；</span><br><span class="line">      <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">      <span class="comment">// 循环读取</span></span><br><span class="line">      <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">         <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">          System.out.println(<span class="keyword">new</span> String(b，<span class="number">0</span>，len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">      fis.close();</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></blockquote><h3 id="练习：图片复制"><a href="#练习：图片复制" class="headerlink" title="练习：图片复制"></a>练习：图片复制</h3><h4 id="复制原理图解"><a href="#复制原理图解" class="headerlink" title="复制原理图解"></a>复制原理图解</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223093057-276464.jpeg" alt></p><h4 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h4><p>复制图片文件，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建流对象</span></span><br><span class="line"><span class="comment">// 1.1 指定数据源</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\test.jpg"</span>);</span><br><span class="line"><span class="comment">// 1.2 指定目的地</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test_copy.jpg"</span>);</span><br><span class="line"><span class="comment">// 2.读写数据</span></span><br><span class="line"><span class="comment">// 2.1 定义数组</span></span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">// 2.2 定义长度</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="comment">// 2.3 循环读取</span></span><br><span class="line"><span class="keyword">while</span> ((len = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.4 写出数据</span></span><br><span class="line">    fos.write(b, <span class="number">0</span> , len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.关闭资源</span></span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><blockquote><p>流的关闭原则：<strong>先开后关，后开先关。</strong></p></blockquote><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字</p><p>符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><p>字符流会用到文件缓冲区，所以写入时多了个flush方法</p><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中</p><ul><li><code>public void close()</code> </li><li><code>public int read()</code></li><li><code>public int read(char[] cbuf)</code></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200307091858-105649.png" alt="image-20200307091856611"></p><h4 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h4><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>小贴士：</p><ol><li><p>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。</p><p>idea中UTF-8</p></li><li><p>字节缓冲区：一个字节数组，用来临时存储字节数据。</p></li></ol></blockquote><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileReader(File file)</code></li><li><code>FileReader(String fileName)</code></li></ul><h4 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h4><ol><li><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">     FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">    <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">      <span class="keyword">int</span> b ；</span><br><span class="line">      <span class="comment">// 循环读取</span></span><br><span class="line">      <span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">          System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">      fr.close();</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote><ol start="2"><li><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">  FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line"> <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">   <span class="keyword">int</span> len ；</span><br><span class="line">   <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">   <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">   <span class="comment">// 循环读取</span></span><br><span class="line">   <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">       System.out.println(<span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">   fr.close();</span><br></pre></td></tr></table></figure><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf)</code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len)</code></li><li><code>void write(String str)</code>写入字符串。 </li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush()</code></li><li><code>void close()</code> </li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200307091951-911827.png" alt="image-20200307091950288"></p><h4 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h4><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileWriter(File file)</code></li><li><code>FileWriter(String fileName)</code></li></ul><h4 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h4><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line"> FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line"><span class="comment">// 写出数据</span></span><br><span class="line">fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">fw.write(<span class="string">'b'</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">fw.write(<span class="string">'C'</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。   </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment"> 如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> fw.close();</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol></blockquote><h4 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们</p><p>既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close</code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><blockquote><p>小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h4 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h4><ol><li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">      FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line">    <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">    <span class="keyword">char</span>[] chars = <span class="string">"黑马程序员"</span>.toCharArray();      </span><br><span class="line">    <span class="comment">// 写出字符数组</span></span><br><span class="line">    fw.write(chars); <span class="comment">// 黑马程序员 </span></span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span></span><br><span class="line">      fw.write(b,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 程序      </span></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">      fos.close();</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便</p></li><li><p><strong>续写和换行</strong>：操作类似于FileOutputStream。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>，<span class="keyword">true</span>);     </span><br><span class="line">  <span class="comment">// 写出字符串</span></span><br><span class="line">    fw.write(<span class="string">"黑马"</span>);</span><br><span class="line">  <span class="comment">// 写出换行</span></span><br><span class="line">  fw.write(<span class="string">"\r\n"</span>);</span><br><span class="line">  <span class="comment">// 写出字符串</span></span><br><span class="line">fw.write(<span class="string">"程序员"</span>);</span><br><span class="line">  <span class="comment">// 关闭资源</span></span><br><span class="line">    fw.close();</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p></blockquote><h2 id="IO异常的处理"><a href="#IO异常的处理" class="headerlink" title="IO异常的处理"></a>IO异常的处理</h2><h4 id="JDK7前处理"><a href="#JDK7前处理" class="headerlink" title="JDK7前处理"></a>JDK7前处理</h4><p>之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用<code>try...catch...finally</code> 代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 声明变量</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建流对象</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">"黑马程序员"</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK7的处理"><a href="#JDK7的处理" class="headerlink" title="JDK7的处理"></a>JDK7的处理</h4><p>还可以使用JDK7优化后的<code>try-with-resource</code> 语句，该语句确保了每个资源在语句结束时自动关闭。</p><p>所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (创建流对象语句，如果多个,使用<span class="string">';'</span>隔开) &#123;</span><br><span class="line"><span class="comment">// 读写数据</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> ( FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>); ) &#123;</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">"黑马程序员"</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK9的改进"><a href="#JDK9的改进" class="headerlink" title="JDK9的改进"></a>JDK9的改进</h4><p>JDK9中<code>try-with-resource</code> 的改进，对于<strong>引入对象</strong>的方式，支持的更加简洁。被引入的对象，同样可以自动关闭</p><p>改进前格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> Resource resource1 = <span class="keyword">new</span> Resource(<span class="string">"resource1"</span>);</span><br><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line">Resource resource2 = <span class="keyword">new</span> Resource(<span class="string">"resource2"</span>);</span><br><span class="line"><span class="comment">// 引入方式：创建新的变量保存</span></span><br><span class="line"><span class="keyword">try</span> (Resource r1 = resource1;</span><br><span class="line">     Resource r2 = resource2) &#123;</span><br><span class="line">     <span class="comment">// 使用对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进后格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> Resource resource1 = <span class="keyword">new</span> Resource(<span class="string">"resource1"</span>);</span><br><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line">Resource resource2 = <span class="keyword">new</span> Resource(<span class="string">"resource2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入方式：直接引入</span></span><br><span class="line"><span class="keyword">try</span> (resource1; resource2) &#123;</span><br><span class="line">     <span class="comment">// 使用对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进后，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="keyword">final</span>  FileReader fr  = <span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>);</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>);</span><br><span class="line"><span class="comment">// 引入到try中</span></span><br><span class="line"><span class="keyword">try</span> (fr; fw) &#123;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">  <span class="comment">// 读取数据</span></span><br><span class="line">  <span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 写出数据</span></span><br><span class="line">    fw.write(b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><code>java.util.Properties</code> 继承于<code>Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一</p><p>个字符串。该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><h4 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public Properties()</code> :创建一个空的属性列表。</li></ul><h4 id="基本的存储方法"><a href="#基本的存储方法" class="headerlink" title="基本的存储方法"></a>基本的存储方法</h4><ul><li><code>public Object setProperty(String key, String value)</code> </li><li><code>public String getProperty(String key)</code></li><li><code>public Set&lt;String&gt; stringPropertyNames()</code> ：所有键的名称的集合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建属性集对象</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">// 添加键值对元素</span></span><br><span class="line">properties.setProperty(<span class="string">"location"</span>, <span class="string">"D:\\a.txt"</span>);</span><br><span class="line"><span class="comment">// 通过键,获取属性值</span></span><br><span class="line">System.out.println(properties.getProperty(<span class="string">"location"</span>));</span><br><span class="line"><span class="comment">// 遍历属性集,获取所有键的集合</span></span><br><span class="line">Set&lt;String&gt; strings = properties.stringPropertyNames();</span><br><span class="line"><span class="comment">// 打印键值对</span></span><br><span class="line"><span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">  System.out.println(key+<span class="string">" -- "</span>+properties.getProperty(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="与流相关的方法"><a href="#与流相关的方法" class="headerlink" title="与流相关的方法"></a>与流相关的方法</h4><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可以使用Properties集合中的方法load,把硬盘中保存的文件(键值对),读取到集合中使用</span></span><br><span class="line"><span class="comment">        void load(InputStream inStream)</span></span><br><span class="line"><span class="comment">        void load(Reader reader)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            InputStream inStream:字节输入流,不能读取含有中文的键值对</span></span><br><span class="line"><span class="comment">            Reader reader:字符输入流,能读取含有中文的键值对</span></span><br><span class="line"><span class="comment">        使用步骤:</span></span><br><span class="line"><span class="comment">            1.创建Properties集合对象</span></span><br><span class="line"><span class="comment">            2.使用Properties集合对象中的方法load读取保存键值对的文件</span></span><br><span class="line"><span class="comment">            3.遍历Properties集合</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            1.存储键值对的文件中,键与值默认的连接符号可以使用=,空格(其他符号)</span></span><br><span class="line"><span class="comment">            2.存储键值对的文件中,可以使用#进行注释,被注释的键值对不会再被读取</span></span><br><span class="line"><span class="comment">            3.存储键值对的文件中,键与值默认都是字符串,不用再加引号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 加载文本中信息到属性集</span></span><br><span class="line">        pro.load(<span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>));</span><br><span class="line">        <span class="comment">// 遍历集合并打印</span></span><br><span class="line">        Set&lt;String&gt; strings = pro.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">          System.out.println(key+<span class="string">" -- "</span>+pro.getProperty(key));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：文本中的数据，必须是键值对形式，可以使用空格、等号、冒号等符号分隔。</p></blockquote><h5 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        可以使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</span></span><br><span class="line"><span class="comment">        void store(OutputStream out, String comments)</span></span><br><span class="line"><span class="comment">        void store(Writer writer, String comments)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            OutputStream out:字节输出流,不能写入中文</span></span><br><span class="line"><span class="comment">            Writer writer:字符输出流,可以写中文</span></span><br><span class="line"><span class="comment">            String comments:注释,用来解释说明保存的文件是做什么用的</span></span><br><span class="line"><span class="comment">                    不能使用中文,会产生乱码,默认是Unicode编码</span></span><br><span class="line"><span class="comment">                    一般使用""空字符串</span></span><br><span class="line"><span class="comment">        使用步骤:</span></span><br><span class="line"><span class="comment">            1.创建Properties集合对象,添加数据</span></span><br><span class="line"><span class="comment">            2.创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地</span></span><br><span class="line"><span class="comment">            3.使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</span></span><br><span class="line"><span class="comment">            4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">//1.创建Properties集合对象,添加数据</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.setProperty(<span class="string">"赵丽颖"</span>,<span class="string">"168"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"迪丽热巴"</span>,<span class="string">"165"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"古力娜扎"</span>,<span class="string">"160"</span>);</span><br><span class="line">    <span class="comment">//2.创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\prop.txt"</span>);</span><br><span class="line">    <span class="comment">//3.使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</span></span><br><span class="line">    prop.store(fw,<span class="string">"save data"</span>);</span><br><span class="line">    <span class="comment">//4.释放资源</span></span><br><span class="line">    fw.close();</span><br></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理：在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数</p><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><h4 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedInputStream(InputStream in)</code> </li><li><code>public BufferedOutputStream(OutputStream out)</code></li></ul><h4 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h4><p>如何更快呢？使用数组的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jdk9.exe"</span>));</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>));</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><h4 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedReader(Reader in)</code></li><li><code>public BufferedWriter(Writer out)</code></li></ul><h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><p>字符缓冲流的基本方法与普通字符流调用方式一致</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li></ul><p><code>readLine</code>方法演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">// 创建流对象</span></span><br><span class="line">      BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">      String line  = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">      <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">          System.out.print(line);</span><br><span class="line">          System.out.println(<span class="string">"------"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">      br.close();</span><br></pre></td></tr></table></figure><p><code>newLine</code>方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">    <span class="comment">// 写出数据</span></span><br><span class="line">      bw.write(<span class="string">"黑马"</span>);</span><br><span class="line">    <span class="comment">// 写出换行</span></span><br><span class="line">      bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">      bw.close();</span><br></pre></td></tr></table></figure><h3 id="练习-文本排序"><a href="#练习-文本排序" class="headerlink" title="练习:文本排序"></a>练习:文本排序</h3><p>请将文本信息恢复顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>逐行读取文本信息。</li><li>解析文本信息到集合中。</li><li>遍历集合，按顺序，写出文本信息。</li></ol><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="字符编码和字符集"><a href="#字符编码和字符集" class="headerlink" title="字符编码和字符集"></a>字符编码和字符集</h3><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后</p><p>的结果</p><blockquote><p>编码:字符按一定规则转换为对应字节</p><p>解码:字节按之前编码规则，逆向来获得字符，选错编码规则就会造成乱码</p></blockquote><ul><li><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则</li></ul><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><ul><li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码<img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224203557-914120.jpeg" alt></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><p><strong>ASCII字符集</strong> ：</p><p>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。</p></li><li><p><strong>ISO-8859-1字符集</strong>：</p><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><p><strong>GBxxx字符集</strong>：</p><p>GB就是国标的意思，是为了显示中文而设计的一套字符集。</p><ul><li><p><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个</p><p>汉字，这样大约可以组合了包含7000多个简体汉字，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个</p><p>字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p></li><li><p><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，</p><p>完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</p></li><li><p><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持</p><p>中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</p></li></ul></li><li><p><strong>Unicode字符集</strong> ：</p><ul><li><p>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</p></li><li><p>它最多使用4个字节的数字来表达每个字母、符号，或者文字，有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</p></li><li><p>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采</p><p>用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码，它使用一至四个字节为每个字</p><p>符编码，编码规则：</p><ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h3 id="编码引出的问题"><a href="#编码引出的问题" class="headerlink" title="编码引出的问题"></a>编码引出的问题</h3><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，</p><p>当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"E:\\File_GBK.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">输出结果：</span><br><span class="line">���</span><br></pre></td></tr></table></figure><h3 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h3><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其</p><p>解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h4 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>InputStreamReader(InputStream in)</code></li><li><code>InputStreamReader(InputStream in, String charsetName)</code></li></ul><h4 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">      String FileName = <span class="string">"E:\\file_gbk.txt"</span>;</span><br><span class="line">    <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">      InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName));</span><br><span class="line">    <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">      InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName) , <span class="string">"GBK"</span>);</span><br><span class="line"><span class="comment">// 定义变量,保存字符</span></span><br><span class="line">      <span class="keyword">int</span> read;</span><br><span class="line">    <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">      <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">          System.out.print((<span class="keyword">char</span>)read); <span class="comment">// ��Һ�</span></span><br><span class="line">      &#125;</span><br><span class="line">      isr.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">      <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">          System.out.print((<span class="keyword">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">      &#125;</span><br><span class="line">      isr2.close();</span><br></pre></td></tr></table></figure><h3 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h3><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字</p><p>节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h4 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>OutputStreamWriter(OutputStream in)</code></li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code></li></ul><h4 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 定义文件路径</span></span><br><span class="line">      String FileName = <span class="string">"E:\\out.txt"</span>;</span><br><span class="line">    <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">      OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName));</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">    osw.write(<span class="string">"你好"</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">      osw.close();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line">String FileName2 = <span class="string">"E:\\out2.txt"</span>;</span><br><span class="line">   <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">      OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName2),<span class="string">"GBK"</span>);</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">    osw2.write(<span class="string">"你好"</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">      osw2.close();</span><br></pre></td></tr></table></figure><h4 id="转换流理解图解"><a href="#转换流理解图解" class="headerlink" title="转换流理解图解"></a>转换流理解图解</h4><p><strong>转换流是字节与字符间的桥梁！</strong><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224204335-94131.jpeg" alt></p><h3 id="练习：转换文件编码"><a href="#练习：转换文件编码" class="headerlink" title="练习：转换文件编码"></a>练习：转换文件编码</h3><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><h4 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 1.定义文件路径</span></span><br><span class="line">   String srcFile = <span class="string">"file_gbk.txt"</span>;</span><br><span class="line">      String destFile = <span class="string">"file_utf8.txt"</span>;</span><br><span class="line"><span class="comment">// 2.创建流对象</span></span><br><span class="line">  <span class="comment">// 2.1 转换输入流,指定GBK编码</span></span><br><span class="line">      InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(srcFile) , <span class="string">"GBK"</span>);</span><br><span class="line">  <span class="comment">// 2.2 转换输出流,默认utf8编码</span></span><br><span class="line">      OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"><span class="comment">// 3.读写数据</span></span><br><span class="line">  <span class="comment">// 3.1 定义数组</span></span><br><span class="line">      <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">  <span class="comment">// 3.2 定义长度</span></span><br><span class="line">      <span class="keyword">int</span> len;</span><br><span class="line">  <span class="comment">// 3.3 循环读取</span></span><br><span class="line">      <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 循环写出</span></span><br><span class="line">        osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 4.释放资源</span></span><br><span class="line">      osw.close();</span><br><span class="line">      isr.close();</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中</code></p><p><code>存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信</p><p>息，都可以用来在内存中创建对象<img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224204412-835347.jpeg" alt></p><h3 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h3><p><code>java.io.ObjectOutputStream</code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h4 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul><h4 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h4><p>一个对象要想序列化，必须满足两个条件:</p><ul><li><p>该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列</p><p>化或反序列化，会抛出<code>NotSerializableException</code> 。</p></li><li><p>该类的所有属性必须是可序列化的。如果有属性不需要序列化，则必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</p></li><li><p>static修饰的成员是属于类的，不序列化</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Address  check : "</span> + name + <span class="string">" -- "</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">e.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">e.address = <span class="string">"beiqinglu"</span>;</span><br><span class="line">e.age = <span class="number">20</span>; </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// 创建序列化流对象</span></span><br><span class="line">     ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employee.txt"</span>));</span><br><span class="line">   <span class="comment">// 写出对象</span></span><br><span class="line">   out.writeObject(e);</span><br><span class="line">   <span class="comment">// 释放资源</span></span><br><span class="line">   out.close();</span><br><span class="line">   fileOut.close();</span><br><span class="line">   System.out.println(<span class="string">"Serialized data is saved"</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化。</span></span><br><span class="line">   &#125; <span class="keyword">catch</span>(IOException i)   &#123;</span><br><span class="line">       i.printStackTrace();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h3><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p><h4 id="构造方法-11"><a href="#构造方法-11" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定InputStream的ObjectInputStream。</li></ul><h4 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h4><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Employee e = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 创建反序列化流</span></span><br><span class="line">     FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">"employee.txt"</span>);</span><br><span class="line">     ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">     <span class="comment">// 读取一个对象</span></span><br><span class="line">     e = (Employee) in.readObject();</span><br><span class="line">     <span class="comment">// 释放资源</span></span><br><span class="line">     in.close();</span><br><span class="line">     fileIn.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">     <span class="comment">// 捕获其他异常</span></span><br><span class="line">     i.printStackTrace();</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException c)  &#123;</span><br><span class="line"><span class="comment">// 捕获类找不到异常</span></span><br><span class="line">     System.out.println(<span class="string">"Employee class not found"</span>);</span><br><span class="line">     c.printStackTrace();</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无异常,直接打印输出</span></span><br><span class="line">System.out.println(<span class="string">"Name: "</span> + e.name);<span class="comment">// zhangsan</span></span><br><span class="line">System.out.println(<span class="string">"Address: "</span> + e.address); <span class="comment">// beiqinglu</span></span><br><span class="line">System.out.println(<span class="string">"age: "</span> + e.age); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p><h4 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a><strong>反序列化操作2</strong></h4><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失</strong></p><p><strong>败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参构造方法 </li></ul><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和</p><p>对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 加入序列版本号</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;<span class="comment">// 原本是jvm来管理，这样自己手动管理</span></span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">public</span> String address;</span><br><span class="line">     <span class="comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> eid; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习：序列化集合"><a href="#练习：序列化集合" class="headerlink" title="练习：序列化集合"></a>练习：序列化集合</h3><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><h4 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合作为一个整体序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><h4 id="案例实现-2"><a href="#案例实现-2" class="headerlink" title="案例实现"></a>案例实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 学生对象</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">"老王"</span>, <span class="string">"laow"</span>);</span><br><span class="line">Student student2 = <span class="keyword">new</span> Student(<span class="string">"老张"</span>, <span class="string">"laoz"</span>);</span><br><span class="line">Student student3 = <span class="keyword">new</span> Student(<span class="string">"老李"</span>, <span class="string">"laol"</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Student&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(student);</span><br><span class="line">arrayList.add(student2);</span><br><span class="line">arrayList.add(student3);</span><br><span class="line"><span class="comment">// 序列化操作</span></span><br><span class="line">serializ(arrayList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化  </span></span><br><span class="line">ObjectInputStream ois  = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"list.txt"</span>));</span><br><span class="line"><span class="comment">// 读取对象,强转为ArrayList类型</span></span><br><span class="line">ArrayList&lt;Student&gt; list  = (ArrayList&lt;Student&gt;)ois.readObject();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++ )&#123;</span><br><span class="line">         Student s = list.get(i);</span><br><span class="line">       System.out.println(s.getName()+<span class="string">"--"</span>+ s.getPwd());</span><br><span class="line">     &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializ</span><span class="params">(ArrayList&lt;Student&gt; arrayList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建 序列化流 </span></span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"list.txt"</span>));</span><br><span class="line"><span class="comment">// 写出对象</span></span><br><span class="line">oos.writeObject(arrayList);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类</p><p>能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h3 id="PrintStream类"><a href="#PrintStream类" class="headerlink" title="PrintStream类"></a>PrintStream类</h3><h4 id="构造方法-12"><a href="#构造方法-12" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public PrintStream(String fileName)</code>： 使用指定的文件名创建一个新的打印流。</li></ul><h4 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h4><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过我们可以改变它的流向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用系统的打印流,控制台直接输出97</span></span><br><span class="line">      System.out.println(<span class="number">97</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">      PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"ps.txt"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">      System.setOut(ps);</span><br><span class="line">    <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">      System.out.println(<span class="number">97</span>);</span><br></pre></td></tr></table></figure><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h3><ul><li><strong>C/S结构</strong> ：全称为Client/Server结构，是指客户端和服务器结构</li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224204356-130658.jpeg" alt></p><p><strong>B/S结构</strong> ：全称为Browser/Server结构，是指浏览器和服务器结构</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224204346-894574.jpeg" alt></p><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。</p><p><strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h3><ul><li><p><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守</p><p>一定的规则。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步</p><p>骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</p></li></ul><ul><li><p><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最</p><p>广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理</p><p>数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205653-273589.jpeg" alt></p><p>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</p><p>网络层：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。</p><p>运输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。</p><p>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</p><h3 id="协议分类"><a href="#协议分类" class="headerlink" title="协议分类"></a>协议分类</h3><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接</p><p>口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不</p><p>建立逻辑连接</p><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP</p><p>协议</p><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使</p><p>用UDP协议</p></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205700-592149.bmp" alt="UDP通信图解"></p><p>特点:数据被限制在64kb以内，超出这个范围就不能发送了。</p><p>数据报(Datagram):网络传输的基本单位 </p><ul><li><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和</p><p>接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”。</p><ul><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。(服务器确认客户有发送能力)</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。(客户确认服务器有发送和接收能力)</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。(服务器确认客户有接收能力)</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205704-832626.jpeg" alt></p><p>   由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h3 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h3><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><ul><li><strong>协议：</strong>计算机网络通信必须遵守的规则，已经介绍过了，不再赘述</li></ul><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><ul><li><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，IP地址用来给一个网络中的计算机设备做唯一的编号</li></ul><p><strong>IP地址分类</strong></p><ul><li><p>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示</p><p>成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，这样就解决了网络地址资源数量不够的问题。</p></li></ul><p><strong>常用命令</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>检查网络是否连通，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping <span class="number">220.181</span>.57.216</span><br></pre></td></tr></table></figure><p><strong>特殊的IP地址</strong></p><ul><li>本机IP地址：<code>127.0.0.1</code>、<code>localhost</code> 。</li></ul><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><p>网络的通信，本质上是两个进程（应用程序）的通信</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><p><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和</p><p>应用，普通的应用程序需要使用1024以上的端口号</p></li></ul><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端：<code>java.net.Socket</code> 。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h3 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h3><p><code>Socket</code> 类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><h4 id="构造方法-13"><a href="#构造方法-13" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><p><code>public Socket(String host, int port)</code> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </p><blockquote><p>小贴士：回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">6666</span>);</span><br></pre></td></tr></table></figure><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><p><code>public InputStream getInputStream()</code> </p></li><li><p>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</p><ul><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public OutputStream getOutputStream()</code> </p></li><li><p>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</p><ul><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public void close()</code> </p></li><li><p>一旦一个socket被关闭，它不可再使用。</p><ul><li>关闭此socket也将关闭相关的InputStream和OutputStream 。 </li></ul></li><li><p><code>public void shutdownOutput()</code> ： 禁用此套接字的输出流。   </p><ul><li><strong>任何先前写出的数据将被发送，随后终止输出流，不然服务器端收不到结束标志，会一直等待</strong></li></ul></li></ul><h3 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h3><p><code>ServerSocket</code>类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h4 id="构造方法-14"><a href="#构造方法-14" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ServerSocket(int port)</code> ：使用该构造方法在创建ServerSocket对象时，将其绑定到一个指定的端口号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br></pre></td></tr></table></figure><h4 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><code>public Socket accept()</code> ：侦听并接受连接，返回一个Socket对象，用于和客户端通信。该方法一直阻塞直到建立连接</li></ul><h3 id="简单的TCP网络程序"><a href="#简单的TCP网络程序" class="headerlink" title="简单的TCP网络程序"></a>简单的TCP网络程序</h3><h4 id="TCP通信分析图解"><a href="#TCP通信分析图解" class="headerlink" title="TCP通信分析图解"></a>TCP通信分析图解</h4><ol><li>【服务端】启动,创建ServerSocket对象，等待连接。</li><li>【客户端】启动,创建Socket对象，请求连接。</li><li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</li></ol><blockquote><p>到此，客户端向服务端发送数据成功。</p></blockquote><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205711-27191.jpeg" alt></p><blockquote><p>自此，服务端向客户端回写数据。</p></blockquote><ol start="6"><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象.</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">      <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b)；</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">      <span class="comment">// =================回写数据=======================</span></span><br><span class="line">      <span class="comment">// 5. 通过 socket 获取输出流</span></span><br><span class="line">       OutputStream out = server.getOutputStream();</span><br><span class="line">      <span class="comment">// 6. 回写数据</span></span><br><span class="line">       out.write(<span class="string">"我很好,谢谢你"</span>.getBytes());</span><br><span class="line">      <span class="comment">// 7.关闭资源.</span></span><br><span class="line">      out.close();</span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line"><span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.通过Scoket,获取输出流对象 </span></span><br><span class="line">OutputStream os = client.getOutputStream();</span><br><span class="line"><span class="comment">// 3.写出数据.</span></span><br><span class="line">os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());<span class="comment">// 没有主动关闭，两边应该会一直等待吧</span></span><br><span class="line">      <span class="comment">// ==============解析回写=========================</span></span><br><span class="line">      <span class="comment">// 4. 通过Scoket,获取 输入流对象</span></span><br><span class="line">      InputStream in = client.getInputStream();</span><br><span class="line">      <span class="comment">// 5. 读取数据数据</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">      <span class="keyword">int</span> len = in.read(b);</span><br><span class="line">      System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 6. 关闭资源 .</span></span><br><span class="line">      in.close();</span><br><span class="line">os.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h3><h4 id="文件上传分析图解"><a href="#文件上传分析图解" class="headerlink" title="文件上传分析图解"></a>文件上传分析图解</h4><ol><li>【客户端】输入流，从硬盘读取文件数据到程序中。</li><li>【客户端】输出流，写出文件数据到服务端。</li><li>【服务端】输入流，读取文件数据到服务端程序。</li><li>【服务端】输出流，写出文件数据到服务器硬盘中。</li></ol><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205717-958331.jpeg" alt>    </p><h5 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h5><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">      ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">  <span class="comment">// 2. 建立连接 </span></span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">      <span class="comment">// 3. 创建流对象</span></span><br><span class="line">      <span class="comment">// 3.1 获取输入流,读取文件数据</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">        <span class="comment">// 3.2 创建输出流,保存到本地 .</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.jpg"</span>));</span><br><span class="line"><span class="comment">// 4. 读写数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 关闭 资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUPload_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 创建输入流,读取本地文件  </span></span><br><span class="line">        BufferedInputStream bis  = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端 </span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream   bos   = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据. </span></span><br><span class="line">        <span class="keyword">byte</span>[] b  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ; </span><br><span class="line">        <span class="keyword">while</span> (( len  = bis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line"></span><br><span class="line">        bos.close(); </span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close(); </span><br><span class="line">        System.out.println(<span class="string">"文件上传完毕 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传优化分析"><a href="#文件上传优化分析" class="headerlink" title="文件上传优化分析"></a>文件上传优化分析</h4><ol><li><p><strong>文件名称写死的问题</strong></p><p>服务端，保存文件的名称如果写死，那么最终导致服务器硬盘，只会保留一个文件，建议使用系统时间优化，保证文件名称唯一，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis()+<span class="string">".jpg"</span>) <span class="comment">// 文件名称</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>循环接收的问题</strong></p><p>服务端，指保存一个文件就关闭了，之后的用户无法再上传，这是不符合实际的，使用循环改进，可以不断的接收不同用户的文件，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次接收新的连接,创建一个Socket</span></span><br><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>效率问题</strong></p><p>服务端，在接收大文件时，可能耗费几秒钟的时间，此时不能接收其他用户上传，所以，使用多线程技术优化，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    <span class="comment">// accept 交给子线程处理.</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      ......</span><br><span class="line">        InputStream bis = accept.getInputStream();</span><br><span class="line">      ......</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">      <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">          <span class="comment">/* </span></span><br><span class="line"><span class="comment">          3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">               Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                      bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//4. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信息回写分析图解"><a href="#信息回写分析图解" class="headerlink" title="信息回写分析图解"></a>信息回写分析图解</h4><p>前四步与基本文件上传一致.</p><ol start="5"><li>【服务端】获取输出流，回写数据。</li><li>【客户端】获取输入流，解析回写数据。</li></ol><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205618-423948.jpeg" alt></p><h5 id="回写实现"><a href="#回写实现" class="headerlink" title="回写实现"></a>回写实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">               Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4.=======信息回写===========================</span></span><br><span class="line">                    System.out.println(<span class="string">"back ........"</span>);</span><br><span class="line">                    OutputStream out = accept.getOutputStream();</span><br><span class="line">                    out.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line">                    out.close();</span><br><span class="line">                    <span class="comment">//================================</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//5. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 创建输入流,读取本地文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据.</span></span><br><span class="line">        <span class="keyword">byte</span>[] b  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> (( len  = bis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭输出流,通知服务端,写出数据完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3. =====解析回写============</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] back = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        in.read(back);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(back));</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">// ============================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟B-S服务器-扩展知识点"><a href="#模拟B-S服务器-扩展知识点" class="headerlink" title="模拟B\S服务器(扩展知识点)"></a>模拟B\S服务器(扩展知识点)</h3><p>模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果。</p><h4 id="案例分析-3"><a href="#案例分析-3" class="headerlink" title="案例分析"></a>案例分析</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224213409-67743.png" alt="image-20200224213408136"></p><ol><li><p>准备页面数据，web文件夹。</p><p>复制到我们Module中，比如复制到day08中</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205607-277291.png" alt></p></li><li><p>我们模拟服务器端，ServerSocket类监听端口，使用浏览器访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">    Socket socket = server.accept();</span><br><span class="line">    InputStream in = socket.getInputStream();</span><br><span class="line">       <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = in.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">    socket.close();</span><br><span class="line">    server.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205629-919189.jpeg" alt></p></li><li><p>服务器程序中字节输入流可以读取到浏览器发来的请求信息</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205728-178275.jpeg" alt></p></li></ol><p>GET/web/index.html HTTP/1.1是浏览器的请求消息。/web/index.html为浏览器想要请求的服务器端的资源,使用字符串切割方式获取到请求的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">BufferedReader readWb = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">String requst = readWb.readLine();</span><br><span class="line"><span class="comment">//取出请求资源的路径</span></span><br><span class="line">String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//去掉web前面的/</span></span><br><span class="line">String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">System.out.println(path);</span><br></pre></td></tr></table></figure><h4 id="案例实现-3"><a href="#案例实现-3" class="headerlink" title="案例实现"></a>案例实现</h4><p>服务端实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端  启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 创建ServerSocket 对象</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 转换流读取浏览器的请求消息</span></span><br><span class="line">        BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">        BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        String requst = readWb.readLine();</span><br><span class="line">        <span class="comment">// 取出请求资源的路径</span></span><br><span class="line">        String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">// 去掉web前面的/</span></span><br><span class="line">        String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 读取客户端请求的资源文件</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 字节输出流,将文件写会客户端</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 写入HTTP协议响应头,固定写法</span></span><br><span class="line">        out.write(<span class="string">"HTTP/200 OK\r\n"</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 必须要写入空行,否则浏览器不解析</span></span><br><span class="line">        out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        out.close();</span><br><span class="line">        readWb.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问效果"><a href="#访问效果" class="headerlink" title="访问效果"></a>访问效果</h4><ul><li><strong>火狐</strong></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205637-218119.png" alt></p><blockquote><p>小贴士：不同的浏览器，内核不一样，解析效果有可能不一样。</p></blockquote><p>发现浏览器中出现很多的叉子,说明浏览器没有读取到图片信息导致。</p><p>浏览器工作原理是遇到图片会开启一个线程进行单独的访问,因此在服务器端加入线程技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Web(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Web</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket=socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">                BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">                        BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String requst = readWb.readLine();</span><br><span class="line">                <span class="comment">//取出请求资源的路径</span></span><br><span class="line">                String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">                System.out.println(Arrays.toString(strArr));</span><br><span class="line">                String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                System.out.println(path);</span><br><span class="line"></span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">                System.out.println(fis);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">                <span class="comment">//向浏览器 回写数据</span></span><br><span class="line">                OutputStream out = socket.getOutputStream();</span><br><span class="line">                out.write(<span class="string">"HTTP/200 OK\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                out.close();</span><br><span class="line">                readWb.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问效果：</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200224205643-71748.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;并发与并行&quot;&gt;&lt;a href=&quot;#并发与并行&quot; class=&quot;headerlink&quot; title=&quot;并发与并行&quot;&gt;&lt;/a&gt;并发与并行&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并发&lt;/strong&gt;：指两个或多个事件在&lt;strong&gt;同一个时间段内&lt;/strong&gt;发生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并行&lt;/strong&gt;：指两个或多个事件在&lt;strong&gt;同一时刻&lt;/strong&gt;发生（同时发生）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092208-821105.bmp&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;并发指的是在一段时间内宏观上有多个程序同时运行&lt;/p&gt;
    
    </summary>
    
      <category term="heima57" scheme="http://yoursite.com/categories/heima57/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://yoursite.com/2020/02/19/%E6%A1%86%E6%9E%B6/Spring/"/>
    <id>http://yoursite.com/2020/02/19/框架/Spring/</id>
    <published>2020-02-18T17:19:50.000Z</published>
    <updated>2020-02-18T09:19:50.986Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="http://yoursite.com/2020/02/19/%E6%A1%86%E6%9E%B6/Mybatis/"/>
    <id>http://yoursite.com/2020/02/19/框架/Mybatis/</id>
    <published>2020-02-18T17:19:32.000Z</published>
    <updated>2020-04-11T06:25:52.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li>框架是可被应用开发者定制的应用骨架</li><li>框架是一种规则,保证开发者遵循相同的开发方式</li><li>框架提倡不要重复造轮子,对基础功能进行封装</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>极大提高开发效率</li><li>利于团队协作</li><li>灵活的配置,易于后期维护</li></ul><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><ul><li>优秀的ORM框架</li><li>使用XML将SQL与程序解耦</li><li>学习简单,执行高效,是JDBC的延伸</li></ul><p><a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">中文文档</a></p><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200411102139-860598.png" alt="image-20200411102138911"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="引入Mybatis依赖"><a href="#引入Mybatis依赖" class="headerlink" title="引入Mybatis依赖"></a>引入Mybatis依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--提高下载速度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--分页助手,官方插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--从官方文档中找这个约束--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- goods_id ==&gt; goodsId 自动进行驼峰命名转换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用Pagehelper分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置数据库类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"helperDialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--分页合理化--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--设置默认指向的数据库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置环境，不同的环境不同的id名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 采用JDBC方式对数据库事务进行commit/rollback --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--采用连接池方式管理数据库连接--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;dataSource type="POOLED"&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"com.imooc.mybatis.datasource.C3P0DataSourceFactory"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/babytun?useUnicode=true&amp;amp;characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"prd"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 采用JDBC方式对数据库事务进行commit/rollback --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--采用连接池方式管理数据库连接--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://192.168.1.155:3306/babytun?useUnicode=true&amp;amp;characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/goods.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/goods_detail.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初始化SessionFactory"><a href="#初始化SessionFactory" class="headerlink" title="初始化SessionFactory"></a>初始化SessionFactory</h3><ul><li>MyBatis核心对象</li><li>全局唯一</li><li>用于初始化MyBatis,创建SqlSession对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Reader加载classpath下的mybatis-config.xml核心配置文件</span></span><br><span class="line">Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line"><span class="comment">//初始化SqlSessionFactory对象,同时解析mybatis-config.xml文件</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br></pre></td></tr></table></figure><h3 id="初始化SqlSession"><a href="#初始化SqlSession" class="headerlink" title="初始化SqlSession"></a>初始化SqlSession</h3><ul><li>操作数据库的核心对象</li><li>使用JDBC方式与数据库交互</li><li>提供了数据表CRUD对应方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//创建SqlSession对象,SqlSession是JDBC的扩展类,用于与数据库交互</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//创建数据库连接(测试用)实际上mybatis会自动获取,无须显示调用</span></span><br><span class="line">    Connection connection = sqlSession.getConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果type="POOLED",代表使用连接池,close则是将连接回收到连接池中</span></span><br><span class="line">        <span class="comment">//如果type="UNPOOLED",代表直连,close则会调用Connection.close()方法关闭连接</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>可以自动生成,手动逐个创建亦可</p><h3 id="创建Mappper映射文件"><a href="#创建Mappper映射文件" class="headerlink" title="创建Mappper映射文件"></a>创建Mappper映射文件</h3><p>在resourses的mapper包下创建具体映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SqlSession通过namespace.id来调用具体SQL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"goods"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写-lt-select-gt-SQL标签"><a href="#编写-lt-select-gt-SQL标签" class="headerlink" title="编写&lt;select&gt;SQL标签"></a>编写&lt;select&gt;SQL标签</h3><p>在映射文件中编写具体SQL标签</p><h3 id="开启驼峰命名映射"><a href="#开启驼峰命名映射" class="headerlink" title="开启驼峰命名映射"></a>开启驼峰命名映射</h3><p>在核心配置文件&lt;settings&gt;标签中设置</p><p>主要是为了解决由于命名不同而无法注入的问题，也可以通过resultMap来</p><h3 id="新增-lt-mapper-gt"><a href="#新增-lt-mapper-gt" class="headerlink" title="新增&lt;mapper&gt;"></a>新增&lt;mapper&gt;</h3><p>在核心配置文件&lt;mappers&gt;标签中设置</p><h3 id="SqlSession执行select语句"><a href="#SqlSession执行select语句" class="headerlink" title="SqlSession执行select语句"></a>SqlSession执行select语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * select查询语句执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        session = MyBatisUtils.openSession();</span><br><span class="line">        <span class="comment">// selectList查询多条数据 selectOne查询单个数据</span></span><br><span class="line">        <span class="comment">// 命名空间.id</span></span><br><span class="line">        List&lt;Goods&gt; list = session.selectList(<span class="string">"goods.selectAll"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Goods g : list)&#123;</span><br><span class="line">            System.out.println(g.getTitle());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// CUD操作需要提交事务</span></span><br><span class="line">        <span class="comment">// session.commit();</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="comment">// if(session != null)&#123;</span></span><br><span class="line">        <span class="comment">//     session.rollback();//回滚事务</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        MyBatisUtils.closeSession(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MyBatisUtil"><a href="#MyBatisUtil" class="headerlink" title="MyBatisUtil"></a>MyBatisUtil</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatisUtils工具类,创建全局唯一的SqlSessionFactory对象</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//利用static(静态)属于类不属于对象,且全局唯一</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//利用静态块在初始化类时实例化sqlSessionFactory</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Reader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//初始化错误时,通过抛出异常ExceptionInInitializerError通知调用者</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * openSession 创建一个新的SqlSession对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSession对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认SqlSession对自动提交事务数据(commit)</span></span><br><span class="line">        <span class="comment">//设置false代表关闭自动提交,改为手动提交事务数据</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放一个有效的SqlSession对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 准备释放SqlSession对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">(SqlSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SQL标签"><a href="#SQL标签" class="headerlink" title="SQL标签"></a>SQL标签</h1><h2 id="CUD"><a href="#CUD" class="headerlink" title="CUD"></a>CUD</h2><h3 id="逐条处理"><a href="#逐条处理" class="headerlink" title="逐条处理"></a><strong>逐条处理</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">    INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)</span><br><span class="line">    VALUES (#&#123;title&#125; , #&#123;subTitle&#125; , #&#123;originalCost&#125;, #&#123;currentPrice&#125;, #&#123;discount&#125;, #&#123;isFreeDelivery&#125;, #&#123;categoryId&#125;)</span><br><span class="line">  <span class="comment">&lt;!--当前连接中最后--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span> <span class="attr">keyProperty</span>=<span class="string">"goodsId"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">      select last_insert_id()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">    UPDATE t_goods</span><br><span class="line">    SET</span><br><span class="line">      title = #&#123;title&#125; ,</span><br><span class="line">      sub_title = #&#123;subTitle&#125; ,</span><br><span class="line">      original_cost = #&#123;originalCost&#125; ,</span><br><span class="line">      current_price = #&#123;currentPrice&#125; ,</span><br><span class="line">      discount = #&#123;discount&#125; ,</span><br><span class="line">      is_free_delivery = #&#123;isFreeDelivery&#125; ,</span><br><span class="line">      category_id = #&#123;categoryId&#125;</span><br><span class="line">    WHERE</span><br><span class="line">      goods_id = #&#123;goodsId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--delete from t_goods where goods_id in (1920,1921)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">    delete from t_goods where goods_id = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p>批处理也有上限，数据过多时可以使用循环嵌套来批量插入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--INSERT INTO table--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--VALUES ("a" , "a1" , "a2"),("b" , "b1" , "b2"),(....)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"batchInsert"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">    INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)</span><br><span class="line">    VALUES</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        (#&#123;item.title&#125;,#&#123;item.subTitle&#125;, #&#123;item.originalCost&#125;, #&#123;item.currentPrice&#125;, #&#123;item.discount&#125;, #&#123;item.isFreeDelivery&#125;, #&#123;item.categoryId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--in (1901,1902)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"batchDelete"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">    DELETE FROM t_goods WHERE goods_id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a><strong>单表查询</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单参数传递,使用parameterType指定参数的数据类型即可,SQL中#&#123;value&#125;提取参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">    select * from t_goods where goods_id = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多参数传递时,使用parameterType指定Map接口,SQL中#&#123;key&#125;提取参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPriceRange"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">    select * from t_goods</span><br><span class="line">    where</span><br><span class="line">      current_price between  #&#123;min&#125; and #&#123;max&#125;</span><br><span class="line">    order by current_price</span><br><span class="line">    limit 0,#&#123;limt&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPage"</span> <span class="attr">resultType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">    select * from t_goods where current_price &amp;lt; 1000</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a><strong>多表查询</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 单表查询可以建立对应实体类多表可以使用LinkedHashMap或者关系映射</span></span><br><span class="line"><span class="comment">利用LinkedHashMap保存多表关联结果</span></span><br><span class="line"><span class="comment">使用LinkedHashMap是为了保证有序</span></span><br><span class="line"><span class="comment">       MyBatis会将每一条记录包装为LinkedHashMap对象</span></span><br><span class="line"><span class="comment">       key是字段名  value是字段对应的值 , 字段类型根据表结构进行自动判断</span></span><br><span class="line"><span class="comment">       优点: 易于扩展,易于使用</span></span><br><span class="line"><span class="comment">       缺点: 太过灵活,无法进行编译时检查</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectGoodsMap"</span> <span class="attr">resultType</span>=<span class="string">"java.util.LinkedHashMap"</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">       select g.* , c.category_name,'1' as test from t_goods g , t_category c</span><br><span class="line">       where g.category_id = c.category_id</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByTitle"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">       select * from t_goods where title = #&#123;title&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--结果映射可以只映射那些由于无法自动赋值的字段</span></span><br><span class="line"><span class="comment">同一个值只会赋值一次,想要给多个字段赋值需要配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmGoods"</span> <span class="attr">type</span>=<span class="string">"com.imooc.mybatis.dto.GoodsDTO"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--设置主键字段与属性映射--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"goods.goodsId"</span> <span class="attr">column</span>=<span class="string">"goods_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--设置非主键字段与属性映射--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"goods.title"</span> <span class="attr">column</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"goods.originalCost"</span> <span class="attr">column</span>=<span class="string">"original_cost"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"goods.currentPrice"</span> <span class="attr">column</span>=<span class="string">"current_price"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"goods.discount"</span> <span class="attr">column</span>=<span class="string">"discount"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"goods.isFreeDelivery"</span> <span class="attr">column</span>=<span class="string">"is_free_delivery"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"goods.categoryId"</span> <span class="attr">column</span>=<span class="string">"category_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"category.categoryId"</span> <span class="attr">column</span>=<span class="string">"category_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"category.categoryName"</span> <span class="attr">column</span>=<span class="string">"category_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"category.parentId"</span> <span class="attr">column</span>=<span class="string">"parent_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"category.categoryLevel"</span> <span class="attr">column</span>=<span class="string">"category_level"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"category.categoryOrder"</span> <span class="attr">column</span>=<span class="string">"category_order"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"test"</span> <span class="attr">column</span>=<span class="string">"test"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectGoodsDTO"</span> <span class="attr">resultMap</span>=<span class="string">"rmGoods"</span>&gt;</span></span><br><span class="line">       select g.* , c.*,'1' as test from t_goods g , t_category c</span><br><span class="line">       where g.category_id = c.category_id</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="预防SQL注入"><a href="#预防SQL注入" class="headerlink" title="预防SQL注入"></a><strong>预防SQL注入</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectByTitle() throws Exception &#123;</span><br><span class="line">    SqlSession session = null;</span><br><span class="line">    try&#123;</span><br><span class="line">        session = MyBatisUtils.openSession();</span><br><span class="line">        Map param = new HashMap();</span><br><span class="line">        /*</span><br><span class="line">            $&#123;&#125;原文传值有些时候使用会很方便，但使用须谨慎</span><br><span class="line">            select * from t_goods</span><br><span class="line">            where title = '' or 1 =1 or title = '【德国】爱他美婴幼儿配方奶粉1段800g*2罐 铂金版'</span><br><span class="line">        */</span><br><span class="line">        /*</span><br><span class="line">           #&#123;&#125;预编译</span><br><span class="line">           select * from t_goods</span><br><span class="line">            where title = "'' or 1 =1 or title = '【德国】爱他美婴幼儿配方奶粉1段800g*2罐 铂金版'"</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        param.put("title","'' or 1=1 or title='【德国】爱他美婴幼儿配方奶粉1段800g*2罐 铂金版'");</span><br><span class="line">        param.put("order" , " order by title desc");</span><br><span class="line">        List<span class="tag">&lt;<span class="name">Goods</span>&gt;</span> list = session.selectList("goods.selectByTitle", param);</span><br><span class="line">        for(Goods g:list)&#123;</span><br><span class="line">            System.out.println(g.getTitle() + ":" + g.getCurrentPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;catch (Exception e)&#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        MyBatisUtils.closeSession(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicSQL"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">    select * from t_goods</span><br><span class="line">    <span class="comment">&lt;!--可以将where标签替换为where '1' = '1'--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"categoryId != null"</span>&gt;</span></span><br><span class="line">          and category_id = #&#123;categoryId&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"currentPrice != null"</span>&gt;</span></span><br><span class="line">          and current_price &amp;lt; #&#123;currentPrice&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多表级联查询"><a href="#多表级联查询" class="headerlink" title="多表级联查询"></a>多表级联查询</h3><h4 id="OneToMany"><a href="#OneToMany" class="headerlink" title="OneToMany"></a>OneToMany</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      resultMap可用于说明一对多或者多对一的映射逻辑</span></span><br><span class="line"><span class="comment">      id 是resultMap属性引用的标志</span></span><br><span class="line"><span class="comment">      type 指向One的实体(Goods)</span></span><br><span class="line"><span class="comment">新建一个对应'多'的实体类</span></span><br><span class="line"><span class="comment">在'一'的实体类中添加List&lt;GoodsDetail&gt; goodsDetails用于保存</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmGoods1"</span> <span class="attr">type</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 映射goods对象的主键到goods_id字段 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"goods_id"</span> <span class="attr">property</span>=<span class="string">"goodsId"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          collection的含义是,在</span></span><br><span class="line"><span class="comment">          select * from t_goods limit 0,10 得到结果后,对所有Goods对象遍历得到goods_id字段值,</span></span><br><span class="line"><span class="comment">          并代入到goodsDetail命名空间的findByGoodsId的SQL中执行查询,</span></span><br><span class="line"><span class="comment">          将得到的"商品详情"集合赋值给goodsDetails List对象.</span></span><br><span class="line"><span class="comment">column用于给select传入参数</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"goodsDetails"</span> <span class="attr">select</span>=<span class="string">"goodsDetail.selectByGoodsId"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">column</span>=<span class="string">"goods_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneToMany"</span> <span class="attr">resultMap</span>=<span class="string">"rmGoods1"</span>&gt;</span></span><br><span class="line">      select * from t_goods limit 0,10</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ManyToOne"><a href="#ManyToOne" class="headerlink" title="ManyToOne"></a>ManyToOne</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByGoodsId"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"com.imooc.mybatis.entity.GoodsDetail"</span>&gt;</span></span><br><span class="line">    select * from t_goods_detail where goods_id = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmGoodsDetail"</span> <span class="attr">type</span>=<span class="string">"com.imooc.mybatis.entity.GoodsDetail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"gd_id"</span> <span class="attr">property</span>=<span class="string">"gdId"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--goods_id用于传参后为给对应字段赋值，需手动映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"goods_id"</span> <span class="attr">property</span>=<span class="string">"goodsId"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在'多'的实体类中添加一的字段</span></span><br><span class="line"><span class="comment">column用于传参--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"goods"</span> <span class="attr">select</span>=<span class="string">"goods.selectById"</span> <span class="attr">column</span>=<span class="string">"goods_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectManyToOne"</span> <span class="attr">resultMap</span>=<span class="string">"rmGoodsDetail"</span>&gt;</span></span><br><span class="line">    select * from t_goods_detail limit 0,20</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="分页助手"><a href="#分页助手" class="headerlink" title="分页助手"></a>分页助手</h1><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md" target="_blank" rel="noopener">中文文档</a></p><p>常规分页步骤</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200411115640-185705.png" alt="image-20200411115639325"></p><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页助手,官方插件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="核心配置文件-1"><a href="#核心配置文件-1" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--启用Pagehelper分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置数据库类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"helperDialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分页合理化  首页和尾页的问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PageHelper分页查询</span></span><br><span class="line"><span class="comment"> * 不用修改mapper映射文件，在代码中开启即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = MyBatisUtils.openSession();</span><br><span class="line">        <span class="comment">/*startPage方法会自动将下一次查询进行分页*/</span></span><br><span class="line">        PageHelper.startPage(<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line">        Page&lt;Goods&gt; page = (Page) session.selectList(<span class="string">"goods.selectPage"</span>);</span><br><span class="line">        System.out.println(<span class="string">"总页数:"</span> + page.getPages());</span><br><span class="line">        System.out.println(<span class="string">"总记录数:"</span> + page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">"开始行号:"</span> + page.getStartRow());</span><br><span class="line">        System.out.println(<span class="string">"结束行号:"</span> + page.getEndRow());</span><br><span class="line">        System.out.println(<span class="string">"当前页码:"</span> + page.getPageNum());</span><br><span class="line">        List&lt;Goods&gt; data = page.getResult();<span class="comment">//当前页数据</span></span><br><span class="line">        <span class="keyword">for</span> (Goods g : data) &#123;</span><br><span class="line">            System.out.println(g.getTitle());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        MyBatisUtils.closeSession(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h1><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mybatis.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C3P0与MyBatis兼容使用的数据源工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0DataSourceFactory</span> <span class="keyword">extends</span> <span class="title">UnpooledDataSourceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C3P0DataSourceFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h3><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>一级缓存默认开启，二级缓存需要手动开启</p><p>二级开启后默认所有查询会使用缓存，所有CUDcommit时会对该namesapce下缓存清空以保证数据一致性</p><p>建议对selectOne使用缓存</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200411112222-179369.png" alt="image-20200411112221147"></p><p>mapper中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启了二级缓存</span></span><br><span class="line"><span class="comment">       eviction是缓存的清除策略,当缓存对象数量达到上限后,自动触发对应算法对缓存对象清除</span></span><br><span class="line"><span class="comment">           1.LRU – 最近最少使用的:移除最长时间不被使用的对象。</span></span><br><span class="line"><span class="comment">           2.FIFO – 先进先出:按对象进入缓存的顺序来移除它们。</span></span><br><span class="line"><span class="comment">           3.SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。</span></span><br><span class="line"><span class="comment">           4.WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       flushInterval 代表间隔多长时间自动清空缓存,单位毫秒,600000毫秒 = 10分钟</span></span><br><span class="line"><span class="comment">       size 缓存存储上限,用于保存对象或集合(1个集合算1个对象)的数量上限</span></span><br><span class="line"><span class="comment">       readOnly 设置为true ,代表返回只读缓存,每次从缓存取出的是缓存对象本身.这种执行效率较高</span></span><br><span class="line"><span class="comment">                设置为false , 代表每次取出的是缓存对象的"副本",每一次取出的对象都是不同的,这种安全性较高</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"LRU"</span> <span class="attr">flushInterval</span>=<span class="string">"600000"</span> <span class="attr">size</span>=<span class="string">"512"</span> <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- useCache="false"代表不使用缓存缓存开启之后默认为true --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">       select * from t_goods order by goods_id desc limit 10</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--flushCache="true"在sql执行后强制清空缓存--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.imooc.mybatis.entity.Goods"</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">       INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)</span><br><span class="line">       VALUES (#&#123;title&#125; , #&#123;subTitle&#125; , #&#123;originalCost&#125;, #&#123;currentPrice&#125;, #&#123;discount&#125;, #&#123;isFreeDelivery&#125;, #&#123;categoryId&#125;)</span><br><span class="line">     <span class="comment">&lt;!--&lt;selectKey resultType="Integer" keyProperty="goodsId" order="AFTER"&gt;--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--select last_insert_id()--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;/selectKey&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><h2 id="核心配置-1"><a href="#核心配置-1" class="headerlink" title="核心配置"></a>核心配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper class="com.imooc.mybatis.dao.GoodsDAO"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该包下的类会被作为mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.imooc.mybatis.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><h3 id="映射类"><a href="#映射类" class="headerlink" title="映射类"></a>映射类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imooc.mybatis.dto.GoodsDTO;</span><br><span class="line"><span class="keyword">import</span> com.imooc.mybatis.entity.Goods;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsDAO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_goods where current_price between  #&#123;min&#125; and #&#123;max&#125; order by current_price limit 0,#&#123;limt&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">selectByPriceRange</span><span class="params">(@Param(<span class="string">"min"</span>)</span> Float min ,@<span class="title">Param</span><span class="params">(<span class="string">"max"</span>)</span> Float max ,@<span class="title">Param</span><span class="params">(<span class="string">"limt"</span>)</span> Integer limt)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id) VALUES (#&#123;title&#125; , #&#123;subTitle&#125; , #&#123;originalCost&#125;, #&#123;currentPrice&#125;, #&#123;discount&#125;, #&#123;isFreeDelivery&#125;, #&#123;categoryId&#125;)"</span>)</span><br><span class="line">    <span class="comment">//&lt;selectKey&gt;</span></span><br><span class="line">    <span class="meta">@SelectKey</span>(statement = <span class="string">"select last_insert_id()"</span> , before = <span class="keyword">false</span> , keyProperty = <span class="string">"goodsId"</span> , resultType = Integer.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Goods goods)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_goods"</span>)</span><br><span class="line">    <span class="comment">//&lt;resultMap&gt;</span></span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="comment">//&lt;id&gt;</span></span><br><span class="line">          <span class="meta">@Result</span>(column = <span class="string">"goods_id"</span> ,property = <span class="string">"goodsId"</span> , id = <span class="keyword">true</span>) ,</span><br><span class="line">            <span class="comment">//&lt;result&gt;</span></span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"title"</span> ,property = <span class="string">"title"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"current_price"</span> ,property = <span class="string">"currentPrice"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GoodsDTO&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTestor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPriceRange</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            session = MyBatisUtils.openSession();</span><br><span class="line">            GoodsDAO goodsDAO = session.getMapper(GoodsDAO.class);</span><br><span class="line">            List&lt;Goods&gt; list = goodsDAO.selectByPriceRange(<span class="number">100f</span>, <span class="number">500f</span>, <span class="number">20</span>);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            MyBatisUtils.closeSession(session);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            session = MyBatisUtils.openSession();</span><br><span class="line">            Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">            goods.setTitle(<span class="string">"测试商品"</span>);</span><br><span class="line">            goods.setSubTitle(<span class="string">"测试子标题"</span>);</span><br><span class="line">            goods.setOriginalCost(<span class="number">200f</span>);</span><br><span class="line">            goods.setCurrentPrice(<span class="number">100f</span>);</span><br><span class="line">            goods.setDiscount(<span class="number">0.5f</span>);</span><br><span class="line">            goods.setIsFreeDelivery(<span class="number">1</span>);</span><br><span class="line">            goods.setCategoryId(<span class="number">43</span>);</span><br><span class="line">            GoodsDAO goodsDAO = session.getMapper(GoodsDAO.class);</span><br><span class="line">            <span class="comment">//insert()方法返回值代表本次成功插入的记录总数</span></span><br><span class="line">            <span class="keyword">int</span> num = goodsDAO.insert(goods);</span><br><span class="line">            session.commit();<span class="comment">//提交事务数据</span></span><br><span class="line">            System.out.println(goods.getGoodsId());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</span><br><span class="line">                session.rollback();<span class="comment">//回滚事务</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            MyBatisUtils.closeSession(session);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
      <category term="主流框架" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java Web</title>
    <link href="http://yoursite.com/2020/02/19/heima57/java-Web/"/>
    <id>http://yoursite.com/2020/02/19/heima57/java-Web/</id>
    <published>2020-02-18T17:19:13.000Z</published>
    <updated>2020-04-10T10:08:18.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318234727-4483.png" alt="image-20200318234726013"></p><h2 id="与HTML比较"><a href="#与HTML比较" class="headerlink" title="与HTML比较"></a>与HTML比较</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318234846-690300.png" alt="image-20200318234805192"></p><a id="more"></a><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318234851-314238.png" alt="image-20200318234845359"></p><h2 id="文档规则"><a href="#文档规则" class="headerlink" title="文档规则"></a>文档规则</h2><ul><li><p>xml文档的后缀名 .xml</p></li><li><p>xml第一行必须定义为文档声明</p><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&gt;</code></p><blockquote><p>version：版本号，必须的属性</p><p>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</p><p>standalone：是否独立    yes为依赖，no为不依赖</p></blockquote></li><li><p>xml文档中有且仅有一个根标签</p></li><li><p>属性值必须使用引号(单双都可)引起来</p></li><li><p>标签必须正确关闭</p></li><li><p>xml标签名称区分大小写</p></li></ul><h2 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h2><h3 id="合理的标签名"><a href="#合理的标签名" class="headerlink" title="合理的标签名"></a>合理的标签名</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318235252-942070.png" alt="image-20200318235251319"></p><h3 id="适当的注释和缩进"><a href="#适当的注释和缩进" class="headerlink" title="适当的注释和缩进"></a>适当的注释和缩进</h3><h3 id="合理使用属性"><a href="#合理使用属性" class="headerlink" title="合理使用属性"></a>合理使用属性</h3><p>id属性值唯一</p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><h4 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318235526-335211.png" alt="image-20200318235459366"></p><h4 id="CDATA标签"><a href="#CDATA标签" class="headerlink" title="CDATA标签"></a>CDATA标签</h4><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200318235541836.png" alt="image-20200318235541836"></p><h3 id="子元素顺序一致"><a href="#子元素顺序一致" class="headerlink" title="子元素顺序一致"></a>子元素顺序一致</h3><h2 id="语义约束"><a href="#语义约束" class="headerlink" title="语义约束"></a>语义约束</h2><p>XML文档结构正确，但可能不是有效的，需要加以约束</p><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319115838-402947.png" alt="image-20200319115838522"></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote><p>本地：<!DOCTYPE 根标签名 SYSTEM "dtd文件的位置"></p><p>网络：<!DOCTYPE 根标签名 PUBLIC "dtd文件名字" "dtd文件的位置URL"></p></blockquote><h3 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319115942-982719.png" alt="image-20200319115942138"></p><h4 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1.填写xml文档的根元素</span></span><br><span class="line"><span class="comment">2.引入xsi前缀.  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="comment">3.引入xsd文件命名空间.  xsi:schemaLocation="http://www.itcast.cn/xml  student.xsd"</span></span><br><span class="line"><span class="comment">4.为每一个xsd约束声明一个前缀,作为标识  xmlns="http://www.itcast.cn/xml" </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320122501-850080.png" alt="image-20200320122420821"></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"hr"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- complexType标签含义是复杂节点，包含子节点时必须使用这个标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下面的子节点必须有序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 出现次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"9999"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对范围做限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">restriction</span> <span class="attr">base</span>=<span class="string">"integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">minInclusive</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">minInclusive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxInclusive</span> <span class="attr">value</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">maxInclusive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"salary"</span> <span class="attr">type</span>=<span class="string">"integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"department"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"dname"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对属性做限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"no"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">use</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XML解析器"><a href="#XML解析器" class="headerlink" title="XML解析器"></a>XML解析器</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><pre><code>* 操作xml文档    1. 解析(读取)：将文档中的数据读取到内存中2. 写入：将内存中的数据保存到xml文档中。持久化的存储</code></pre><ul><li><p>解析xml的方式</p><ol><li>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul></li><li>SAX：逐行读取，基于事件驱动的。<ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ol></li><li><p>xml常见的解析器：</p><ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，sax方式的。</li></ol></li></ul><h2 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319161550-220043.png" alt="image-20200319161550023"></p><p>所有标签都是element对象</p><p>直接从网上下载jar包</p><h3 id="解析示例"><a href="#解析示例" class="headerlink" title="解析示例"></a>解析示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HrReader</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readXml</span><span class="params">()</span></span>&#123;</span><br><span class="line">String file = <span class="string">"d:/workspace/xml/src/hr.xml"</span>;</span><br><span class="line"><span class="comment">//SAXReader类是读取XML文件的核心类，用于将XML解析后以“树”的形式保存在内存中。</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = reader.read(file);</span><br><span class="line"><span class="comment">//获取XML文档的根节点，即hr标签</span></span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line"><span class="comment">//elements方法用于获取指定的标签集合</span></span><br><span class="line">List&lt;Element&gt; employees =  root.elements(<span class="string">"employee"</span>);</span><br><span class="line"><span class="keyword">for</span>(Element employee : employees)&#123;</span><br><span class="line"><span class="comment">//element方法用于获取唯一的子节点对象</span></span><br><span class="line">Element name = employee.element(<span class="string">"name"</span>);</span><br><span class="line">String empName = name.getText();<span class="comment">//getText()方法用于获取标签文本</span></span><br><span class="line">System.out.println(empName);</span><br><span class="line">System.out.println(employee.elementText(<span class="string">"age"</span>));</span><br><span class="line">System.out.println(employee.elementText(<span class="string">"salary"</span>));</span><br><span class="line">Element department = employee.element(<span class="string">"department"</span>);</span><br><span class="line">System.out.println(department.element(<span class="string">"dname"</span>).getText());</span><br><span class="line">System.out.println(department.element(<span class="string">"address"</span>).getText());</span><br><span class="line">Attribute att = employee.attribute(<span class="string">"no"</span>);</span><br><span class="line">System.out.println(att.getText());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HrReader reader = <span class="keyword">new</span> HrReader();</span><br><span class="line">reader.readXml();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入示例"><a href="#写入示例" class="headerlink" title="写入示例"></a>写入示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HrWriter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeXml</span><span class="params">()</span></span>&#123;</span><br><span class="line">String file = <span class="string">"d:/workspace/xml/src/hr.xml"</span>;</span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = reader.read(file);</span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line">Element employee = root.addElement(<span class="string">"employee"</span>);</span><br><span class="line">employee.addAttribute(<span class="string">"no"</span>, <span class="string">"3311"</span>);</span><br><span class="line">Element name = employee.addElement(<span class="string">"name"</span>);</span><br><span class="line">name.setText(<span class="string">"李铁柱"</span>);</span><br><span class="line">employee.addElement(<span class="string">"age"</span>).setText(<span class="string">"37"</span>);</span><br><span class="line">employee.addElement(<span class="string">"salary"</span>).setText(<span class="string">"3600"</span>);</span><br><span class="line">Element department = employee.addElement(<span class="string">"department"</span>);</span><br><span class="line">department.addElement(<span class="string">"dname"</span>).setText(<span class="string">"人事部"</span>);</span><br><span class="line">department.addElement(<span class="string">"address"</span>).setText(<span class="string">"XX大厦-B105"</span>);</span><br><span class="line">            <span class="comment">// 将修改写入文件，这样写入不受约束文件限制</span></span><br><span class="line">Writer writer = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(file) , <span class="string">"UTF-8"</span>);</span><br><span class="line">document.write(writer);</span><br><span class="line">writer.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HrWriter hrWriter = <span class="keyword">new</span> HrWriter();</span><br><span class="line">hrWriter.writeXml();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319162632-342061.png" alt="image-20200319162629790"></p><h3 id="基本表达式"><a href="#基本表达式" class="headerlink" title="基本表达式"></a>基本表达式</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319162901-30988.png" alt="image-20200319162900248"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319163001-910433.png" alt="image-20200319163000664"></p><h3 id="谓语表达式"><a href="#谓语表达式" class="headerlink" title="谓语表达式"></a>谓语表达式</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319163059-476969.png" alt="image-20200319163058768"></p><h3 id="Jaxen"><a href="#Jaxen" class="headerlink" title="Jaxen"></a>Jaxen</h3><h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200319163214-567291.png" alt="image-20200319163213467"></p><p>国内可在<a href="https://maven.aliyun.com/mvn/view" target="_blank" rel="noopener">阿里云中央仓库</a>下载</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XPathTestor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xpath</span><span class="params">(String xpathExp)</span></span>&#123;</span><br><span class="line">String file = <span class="string">"E:/lianxi/xml/hr.xml"</span>;</span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = reader.read(file);</span><br><span class="line"><span class="comment">// Node为element和attribute的父类</span></span><br><span class="line">List&lt;Node&gt; nodes = document.selectNodes(xpathExp);</span><br><span class="line"><span class="keyword">for</span>(Node node : nodes)&#123;</span><br><span class="line">Element emp = (Element)node;</span><br><span class="line">System.out.println(emp.attributeValue(<span class="string">"no"</span>));</span><br><span class="line">System.out.println(emp.elementText(<span class="string">"name"</span>));</span><br><span class="line">System.out.println(emp.elementText(<span class="string">"age"</span>));</span><br><span class="line">System.out.println(emp.elementText(<span class="string">"salary"</span>));</span><br><span class="line">System.out.println(<span class="string">"=============================="</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">XPathTestor testor = <span class="keyword">new</span> XPathTestor();</span><br><span class="line"><span class="comment">//testor.xpath("/hr/employee");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[salary&lt;4000]");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[name='李铁柱']");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[@no=3304]");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[1]");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[last()]");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[position()&lt;3]");</span></span><br><span class="line">testor.xpath(<span class="string">"//employee[3] | //employee[8]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J2EE"><a href="#J2EE" class="headerlink" title="J2EE"></a>J2EE</h1><h2 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320141315-236996.png" alt="image-20200320141314106"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320141344-41362.png" alt="image-20200320141343991"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320141641-713228.png" alt="image-20200320141640718"></p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h3><ul><li><p>服务器：安装了服务器软件的计算机</p></li><li><p>服务器软件：接收用户的请求，处理请求，做出响应</p></li><li><p>web服务器软件：接收用户的请求，处理请求，做出响应。</p><ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li><li><p>常见的java相关的web服务器软件：</p><ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源免费</li></ul></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="与J2EE关系"><a href="#与J2EE关系" class="headerlink" title="与J2EE关系"></a>与J2EE关系</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320141504-156447.png" alt="image-20200320141503855"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></li></ol><ol start="2"><li><p>安装：解压压缩包即可。</p><ul><li>注意：安装目录建议不要有中文和空格</li></ul></li><li><p>卸载：删除目录就行了</p></li><li><p>启动：</p><ul><li><p>bin/startup.bat ,双击运行该文件即可</p></li><li><p>访问：浏览器输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 回车访问自己</p><pre><code>http://别人的ip:8080 访问别人</code></pre></li><li><p>可能遇到的问题：</p><blockquote><p>黑窗口一闪而过：</p><ul><li>原因： 没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量</li></ul><p>启动报错：</p><ol><li>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程<ul><li>netstat -ano</li></ul></li><li>温柔：修改自身的端口号<ul><li>conf/server.xml</li><li>&lt;Connector port=”8888” protocol=”HTTP/1.1”<pre><code>connectionTimeout=&quot;20000&quot;redirectPort=&quot;8445&quot; /&gt;</code></pre></li><li>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。<ul><li>好处：在访问时，就不用输入端口号</li></ul></li></ul></li></ol></blockquote></li></ul></li><li><p>关闭：</p><blockquote><p>正常关闭：</p><ul><li>bin/shutdown.bat</li><li>ctrl+c</li></ul><p>强制关闭：</p><ul><li>点击启动窗口的×</li></ul></blockquote></li><li><p>部署项目</p><ol><li><p>直接将项目放到webapps目录下即可。</p><ul><li><p>/hello：项目的访问路径–&gt;虚拟目录    默认为工程名</p></li><li><p>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</p><ul><li>war包会自动解压缩</li></ul><ol start="2"><li>修改虚拟目录</li></ol><blockquote><p>法一：配置conf/server.xml文件<br>在<host>标签体中配置</host></p><context docbase="D:\hello" path="/hehe"><ul><li>docBase:项目存放的路径</li><li>path：虚拟目录</li></ul><p>法二：在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</p><context docbase="D:\hello"><ul><li>虚拟目录：xml文件的名称</li></ul></context></context></blockquote></li></ul></li></ol></li></ol><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320185011-389395.png" alt="image-20200320185011138"></p><h4 id="集成到IDEA"><a href="#集成到IDEA" class="headerlink" title="集成到IDEA"></a>集成到IDEA</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320203047-349601.png" alt="image-20200320203045938"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320203415-459.png" alt="image-20200320203413151"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320203529-932911.png" alt="image-20200320203525956"></p><h5 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h5><ol><li>IDEA会为每一个tomcat部署的项目单独建立一份配置文件<ul><li>查看控制台的log：Using CATALINA_BASE:   “C:\Users\fqy.IntelliJIdea2018.1\system\tomcat_itcast”</li></ul></li></ol><ul><li>idea对tomcat端口，虚拟目录等配置都对应着该路径下的配置文件</li></ul><ol start="2"><li>工作空间项目和tomcat部署的web项目<ul><li>tomcat真正访问的是“tomcat部署的web项目”</li><li>“tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源</li><li>tomcat部署的web项目通过工作空间项目经过编译等处理生成</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul></li><li>断点调试：使用”小虫子”启动 dubug 启动</li></ol><h4 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h4><h4 id="get方式"><a href="#get方式" class="headerlink" title="get方式"></a>get方式</h4><p>tomcat8及以后默认支持中文</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200405233311-383371.png" alt="image-20200405233309772"></p><h4 id="post方式"><a href="#post方式" class="headerlink" title="post方式"></a>post方式</h4><p><code>request.setCharcterEncoding(&quot;utf-8&quot;)</code></p><p><code>response.setContentType(&quot;text/heml;charset=utf-8&quot;)</code></p><p>或者<code>new String(request.getParamter(&quot;hehe&quot;).getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;)</code></p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h3><p>Server Applet，服务器小程序，主要用于生成动态Web内容，是J2EE最重要的组成部分</p><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法</li></ul><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="创建JavaEE项目"><a href="#创建JavaEE项目" class="headerlink" title="创建JavaEE项目"></a><strong>创建JavaEE项目</strong></h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320204023-229518.png" alt="image-20200320203947048"></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 定义一个类，实现Servlet接口</span><br><span class="line">   * public class ServletDemo1 implements Servlet</span><br><span class="line">2. 实现接口中的抽象方法  </span><br><span class="line">3. 配置Servlet</span><br><span class="line">   在web.xml中配置：</span><br><span class="line">   &lt;!--配置Servlet --&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;cn.itcast.web.servlet.ServletDemo1&lt;/servlet-class&gt;</span><br><span class="line">   &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/demo1&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h4 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h4><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</url-pattern></li><li>如果有，则在找到对应的<servlet-class>全类名</servlet-class></li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320184920-332255.png" alt="image-20200320184920453"></p><h4 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 被创建：执行init方法，只执行一次</span><br><span class="line">    * Servlet什么时候被创建？</span><br><span class="line">    * 默认情况下，第一次被访问时，Servlet被创建</span><br><span class="line">    * 可以配置执行Servlet的创建时机。</span><br><span class="line">        * 在&lt;servlet&gt;标签下配置</span><br><span class="line">        1. 第一次被访问时，创建</span><br><span class="line">        * &lt;load-on-startup&gt;的值为负数   默认</span><br><span class="line">        2. 在服务器启动时，创建</span><br><span class="line">        * &lt;load-on-startup&gt;的值为0或正整数越小越优先</span><br><span class="line">    * Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</span><br><span class="line">    * 多个用户同时访问时，可能存在线程安全问题。</span><br><span class="line">    * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</span><br><span class="line">2. 提供服务：执行service方法，执行多次核心方法</span><br><span class="line">    * 每次访问Servlet时，Service方法都会被调用一次。</span><br><span class="line">3. 被销毁：执行destroy方法，只执行一次</span><br><span class="line">    * Servlet被销毁时执行。服务器关闭时，Servlet被销毁</span><br><span class="line">    * 只有服务器正常关闭时，才会执行destroy方法。</span><br><span class="line">    * destroy方法在Servlet被销毁之前执行，一般用于释放资源</span><br></pre></td></tr></table></figure><h4 id="Servlet3-0"><a href="#Servlet3-0" class="headerlink" title="Servlet3.0"></a>Servlet3.0</h4><p>支持注解配置。可以不需要web.xml了</p><ol><li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li></ol><ol start="2"><li><p>定义一个类，实现Servlet接口</p></li><li><p>复写方法</p></li><li><p>在类上使用@WebServlet注解，进行配置</p><p>@WebServlet(“资源路径”)</p><blockquote><p>urlpartten:Servlet访问路径</p><p>一个Servlet可以定义多个访问路径 ： @WebServlet({“/d4”,”/dd4”,”/ddd4”})</p><p>路径定义规则：</p><ul><li>/xxx：路径匹配</li><li>/xxx/xxx:多层路径，目录结构</li><li>*.do：扩展名匹配</li></ul></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @WebServlet的源码</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320185050-642620.png" alt="image-20200320185050030"></p><h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><p>Servlet – 接口<br>    |<br>GenericServlet – 抽象类<br>    |<br>HttpServlet  – 抽象类</p><blockquote><p>GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</p><ul><li>将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</li></ul><p>HttpServlet：对http协议的一种封装，简化操作</p><ol><li>定义类继承HttpServlet</li><li>复写doGet/doPost方法</li></ol></blockquote><h3 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h3><h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><ul><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li></ul><h4 id="体系结构-1"><a href="#体系结构-1" class="headerlink" title="体系结构"></a>体系结构</h4><p>ServletRequest        –    接口<br>    |    继承<br>HttpServletRequest    – 接口<br>    |    实现<br>org.apache.catalina.connector.RequestFacade 类(tomcat)</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><h5 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h5><blockquote><p>获取请求行数据</p><pre><code>1. 获取请求方式 ：GET* String getMethod()  2. (*)获取虚拟目录：/day14        通过这个来动态获取* String getContextPath()3. 获取Servlet路径: /demo1* String getServletPath()4. 获取get方式请求参数：name=zhangsan* String getQueryString()5. (*)获取请求URI：/day14/demo1* String getRequestURI():        /day14/demo1* StringBuffer getRequestURL()  :http://localhost/day14/demo1    * URL:统一资源定位符 ： http://localhost/day14/demo1    中华人民共和国    * URI：统一资源标识符 : /day14/demo1                    共和国    * URL是URI的一种具体实现6. 获取协议及版本：HTTP/1.1* String getProtocol()7. 获取客户机的IP地址：* String getRemoteAddr()</code></pre><p>获取请求头数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; * String getHeader(String name):通过请求头的名称获取请求头的值</span><br><span class="line">&gt; * Enumeration&lt;String&gt; getHeaderNames():获取所有的请求头名称</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>获取请求体数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; * 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</span><br><span class="line">&gt; * 步骤：</span><br><span class="line">&gt;     1. 获取流对象</span><br><span class="line">&gt;         *  BufferedReader getReader()：获取字符输入流，只能操作字符数据</span><br><span class="line">&gt;         *  ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</span><br><span class="line">&gt;     2. 再从流对象中拿数据</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h5 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h5><blockquote><p>获取请求参数通用方式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 1. String getParameter(String name):根据参数名称获取参数值    username=zs&amp;password=123</span></span><br><span class="line"><span class="quote">&gt; 2. String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</span></span><br><span class="line"><span class="quote">&gt; 3. Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称</span></span><br><span class="line"><span class="quote">&gt; 4. Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</span></span><br><span class="line"><span class="quote">&gt; * 中文乱码问题：</span></span><br><span class="line"><span class="quote">&gt;     * get方式：tomcat 8 已经将get方式乱码问题解决了</span></span><br><span class="line"><span class="quote">&gt;     * post方式：会乱码</span></span><br><span class="line"><span class="quote">&gt;     * 解决：在获取参数前，设置request的编码request.setCharacterEncoding("utf-8");</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200321000922-992885.png" alt="image-20200321000919533"></p><p>请求转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一种在服务器内部的资源跳转方式</span><br><span class="line">&gt; 1. 步骤：</span><br><span class="line">&gt;     1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</span><br><span class="line">&gt;     2. 使用RequestDispatcher对象调用forward方法转发</span><br><span class="line">&gt; 2. 特点：</span><br><span class="line">&gt;     1. 浏览器地址栏路径不发生变化</span><br><span class="line">&gt;     2. 只能转发到当前服务器内部资源中。</span><br><span class="line">&gt;     3. 转发是一次请求</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>共享数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; * 域对象：一个有作用范围的对象，可以在范围内共享数据</span><br><span class="line">&gt; * request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</span><br><span class="line">&gt; * 方法：</span><br><span class="line">&gt;     1. void setAttribute(String name,Object obj):存储数据</span><br><span class="line">&gt;     2. Object getAttitude(String name):通过键获取值</span><br><span class="line">&gt;     3. void removeAttribute(String name):通过键移除键值对</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>获取ServletContext</p><p><code>ServletContext getServletContext()</code></p></blockquote><h3 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h3><blockquote><p>设置响应消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1. 设置响应行</span><br><span class="line">&gt;     1. 格式：HTTP/1.1 200 ok</span><br><span class="line">&gt;     2. 设置状态码：setStatus(int sc) </span><br><span class="line">&gt; 2. 设置响应头：setHeader(String name, String value) </span><br><span class="line">&gt; 3. 设置响应体：</span><br><span class="line">&gt;     1. 获取输出流</span><br><span class="line">&gt;     * 字符输出流：PrintWriter getWriter()</span><br><span class="line">&gt;     * 字节输出流：ServletOutputStream getOutputStream()</span><br><span class="line">&gt;     2. 使用输出流，将数据输出到客户端浏览器</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>重定向    资源跳转的方式</p><pre><code>* 代码实现：//1. 设置状态码为302response.setStatus(302);//2.设置响应头locationresponse.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);//简单的重定向方法response.sendRedirect(&quot;/day15/responseDemo2&quot;);* 重定向的特点:redirect    1. 地址栏发生变化    2. 重定向可以访问其他站点(服务器)的资源    3. 重定向是两次请求。不能使用request对象来共享数据* 转发的特点：forward    1. 转发地址栏路径不变    2. 转发只能访问当前服务器下的资源    3. 转发是一次请求，可以使用request对象来共享数据</code></pre><p>路径设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1. 相对路径：通过相对路径不可以确定唯一资源</span><br><span class="line">&gt;     * 如：./index.html</span><br><span class="line">&gt;     * 不以/开头，以.开头路径(./可以省略)</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     * 规则：找到当前资源和目标资源之间的相对位置关系</span><br><span class="line">&gt; 2. 绝对路径：通过绝对路径可以确定唯一资源</span><br><span class="line">&gt;     * 如：http://localhost/day15/responseDemo2/day15/responseDemo2</span><br><span class="line">&gt;     * 以/开头的路径</span><br><span class="line">&gt; </span><br><span class="line">&gt;     * 规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出</span><br><span class="line">&gt; tips：</span><br><span class="line">&gt; * 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)</span><br><span class="line">&gt; * 建议虚拟目录动态获取：request.getContextPath()</span><br><span class="line">&gt; * &lt;a&gt; , &lt;form&gt;，重定向...</span><br><span class="line">&gt; * 给服务器使用：不需要加虚拟目录</span><br><span class="line">&gt; * 转发路径</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>服务器输出字符数据到浏览器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; * 步骤：</span><br><span class="line">&gt;     1. 获取字符输出流</span><br><span class="line">&gt;     2. 输出数据</span><br><span class="line">&gt; </span><br><span class="line">&gt; * 注意：</span><br><span class="line">&gt;     * 乱码问题：</span><br><span class="line">&gt;     1. PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1</span><br><span class="line">&gt;     2. 设置该流的默认编码</span><br><span class="line">&gt;     response.setCharactorEncoding(&quot;utf-8&quot;)</span><br><span class="line">&gt;     3. 告诉浏览器响应体使用的编码由此可以不用第二步</span><br><span class="line">&gt;     response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;)</span><br><span class="line">&gt;     //2,3可以简写为此，是在获取流之前设置</span><br><span class="line">&gt; response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>服务器输出字节数据到浏览器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1. 获取字节输出流</span><br><span class="line">&gt; 2. 输出数据</span><br><span class="line">&gt; response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line">&gt; response.getOutputStream().write(&quot;你好&quot;.getbytes(&quot;utf-8&quot;))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信</span><br><span class="line">2. 获取：</span><br><span class="line">1. 通过request对象获取</span><br><span class="line">request.getServletContext();</span><br><span class="line">2. 通过HttpServlet获取</span><br><span class="line">this.getServletContext();</span><br><span class="line">3. 功能：</span><br><span class="line">1. 获取MIME类型：</span><br><span class="line">tomcat的web.xml(所有web.xml的父文件)中定义了文件后缀和MIME类型的映射</span><br><span class="line">* MIME类型:在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">* 格式： 大类型/小类型   text/htmlimage/jpeg</span><br><span class="line">* 获取：String getMimeType(String file)  </span><br><span class="line">* 通过文件名来获取，web.xml中保存了扩展名和MIME类型关系</span><br><span class="line">2. 域对象：共享数据生命周期和服务器一样，所以尽量少往里面存数据</span><br><span class="line">1. setAttribute(String name,Object value)</span><br><span class="line">2. getAttribute(String name)</span><br><span class="line">3. removeAttribute(String name)</span><br><span class="line">* ServletContext对象范围：所有用户所有请求的数据</span><br><span class="line">3. 获取文件的真实(服务器)路径classloader只能获取src下文件的路径，这个可以获取web下的</span><br><span class="line"> 方法：String getRealPath(String path)  从web目录开始</span><br><span class="line"> String b = context.getRealPath(&quot;/b.txt&quot;);//web目录下资源访问</span><br><span class="line"></span><br><span class="line">        String c = context.getRealPath(&quot;/WEB-INF/c.txt&quot;);//WEB-INF目录下的资源访问</span><br><span class="line"></span><br><span class="line">        String a = context.getRealPath(&quot;/WEB-INF/classes/a.txt&quot;);//src目录下的资源访问</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="登录案例"><a href="#登录案例" class="headerlink" title="登录案例"></a>登录案例</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200321090646-581065.png" alt="image-20200321090644556"></p><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/checkCodeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器通知浏览器不要缓存</span></span><br><span class="line">response.setHeader(<span class="string">"pragma"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"cache-control"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"expires"</span>,<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在内存中创建一个长80，宽30的图片，默认黑色背景</span></span><br><span class="line"><span class="comment">//参数一：长</span></span><br><span class="line"><span class="comment">//参数二：宽</span></span><br><span class="line"><span class="comment">//参数三：颜色</span></span><br><span class="line"><span class="keyword">int</span> width = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">int</span> height = <span class="number">30</span>;</span><br><span class="line">BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取画笔</span></span><br><span class="line">Graphics g = image.getGraphics();</span><br><span class="line"><span class="comment">//设置画笔颜色为灰色</span></span><br><span class="line">g.setColor(Color.GRAY);</span><br><span class="line"><span class="comment">//填充图片</span></span><br><span class="line">g.fillRect(<span class="number">0</span>,<span class="number">0</span>, width,height);</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生4个随机验证码，12Ey</span></span><br><span class="line">String checkCode = getCheckCode();</span><br><span class="line"><span class="comment">//将验证码放入HttpSession中</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">"CHECKCODE_SERVER"</span>,checkCode);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置画笔颜色为黄色</span></span><br><span class="line">g.setColor(Color.YELLOW);</span><br><span class="line"><span class="comment">//设置字体的小大</span></span><br><span class="line">g.setFont(<span class="keyword">new</span> Font(<span class="string">"黑体"</span>,Font.BOLD,<span class="number">24</span>));</span><br><span class="line"><span class="comment">//向图片上写入验证码</span></span><br><span class="line">g.drawString(checkCode,<span class="number">15</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将内存中的图片输出到浏览器</span></span><br><span class="line"><span class="comment">//参数一：图片对象</span></span><br><span class="line"><span class="comment">//参数二：图片的格式，如PNG,JPG,GIF</span></span><br><span class="line"><span class="comment">//参数三：图片输出到哪里去</span></span><br><span class="line">ImageIO.write(image,<span class="string">"PNG"</span>,response.getOutputStream());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生4位随机字符串 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getCheckCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String base = <span class="string">"0123456789ABCDEFGabcdefg"</span>;</span><br><span class="line"><span class="keyword">int</span> size = base.length();</span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="comment">//产生0到size-1的随机值</span></span><br><span class="line"><span class="keyword">int</span> index = r.nextInt(size);</span><br><span class="line"><span class="comment">//在base字符串中获取下标为index的字符</span></span><br><span class="line"><span class="keyword">char</span> c = base.charAt(index);</span><br><span class="line"><span class="comment">//将c放入到StringBuffer中去</span></span><br><span class="line">sb.append(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request,response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200321122304-63550.png" alt="验证码"></p><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名中文乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">    String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">    <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">    <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String realPath = servletContext.getRealPath(<span class="string">"/img/"</span> + filename);</span><br><span class="line">    <span class="comment">//2.2用字节流关联</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.设置response的响应头</span></span><br><span class="line">    <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">    String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">    response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">    <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决中文文件名问题</span></span><br><span class="line">    <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">    String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">    <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">    filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line"></span><br><span class="line">    response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line">    <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">    ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Web-xml"><a href="#Web-xml" class="headerlink" title="Web.xml"></a>Web.xml</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200405234325-163161.png" alt="image-20200405234324200"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200405234203-131641.png" alt="image-20200405234201679"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200405234836-491737.png" alt="image-20200405234413402"></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h3><ul><li><p>概念：Hyper Text Transfer Protocol 超文本传输协议</p><ul><li><p>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</p></li><li><p>特点：</p><ol><li>基于TCP/IP的高级协议</li><li>默认端口号:80</li><li>基于请求/响应模型的:一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol></li><li><p>历史版本：</p><ul><li>1.0：每一次请求响应都会建立新的连接</li><li>1.1：复用连接</li></ul></li></ul></li></ul><h3 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息"></a>请求消息</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 请求行</span><br><span class="line">请求方式 请求url 请求协议/版本</span><br><span class="line">GET /login.htmlHTTP/1.1</span><br><span class="line">* HTTP协议有7中请求方式，常用的有2种</span><br><span class="line">    * GET：</span><br><span class="line">    1. 请求参数在请求行中，在url后。</span><br><span class="line">    2. 请求的url长度有限制的</span><br><span class="line">    3. 不太安全</span><br><span class="line">    * POST：</span><br><span class="line">    1. 请求参数在请求体中</span><br><span class="line">    2. 请求的url长度没有限制的</span><br><span class="line">    3. 相对安全  </span><br><span class="line">2. 请求头：客户端浏览器告诉服务器一些信息</span><br><span class="line">请求头名称: 请求头值</span><br><span class="line">* 常见的请求头：</span><br><span class="line">    1. User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</span><br><span class="line">    * 可以在服务器端获取该头的信息，解决浏览器的兼容性问题</span><br><span class="line">    2. Referer：http://localhost/login.html</span><br><span class="line">    * 告诉服务器，我(当前请求)从哪里来？</span><br><span class="line">    * 作用：</span><br><span class="line">    1. 防盗链：</span><br><span class="line">    2. 统计工作：</span><br><span class="line">3. 请求空行</span><br><span class="line">空行，就是用于分割POST请求的请求头，和请求体的。</span><br><span class="line">4. 请求体(正文)：</span><br><span class="line">* 封装POST请求消息的请求参数的</span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 字符串格式：</span><br><span class="line">POST /login.htmlHTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://localhost/login.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">username=zhangsan</span><br></pre></td></tr></table></figure><h3 id="响应消息"><a href="#响应消息" class="headerlink" title="响应消息"></a>响应消息</h3><p>服务器端发送给客户端的数据</p><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. 响应行</span><br><span class="line">组成：协议/版本 响应状态码 状态码描述</span><br><span class="line">    响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</span><br><span class="line">    状态码都是3位数字 </span><br><span class="line">    1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</span><br><span class="line">    2. 2xx：成功。代表：200</span><br><span class="line">    3. 3xx：重定向。代表：302(重定向)，304(访问缓存)</span><br><span class="line">    4. 4xx：客户端错误。</span><br><span class="line">    * 代表：</span><br><span class="line">    * 404（请求路径没有对应的资源） </span><br><span class="line">    * 405：请求方式没有对应的doXxx方法</span><br><span class="line">    5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</span><br><span class="line">2. 响应头：</span><br><span class="line">格式：头名称： 值</span><br><span class="line">常见的响应头：</span><br><span class="line">    1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</span><br><span class="line">    2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line">        * 值：</span><br><span class="line">        * in-line:默认值,在当前页面内打开</span><br><span class="line">        * attachment;filename=xxx：以附件形式打开响应体。文件下载</span><br><span class="line">3. 响应空行</span><br><span class="line">4. 响应体:传输的数据</span><br></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><pre><code>HTTP/1.1 200 OKContent-Type: text/html;charset=UTF-8Content-Length: 101Date: Wed, 06 Jun 2018 07:08:42 GMT&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  hello , response  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ol><li>会话：一次会话中包含多次请求和响应。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式：<ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>客户端会话技术，将数据保存到客户端，不够安全</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ol><li>创建Cookie对象，绑定数据</li></ol><ul><li>new Cookie(String name, String value) </li></ul><ol start="2"><li>发送Cookie对象</li></ol><ul><li>response.addCookie(Cookie cookie) </li></ul><ol start="3"><li>获取Cookie，拿到数据</li></ol><ul><li>Cookie[]  request.getCookies()  </li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>基于响应头set-cookie和请求头cookie实现</li></ul><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><pre><code>1. 一次可不可以发送多个cookie?    * 可以    * 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。2. cookie在浏览器中保存多长时间？    1. 默认情况下，当浏览器关闭后，Cookie数据被销毁    2. 持久化存储：        * setMaxAge(int seconds)            1. 正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，                时间到后，cookie文件自动失效            2. 负数：默认值            3. 零：删除cookie信息3. cookie能不能存中文？    * 在tomcat 8 之前 cookie中不能直接存储中文数据。        * 需要将中文数据转码---一般采用URL编码(%E3)    * 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析4. cookie共享问题？    1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？        * 默认情况下cookie不能共享        * setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录            * 如果要共享，则可以将path设置为&quot;/&quot;    2. 不同的tomcat服务器间cookie共享问题？        * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享            * setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享</code></pre><h4 id="特点和作用"><a href="#特点和作用" class="headerlink" title="特点和作用"></a>特点和作用</h4><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li></ol><ul><li>作用：<ol><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ol><li>获取HttpSession对象：<br> HttpSession session = request.getSession();</li><li>使用HttpSession对象：<br> Object getAttribute(String name)<br> void setAttribute(String name, Object value)<br> void removeAttribute(String name)  </li></ol><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ul><li>Session的实现是依赖于Cookie的。</li></ul><h4 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h4><pre><code>1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？    * 默认情况下。不是。    * 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。         Cookie c = new Cookie(&quot;JSESSIONID&quot;,session.getId());         c.setMaxAge(60*60);         response.addCookie(c);2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？    * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作        * session的钝化：            * 在服务器正常关闭之前，将session对象系列化到硬盘上        * session的活化：            * 在服务器启动后，将session文件转化为内存中的session对象即可。3. session什么时候被销毁？    1. 服务器关闭    2. session对象调用invalidate() 。    3. session默认失效时间 30分钟        手动修改        &lt;session-config&gt;            &lt;session-timeout&gt;30&lt;/session-timeout&gt;        &lt;/session-config&gt;</code></pre><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据<ul><li>session与Cookie的区别：</li></ul><ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol></li></ol><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Java Server Pages： java服务器端页面</p><ul><li>可以理解为一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写！！！</li><li>JSP本质上就是一个Servlet</li></ul><h3 id="定义java代码"><a href="#定义java代码" class="headerlink" title="定义java代码"></a>定义java代码</h3><ol><li>&lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li>&lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。</li><li>&lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>html注释： <!-- -->:只能注释html代码片段 仍会输出到页面，只是由于注释了不再显示</li><li>jsp注释：推荐使用<br> &lt;%– –%&gt;：可以注释所有<br> 压根不会输出</li></ol><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>用于配置JSP页面，导入资源文件</p><p>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 … %&gt;</p><pre><code>1. page    ： 配置JSP页面的    * contentType：等同于response.setContentType()        1. 设置响应体的mime类型以及字符集        2. 设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，            则需要设置pageEncoding属性设置当前页面的字符集）    * import：导包    * errorPage：当前页面发生异常后，会自动跳转到指定的错误页面    * isErrorPage：标识当前也是是否是错误页面。        * true：是，可以使用内置对象exception        * false：否。默认值。不可以使用内置对象exception2. include    ： 页面包含的。导入页面的资源文件    * &lt;%@include file=&quot;top.jsp&quot;%&gt;3. taglib    ： 导入资源    * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;        * prefix：前缀，自定义的</code></pre><h3 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h3><p>在jsp页面中不需要创建，直接使用的对象</p><ul><li>pageContext                PageContext                    当前页面共享数据，还可以获取其他八个内置对象</li><li>request                    HttpServletRequest            一次请求访问的多个资源(转发)</li><li>session                    HttpSession                    一次会话的多个请求间</li><li>application                ServletContext                所有用户间共享数据</li><li>response                    HttpServletResponse            响应对象</li><li>page                        Object                        当前页面(Servlet)的对象  this</li><li>out                        JspWriter                    输出对象，数据输出到页面上</li><li>config                    ServletConfig                Servlet的配置对象</li><li>exception                    Throwable                    异常对象</li></ul><p><strong>tips</strong></p><ul><li><p>response.getWriter()和out.write()的区别：</p><ul><li><p>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</p><p>即response.getWriter()数据输出永远在out.write()之前</p></li></ul></li></ul><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ol><li><p>概念：Expression Language 表达式语言</p></li><li><p>作用：替换和简化jsp页面中java代码的编写</p></li><li><p>语法：${表达式}</p></li><li><p>注意：</p><ul><li>jsp默认支持el表达式的。如果要忽略el表达式<ol><li>设置jsp中page指令中：isELIgnored=”true” 忽略当前jsp页面中所有的el表达式</li><li>${表达式} ：忽略当前这个el表达式</li></ol></li></ul></li><li><p>使用：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1. 运算：</span><br><span class="line">   * 运算符：</span><br><span class="line">     1. 算数运算符： + - * /(div) %(mod)</span><br><span class="line">     2. 比较运算符： &gt; &lt; &gt;= &lt;= == !=</span><br><span class="line">     3. 逻辑运算符： &amp;&amp;(and) ||(or) !(not)</span><br><span class="line">     4. 空运算符： empty</span><br><span class="line">        * 功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</span><br><span class="line">        * $&#123;empty list&#125;:判断字符串、集合、数组对象是否为null或者长度为0</span><br><span class="line">        * $&#123;not empty str&#125;:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</span><br><span class="line">2. 获取值</span><br><span class="line">   1. el表达式只能从域对象中获取值</span><br><span class="line">   2. 语法：</span><br><span class="line">      1. $&#123;域名称.键名&#125;：从指定域中获取指定键的值</span><br><span class="line">         * 域名称：</span><br><span class="line">           1. pageScope--&gt; pageContext</span><br><span class="line">           2. requestScope --&gt; request</span><br><span class="line">           3. sessionScope --&gt; session</span><br><span class="line">           4. applicationScope --&gt; application（ServletContext）</span><br><span class="line">         * 举例：在request域中存储了name=张三</span><br><span class="line">        * 获取：$&#123;requestScope.name&#125;</span><br><span class="line"></span><br><span class="line">      2. $&#123;键名&#125;：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</span><br><span class="line">      3. 获取对象、List集合、Map集合的值</span><br><span class="line">         1. 对象：$&#123;域名称.键名.属性名&#125;</span><br><span class="line">           * 本质上会去调用对象的getter方法</span><br><span class="line"></span><br><span class="line">        2. List集合：$&#123;域名称.键名[索引]&#125;</span><br><span class="line"></span><br><span class="line">         3. Map集合：</span><br><span class="line">            * $&#123;域名称.键名.key名称&#125;</span><br><span class="line">            * $&#123;域名称.键名[&quot;key名称&quot;]&#125;</span><br><span class="line">3. 隐式对象：</span><br><span class="line">   * el表达式中有11个隐式对象</span><br><span class="line">   * pageContext：</span><br><span class="line">     * 获取jsp其他八个内置对象</span><br><span class="line">       * $&#123;pageContext.request.contextPath&#125;：动态获取虚拟目录</span><br></pre></td></tr></table></figure></li></ol><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><ol><li>概念：JavaServer Pages Tag Library  JSP标准标签库</li></ol><ul><li>是由Apache组织提供的开源的免费的jsp标签        &lt;标签&gt;</li></ul><ol start="2"><li><p>作用：用于简化和替换jsp页面上的java代码</p></li><li><p>使用步骤：</p><ol><li><p>导入jstl相关jar包</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200405235125-777066.png" alt="image-20200405235123993"></p></li><li><p>引入标签库：taglib指令：  &lt;%@ taglib prefix=”” uri = “”%&gt;</p><p>​    fmt用于对输出内容进行格式化</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200405235336-373972.png" alt="image-20200405235334717"></p><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200406090750794.png" alt="image-20200406090750794"></p></li><li><p>使用标签</p></li></ol></li><li><p>常用jstl标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. if:相当于java代码的if语句</span><br><span class="line">1. 属性：</span><br><span class="line">           * test 必须属性，接受boolean表达式</span><br><span class="line">               * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</span><br><span class="line">               * 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line">    2. 注意：</span><br><span class="line">       * c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签</span><br><span class="line">2. choose:相当于java代码的switch语句</span><br><span class="line">1. 使用choose标签声明         相当于switch声明</span><br><span class="line">    2. 使用when标签做判断         相当于case</span><br><span class="line">    3. 使用otherwise标签做其他情况的声明    相当于default</span><br><span class="line"></span><br><span class="line">3. foreach:相当于java代码的for语句</span><br><span class="line">items 被遍历对象  var  当前取出的值    varStatus  索引</span><br><span class="line">4. out：value  输出的值  escapeXml 跳过转义，原样输出default   值为空时的默认值</span><br></pre></td></tr></table></figure></li></ol><h2 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h2><h3 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200405211215-403325.png" alt="image-20200405211213241"></p><ol><li>M：Model，模型。JavaBean<ul><li>完成具体的业务操作，如：查询数据库，封装对象</li></ul></li><li>V：View，视图。JSP<ul><li>展示数据</li></ul></li><li>C：Controller，控制器。Servlet<ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图进行展示</li></ul></li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ol><li>优点：<ol><li>耦合性低，方便维护，可以利于分工协作</li><li>重用性高</li></ol></li><li>缺点：<ol><li>使得项目架构变得复杂，对开发人员要求高</li></ol></li></ol><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ol><li>界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</li><li>业务逻辑层：处理业务逻辑的。</li><li>数据访问层：操作数据存储文件。</li></ol><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="概述-13"><a href="#概述-13" class="headerlink" title="概述"></a>概述</h3><ul><li>web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</li><li>过滤器的作用：<ul><li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤…</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200410172754-300291.png" alt="image-20200410172753002"></p><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>定义一个类，实现接口Filter</li><li>复写方法</li><li>配置拦截路径<ol><li>web.xml</li><li>注解</li></ol></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre><code>@WebFilter(&quot;/*&quot;)    // 访问所有资源之前，都会执行该过滤器public class FilterDemo1 implements Filter {    @Override    public void init(FilterConfig filterConfig) throws ServletException {}    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {        System.out.println(&quot;filterDemo1被执行了....&quot;);        //放行        filterChain.doFilter(servletRequest,servletResponse);    }    @Override    public void destroy() {}}</code></pre><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在过滤器中添加config属性，在init中给config赋值，</span></span><br><span class="line"><span class="comment">在doFilter中通过config.getInitParameter("配置的参数名")来取值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截方式可以配置多个</span></span><br><span class="line"><span class="comment">REQUEST：默认值。浏览器直接请求资源</span></span><br><span class="line"><span class="comment">FORWARD：转发访问资源</span></span><br><span class="line"><span class="comment">INCLUDE：包含访问资源</span></span><br><span class="line"><span class="comment">ERROR：错误跳转资源</span></span><br><span class="line"><span class="comment">ASYNC：异步访问资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span><span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h4><ul><li>拦截路径配置</li></ul><blockquote><p>具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行<br>拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行<br>后缀名拦截： <em>.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行<br>拦截所有资源：/\</em>        访问所有资源时，过滤器都会被执行</p></blockquote><ul><li><p>拦截方式配置：资源被访问的方式</p><ul><li><p>注解配置：设置dispatcherTypes属性</p></li><li><p>web.xml配置: 设置<dispatcher></dispatcher>标签即可</p></li></ul></li></ul><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><ol><li>执行过滤器</li><li>执行放行后的资源</li><li>回来执行过滤器放行代码下边的代码</li></ol><h4 id="生命周期方法-1"><a href="#生命周期方法-1" class="headerlink" title="生命周期方法"></a>生命周期方法</h4><ol><li>init:在服务器启动后，会创建Filter对象，然后调用init方法，用于加载资源</li><li>doFilter:每一次请求被拦截资源时，会执行。执行多次</li><li>destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法，用于释放资源</li></ol><h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><ul><li><p>执行顺序：如果有两个过滤器：过滤器1和过滤器2</p><ol><li>过滤器1</li><li>过滤器2</li><li>资源执行</li><li>过滤器2</li><li>过滤器1 </li></ol></li><li><p>过滤器先后顺序问题：</p><ol><li>注解配置：按照类名的字符串比较规则比较，值小的先执行<ul><li>如： AFilter 和 BFilter，AFilter就先执行了。</li></ul></li><li>web.xml配置： <filter-mapping>谁定义在上边，谁先执行</filter-mapping></li></ol></li></ul><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><ul><li>事件    ：一件事情</li><li>事件源 ：事件发生的地方</li><li>监听器 ：一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码</li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200410174852-67830.png" alt="image-20200410174850308"></p><p>统计在线人数,页面访问量,应用启动时完成信息初始化等</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p> <strong>web.xml</strong></p><p>多个监听器按配置顺序启动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.itcast.web.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注解</strong></p><ul><li>@WebListener</li></ul><h3 id="常用监听器"><a href="#常用监听器" class="headerlink" title="常用监听器"></a>常用监听器</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200410180815-108190.png" alt="image-20200410180814268"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200410175646-180796.png" alt="image-20200410175645359"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在监听器方法中,通过sce.getServletContext().getIninParameter("配置的参数名")来获取</span></span><br><span class="line"><span class="comment">可以将获取到的值保存到ServletContext的属性中,便于其它地方调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>age<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200410180326-654131.png" alt="image-20200410180324392"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过getName(),getValue()来获取监听对象的名称和值</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200410180635-462265.png" alt="image-20200410180635269"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200410180737-438004.png" alt="image-20200410180737367"></p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="概述-14"><a href="#概述-14" class="headerlink" title="概述"></a>概述</h2><p>JavaScript Object Notation    JavaScript对象表示法</p><p>轻量级的文本数据交换格式</p><p>独立于语言，具有自我描述性，更易于理解</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326112408-229086.png" alt="image-20200326112406091"></p><p>键用引号(单双都行)引起来，也可以不使用引号</p><p>值的取值类型：</p><blockquote><p>数字（整数或浮点数）</p><p>字符串（在双引号中）</p><p>逻辑值（true 或 false）</p><p>数组（在方括号中）    {“persons”:[{},{}]}</p><p>对象（在花括号中） {“address”:{“province”：”陕西”….}}</p><p>null</p></blockquote><h2 id="JavaScript操作JSON"><a href="#JavaScript操作JSON" class="headerlink" title="JavaScript操作JSON"></a>JavaScript操作JSON</h2><p>默认支持JSON</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 法一：直接赋值</span><br><span class="line">var json = &#123;</span><br><span class="line">"empno": 7499,</span><br><span class="line">"ename": "王乐",</span><br><span class="line">"job": "客户经理",</span><br><span class="line">"hiredate": "2017-04-22",</span><br><span class="line">"salary": 10000,</span><br><span class="line">"dname": "市场部",</span><br><span class="line">"customers": [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"cname"</span>: <span class="string">"李东"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"cname"</span>: <span class="string">"刘楠"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br><span class="line">//法二：当作对象处理</span><br><span class="line">var json2 = &#123;&#125;;</span><br><span class="line">json2.class_name = "五年级五班";</span><br><span class="line">json2.floor = "逸夫楼四层";</span><br><span class="line">json2.teacher = "王义夫";</span><br></pre></td></tr></table></figure><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li></ol><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ps = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"gender"</span>: <span class="literal">false</span>&#125;];</span><br><span class="line"><span class="comment">//for in 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="comment">//这样的方式获取不行。因为相当于  person."name"</span></span><br><span class="line">    <span class="comment">//alert(key + ":" + person.key);</span></span><br><span class="line">    alert(key+<span class="string">":"</span>+person[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取ps中的所有值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = ps[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">        alert(key+<span class="string">":"</span>+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON与字符串转换"><a href="#JSON与字符串转换" class="headerlink" title="JSON与字符串转换"></a>JSON与字符串转换</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326112935-742074.png" alt="image-20200326112934880"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"&#123;\"class_name\":\"五年级四班\"&#125;"</span>;<span class="comment">//str.ename</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(str);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"班级:"</span> + json.class_name);</span><br></pre></td></tr></table></figure><h2 id="JSON工具包"><a href="#JSON工具包" class="headerlink" title="JSON工具包"></a>JSON工具包</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200326113517-649060.png" alt="image-20200326113517205"></p><h3 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h3><p>官网下载jar包导入项目</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FastJSON中提供了JSON对象，完成对象与JSON字符串的互相转换</span></span><br><span class="line"><span class="comment">// 传入对应的JavaBean对象</span></span><br><span class="line">String json = JSON.toJSONString(employee);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将JSON字符串封装为对象</span></span><br><span class="line">    <span class="comment">// 单个对象</span></span><br><span class="line">    Employee emp = JSON.parseObject(json, Employee.class);</span><br><span class="line">    <span class="comment">// 传入JSON为数组时返回List集合</span></span><br><span class="line">    List&lt;Employee&gt; emps = JSON.parseArray(json , Employee.class);</span><br></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@JSONField(name = &quot;hiredate&quot; , format=&quot;yyyy-MM-dd&quot;)</span><br><span class="line">private Date hdate;</span><br><span class="line">@JSONField(serialize = false)</span><br><span class="line">private String dname;</span><br></pre></td></tr></table></figure><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="概述-15"><a href="#概述-15" class="headerlink" title="概述"></a>概述</h2><p>Asynchronous JavaScript And Xml        异步的js和xml</p><p>在不刷新页面的情况下，进行局部更新</p><p>异步和同步：客户端和服务器端相互通信的基础上</p><ul><li>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ul><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><h3 id="JavaScript方式"><a href="#JavaScript方式" class="headerlink" title="JavaScript方式"></a>JavaScript方式</h3><pre><code>//1.创建核心对象var xmlhttp;if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari    xmlhttp=new XMLHttpRequest();}else{// code for IE6, IE5    xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);}//2. 建立连接/*    参数：        1. 请求方式：GET、POST            * get方式，请求参数在URL后边拼接。send方法为空参            * post方式，请求参数在send方法中定义        2. 请求的URL：        3. 同步或异步请求：true（异步）或 false（同步） */xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username=tom&quot;,true);//3.发送请求xmlhttp.send();//4.接受并处理来自服务器的响应结果//获取方式 ：xmlhttp.responseText//什么时候获取？当服务器响应成功后再获取//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。xmlhttp.onreadystatechange=function(){    //判断readyState就绪状态是否为4，判断status响应状态码是否为200    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)    {       //获取服务器的响应结果        var responseText = xmlhttp.responseText;        alert(responseText);    }}</code></pre><h3 id="JQuery方式"><a href="#JQuery方式" class="headerlink" title="JQuery方式"></a>JQuery方式</h3><pre><code>1. $.ajax()    * 语法：$.ajax({键值对});     //使用$.ajax()发送异步请求        $.ajax({            url:&quot;ajaxServlet1111&quot; , // 请求路径            type:&quot;POST&quot; , //请求方式            //data: &quot;username=jack&amp;age=23&quot;,//请求参数            data:{&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23},            success:function (data) {                alert(data);            },//响应成功后的回调函数            error:function () {                alert(&quot;出错啦...&quot;)            },//表示如果请求响应出现错误，会执行的回调函数            dataType:&quot;text&quot;//设置接受到的响应数据的格式        });2. $.get()：发送get请求    * 语法：$.get(url, [data], [callback], [type])        * 参数：            * url：请求路径            * data：请求参数            * callback：回调函数            * type：响应结果的类型3. $.post()：发送post请求    * 语法：$.post(url, [data], [callback], [type])        * 参数：            * url：请求路径            * data：请求参数            * callback：回调函数            * type：响应结果的类型</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XML&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318234727-4483.png&quot; alt=&quot;image-20200318234726013&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;与HTML比较&quot;&gt;&lt;a href=&quot;#与HTML比较&quot; class=&quot;headerlink&quot; title=&quot;与HTML比较&quot;&gt;&lt;/a&gt;与HTML比较&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318234846-690300.png&quot; alt=&quot;image-20200318234805192&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="heima57" scheme="http://yoursite.com/categories/heima57/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>java进阶</title>
    <link href="http://yoursite.com/2020/02/19/heima57/java%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2020/02/19/heima57/java进阶/</id>
    <published>2020-02-18T17:19:03.000Z</published>
    <updated>2020-03-28T13:41:21.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p><code>java.lang.Object</code>类是Java语言中的根类，那么默认则继承自Object类</p><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><h4 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h4><ul><li><code>public String toString()</code>：返回该对象的字符串表示。</li></ul><p>toString方法返回该对象的字符串表示，默认为对象的类型+@+内存地址值的hash值。</p><p>而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，故需要重写它。</p><h4 id="覆盖重写"><a href="#覆盖重写" class="headerlink" title="覆盖重写"></a>覆盖重写</h4><p>如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 在我们直接使用输出语句输出对象名的时候,其实默认通过该对象调用了其toString()方法。</p></blockquote><a id="more"></a><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><h4 id="方法摘要-1"><a href="#方法摘要-1" class="headerlink" title="方法摘要"></a>方法摘要</h4><ul><li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li></ul><p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的</p><h4 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h4><p>Object类中默认进行<code>==</code>运算符的<strong>对象地址</strong>比较，只要不是同一个对象，结果必然为false。</p><h4 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h4><p>如果希望进行对象的内容比较，则可以覆盖重写equals方法</p><p>由于有很多细小的安全性问题需要兼顾，idea可以直接生成</p><p>通常和hashcode方法一同重写，在利用散列表存储时</p><h2 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h2><p>在<strong>JDK7</strong>添加了一个Objects工具类，它提供了一些方法来操作对象，它由一些静态的实用方法组成，这些方法是<strong>null-save（空指针安全的）或null-tolerant（容忍空指针的）</strong></p><p>在比较两个对象的时候，Object的equals方法容易抛出空指针异常，而Objects类中的equals方法就优化了这个问题</p><ul><li><code>public static boolean equals(Object a, Object b)</code>:判断两个对象是否相等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p><code>java.util.Date</code>类 表示特定的瞬间，精确到毫秒。</p><ul><li><code>public Date()</code>：分配Date对象并初始化此对象，以表示分配它的时间</li><li><code>public Date(long date)</code>：分配Date对象并初始化此对象，以表示自从标准基准时间以来的指定毫秒数。</li></ul><blockquote><p>tips: 由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> Date()); <span class="comment">// Tue Jan 16 14:37:35 CST 2018</span></span><br><span class="line"><span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> Date(<span class="number">0L</span>)); <span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>public long getTime()</code> 把日期对象转换成对应的时间毫秒值。</li></ul><h2 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h2><p><code>java.text.DateFormat</code> 是日期/时间格式化子类的抽象类，我们通过这个类可以在Date对象与String对象之间进行来回转换</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>由于DateFormat为<strong>抽象类</strong>，所以常用子类<code>java.text.SimpleDateFormat</code></p><p>这个类需要一个<strong>模式</strong>来指定格式化或解析的标准。</p><ul><li><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造</li></ul><h3 id="格式规则"><a href="#格式规则" class="headerlink" title="格式规则"></a>格式规则</h3><p>常用的格式规则为：</p><table><thead><tr><th>标识字母</th><th align="left">含义</th></tr></thead><tbody><tr><td>y</td><td align="left">年</td></tr><tr><td>M</td><td align="left">月</td></tr><tr><td>d</td><td align="left">日</td></tr><tr><td>H</td><td align="left">时</td></tr><tr><td>m</td><td align="left">分</td></tr><tr><td>s</td><td align="left">秒</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应的日期格式如：2018-01-16 15:06:38</span></span><br><span class="line">DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br></pre></td></tr></table></figure><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p>DateFormat类的常用方法有：</p><ul><li><code>public String format(Date date)</code>：将Date对象格式化为字符串。</li><li><code>public Date parse(String source)</code>：将字符串解析为Date对象。</li></ul><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>java.util.Calendar</code>是日历类，在Date后出现，替换掉了许多Date的方法。</p><p>该类将所有可能用到的时间信息封装为<strong>静态成员变量</strong>，方便获取</p><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p>Calendar为抽象类，由于语言敏感性，Calendar类在创建对象时并非直接创建，而是通过静态方法创建</p><ul><li><code>public static Calendar getInstance()</code>：使用默认时区和语言环境获得一个日历</li></ul><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><p>根据Calendar类的API文档，常用方法有：</p><ul><li><code>public int get(int field)</code>：返回给定日历字段的值。</li><li><code>public void set(int field, int value)</code>：将给定的日历字段设置为给定值。</li><li><code>public abstract void add(int field, int amount)</code>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li><li><code>public Date getTime()</code>：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的<strong>Date对象</strong>。</li></ul><p>Calendar类中提供很多成员常量，代表给定的日历字段：</p><table><thead><tr><th>字段值</th><th>含义</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td></tr><tr><td>MONTH</td><td>月（从0开始，可以+1使用）</td></tr><tr><td>DAY_OF_MONTH</td><td>月中的天（几号）</td></tr><tr><td>HOUR</td><td>时（12小时制）</td></tr><tr><td>HOUR_OF_DAY</td><td>时（24小时制）</td></tr><tr><td>MINUTE</td><td>分</td></tr><tr><td>SECOND</td><td>秒</td></tr><tr><td>DAY_OF_WEEK</td><td>周中的天（周几，周日为1，可以-1使用）</td></tr></tbody></table><h4 id="get-set方法"><a href="#get-set方法" class="headerlink" title="get/set方法"></a>get/set方法</h4><p>get方法用来获取指定字段的值，set方法用来设置指定字段的值，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Calendar对象</span></span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 设置年 </span></span><br><span class="line"><span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 设置月默认是0-11</span></span><br><span class="line"><span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置日</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">cal.set(Calendar.YEAR, <span class="number">2020</span>);</span><br></pre></td></tr></table></figure><h4 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h4><p>add方法可以对指定日历字段的值进行加减操作，如果第二个参数为正数则加上偏移量，如果为负数则减去偏移量。代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2018年1月17日</span></span><br><span class="line"><span class="comment">// 使用add方法</span></span><br><span class="line">cal.add(Calendar.DAY_OF_MONTH, <span class="number">2</span>); <span class="comment">// 加2天</span></span><br><span class="line">cal.add(Calendar.YEAR, -<span class="number">3</span>); <span class="comment">// 减3年</span></span><br><span class="line">System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2015年1月18日;</span></span><br></pre></td></tr></table></figure><h4 id="getTime方法"><a href="#getTime方法" class="headerlink" title="getTime方法"></a>getTime方法</h4><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">Date date = cal.getTime();</span><br><span class="line">System.out.println(date); <span class="comment">// Tue Jan 16 16:03:09 CST 2018</span></span><br></pre></td></tr></table></figure><p>小贴士：</p><ul><li><p>​     西方星期的开始为周日，中国为周一。</p></li><li><p>​     在Calendar类中，月份的表示是以0-11代表1-12月。</p></li><li><p>​     日期是有大小关系的，时间靠后，时间越大。</p></li></ul><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p><code>java.lang.System</code>类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作</p><ul><li><code>public static long currentTimeMillis()</code>：返回以毫秒为单位的当前时间。</li><li><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>：将数组中指定的数据拷贝到另一个数组中。</li></ul><h2 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h2><h3 id="字符串拼接问题"><a href="#字符串拼接问题" class="headerlink" title="字符串拼接问题"></a>字符串拼接问题</h3><p>由于String类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"Hello"</span>;</span><br><span class="line">        s += <span class="string">"World"</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在API中对String类有这样的描述：字符串是常量，它们的值在创建后不能被更改。</p><p>根据这句话分析我们的代码，其实总共产生了三个字符串，即<code>&quot;Hello&quot;</code>、<code>&quot;World&quot;</code>和<code>&quot;HelloWorld&quot;</code>。引用变量s首先指向<code>Hello</code>对象，最终指向拼接出来的新字符串对象，即<code>HelloWord</code> 。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218200020-984183.bmp" alt></p><p>故若对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。</p><p>为了解决这一问题，可以使用<code>java.lang.StringBuilder</code>类。</p><h3 id="StringBuilder概述"><a href="#StringBuilder概述" class="headerlink" title="StringBuilder概述"></a>StringBuilder概述</h3><p>查阅<code>java.lang.StringBuilder</code>的API，StringBuilder又称为可变字符序列</p><p>StringBuilder是个字符串的缓冲区，即它是一个容器，容器中可以装很多字符串。并且能够对其中的字符串进行各种操作。</p><p>它的内部拥有一个数组用来存放字符串内容，进行字符串拼接时，直接在数组中加入新内容。StringBuilder会自动维护数组</p><p>的扩容。原理如下图所示：(默认16字符空间，超过自动扩充)</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218200030-728766.png" alt="06-StringBuilder的原理"></p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>根据StringBuilder的API文档，常用构造方法有2个：</p><ul><li><code>public StringBuilder()</code>：构造一个空的StringBuilder容器。</li><li><code>public StringBuilder(String str)</code>：构造一个StringBuilder容器，并将字符串添加进去。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(sb1); <span class="comment">// (空白)</span></span><br><span class="line"><span class="comment">// 使用带参构造</span></span><br><span class="line">StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">"itcast"</span>);</span><br><span class="line">System.out.println(sb2); <span class="comment">// itcast</span></span><br></pre></td></tr></table></figure><h3 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h3><p>StringBuilder常用的方法有2个：</p><ul><li><code>public StringBuilder append(...)</code>：添加<strong>任意类型数据</strong>的字符串形式，并返回当前对象自身。</li><li><code>public String toString()</code>：将当前StringBuilder对象转换为String对象。</li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类</p><table><thead><tr><th>基本类型</th><th>对应的包装类（位于java.lang包中）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td><strong>Character</strong></td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p>基本类型与对应的包装类对象之间，来回转换的过程称为”装箱“与”拆箱“：</p><ul><li><p><strong>装箱</strong>：从基本类型转换为对应的包装类对象。</p></li><li><p><strong>拆箱</strong>：从包装类对象转换为对应的基本类型。</p></li></ul><p>用Integer与 int为例：（看懂代码即可）</p><p>基本数值—-&gt;包装对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line">Integer iii = Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br></pre></td></tr></table></figure><p>包装对象—-&gt;基本数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = i.intValue();</span><br></pre></td></tr></table></figure><h3 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h3><p>从<strong>Java 5</strong>（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">4</span>;<span class="comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span></span><br><span class="line">i = i + <span class="number">5</span>;<span class="comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span></span><br><span class="line"><span class="comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span></span><br></pre></td></tr></table></figure><h3 id="基本类型与字符串转换"><a href="#基本类型与字符串转换" class="headerlink" title="基本类型与字符串转换"></a>基本类型与字符串转换</h3><h4 id="基本类型转换为String"><a href="#基本类型转换为String" class="headerlink" title="基本类型转换为String"></a>基本类型转换为String</h4><p>基本类型转换String总共有三种方式</p><ol><li>基本类型直接与””相连接即可；如：34+””</li><li>包装类中的toString方法</li><li>String中的静态方法valueOf</li></ol><h4 id="String转换成对应的基本类型"><a href="#String转换成对应的基本类型" class="headerlink" title="String转换成对应的基本类型"></a>String转换成对应的基本类型</h4><p>除了Character类之外，其他所有包装类都具有<strong>parseXxx</strong>静态方法可以将字符串参数转换为对应的基本类型：</p><ul><li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li><li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li><li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li></ul><p>代码使用（仅以Integer类的静态方法parseXxx为例）如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = Integer.parseInt(<span class="string">"100"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p></blockquote><h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>集合是java中提供的<strong>一种容器</strong>，可以用来存储多个数据。</p><p>集合和数组区别</p><ul><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的<strong>都是对象</strong>。而且对象的类型可以不一致</li></ul><p>集合按照其存储结构可以分为两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。</li><li><code>List</code>的特点是元素有序、元素可重复。</li><li><code>Set</code>的特点是元素无序，而且不可重复。</li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218202415-500527.png" alt></p><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><p>Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li><code>public boolean add(E e)</code></li><li><code>public void clear()</code> </li><li><code>public boolean remove(E e)</code></li><li><code>public boolean contains(E e)</code></li><li><code>public boolean isEmpty()</code></li><li><code>public int size()</code></li><li><code>public Object[] toArray()</code></li></ul><h2 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h2><h3 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h3><p><code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储</p><p>元素，而<code>Iterator</code>主要用于迭代访问（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p><p>想要遍历Collection集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获取迭代器的方法：</p><ul><li><code>public Iterator iterator()</code>: 获取集合对应的迭代器</li></ul><p><strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，</p><p>继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p><h3 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>public E next()</code>:返回迭代的下一个元素。</li><li><code>public boolean hasNext()</code>:如果仍有元素可以迭代，则返回 true。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"><span class="comment">//  泛型指的是 迭代出 元素的数据类型</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123; <span class="comment">//判断是否有迭代元素</span></span><br><span class="line">    String s = it.next();<span class="comment">//获取迭代出的元素</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips:：如果集合中已经没有元素了，还继续使用迭代器的next方法，将会发生java.util.NoSuchElementException没有集合元素的错误。</p></blockquote><h3 id="迭代器的实现原理"><a href="#迭代器的实现原理" class="headerlink" title="迭代器的实现原理"></a>迭代器的实现原理</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218202559-680162.bmp" alt></p><p>在调用Iterator的next方法之前，<strong>迭代器的索引位于第一个元素之前，不指向任何元素</strong>，当第一次调用迭代器的next方法</p><p>后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，直到hasNext方法返回false，表示到达了集合的末</p><p>尾</p><h3 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h3><p>增强for循环(也称for each循环)是<strong>JDK1.5</strong>以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以<strong>在遍历的过程中，不能对集合中的元素进行增删操作</strong>。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class="line">  <span class="comment">//写操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips: 新for循环必须有被遍历的目标。目标只能是Collection或者是数组。新式for仅仅作为遍历操作出现</p></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支</p><ul><li>允许出现重复的元素，</li><li>所有的元素是以线性方式进行存储的，</li><li>在程序中可以通过索引来访问集合中的指定元素</li><li>元素有序，即元素的存入顺序和取出顺序一致。</li></ul><h3 id="常用方法-5"><a href="#常用方法-5" class="headerlink" title="常用方法"></a>常用方法</h3><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法</p><ul><li><code>public void add(int index, E element)</code>: 将指定的元素，添加到该集合中的指定位置上。</li><li><code>public E get(int index)</code>:返回集合中指定位置的元素。</li><li><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</li><li><code>public E set(int index, E element)</code>:用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li></ul><p>List集合特有的方法都是跟索引相关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();   </span><br><span class="line"><span class="comment">// 往 尾部添加 指定元素</span></span><br><span class="line">list.add(<span class="string">"图图"</span>);</span><br><span class="line"><span class="comment">// String remove(int index) 删除指定位置元素  返回被删除元素</span></span><br><span class="line"><span class="comment">// 删除索引位置为2的元素 </span></span><br><span class="line">System.out.println(list.remove(<span class="number">2</span>));   </span><br><span class="line"><span class="comment">// String set(int index,String s)</span></span><br><span class="line"><span class="comment">// 在指定位置 进行 元素替代（改） </span></span><br><span class="line">list.set(<span class="number">0</span>, <span class="string">"三毛"</span>);    </span><br><span class="line"><span class="comment">// String get(int index)  获取指定位置元素</span></span><br><span class="line"><span class="comment">// 跟size() 方法一起用  来 遍历的 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h3><h4 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h4><p><code>java.util.ArrayList</code>集合数据存储的结构是数组结构，元素增删慢，查找快</p><p>由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p><h4 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h4><p><code>java.util.LinkedList</code>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><blockquote><p>LinkedList是一个双向链表，那么双向链表是什么样子的呢，我们用个图了解下</p></blockquote><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218213149-89626.png" alt></p><p>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法。这些方法我们作为了解即可：</p><ul><li><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</li><li><code>public E getFirst()</code>:返回此列表的第一个元素。</li><li><code>public E getLast()</code>:返回此列表的最后一个元素。</li><li><code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</li><li><code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</li><li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li><li><code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</li><li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;String&gt; link = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">link.addFirst(<span class="string">"abc3"</span>);</span><br><span class="line">System.out.println(link);</span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line">System.out.println(link.getFirst());</span><br><span class="line">System.out.println(link.getLast());</span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">System.out.println(link.removeFirst());</span><br><span class="line">System.out.println(link.removeLast());</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!link.isEmpty()) &#123; <span class="comment">//判断集合是否为空</span></span><br><span class="line">    System.out.println(link.pop()); <span class="comment">//弹出集合中的栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>线程安全，是List最初的实现类，底层是数组，在JDK1.2之后增加由于访问速度慢渐渐被遗弃</p><h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><p><code>java.util.Set</code>接口继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格</p><p><code>Set</code>接口中元素无序，并且存入的元素不可重复。</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不可重复的，并且是无序的</p><p><code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>支持</p><p><code>HashSet</code>是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能</p><p>保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法。</p><h4 id="存储数据的结构（哈希表）"><a href="#存储数据的结构（哈希表）" class="headerlink" title="存储数据的结构（哈希表）"></a>存储数据的结构（哈希表）</h4><p>在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当</p><p>位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。</p><p>而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减</p><p>少了查找时间。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218213940-459878.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218214030-717218.png" alt></p><p>保证HashSet集合元素的唯一，其实就是根据对象的hashCode和equals方法来决定的。</p><p>如果我们往集合中<strong>存放自定义的对象</strong>，那么保证其唯一，就必须<strong>复写hashCode和equals</strong>方法</p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构，但他是有序的</p><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="常用功能-1"><a href="#常用功能-1" class="headerlink" title="常用功能"></a>常用功能</h3><ul><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)</code>:往集合中一次添加多个元素。</li><li><code>public static void shuffle(List&lt;?&gt; list) 打乱顺序</code>:打乱集合顺序。</li></ul><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ul><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。</li></ul><h5 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h5><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</p><p>说到排序了，在JAVA中提供了两种比较实现的方式，一种是比较死板的采用<code>java.lang.Comparable</code>接口去实现，一种是灵</p><p>活的当我需要做排序的时候在去选择的<code>java.util.Comparator</code>接口完成。</p><p>那么我们采用的<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>这个方法完成的排序，实际上要求了被排序的类型需要实现</p><p>Comparable接口完成比较的功能，在String类型上如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>String类实现了这个接口，并完成了比较规则的定义，但是这样就把这种规则写死了，那比如我想要字符串按照第一个字符</p><p>降序排列，那么这样就要修改String的源代码</p><h5 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h5><p>public static <t> void sort(List<t> list，Comparator&lt;? super T&gt; )`涉及到了Comparator这个接口，位于位于java.util包</t></t></p><p>下，该接口代表一个比较器，比较器具有可比性！顾名思义就是做排序的，那么比较的方法就是：</p><ul><li><p><code>public int compare(String o1, String o2)</code>：比较其两个参数的顺序。</p><blockquote><p>两个对象比较的结果有三种：大于，等于，小于。</p><p>如果要按照升序排序，<br>则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）<br>如果要按照降序排序<br>则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p></blockquote></li></ul><p>操作如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// o1 - o2 为降序，反之为升序</span></span><br><span class="line">        <span class="keyword">return</span> o2.charAt(<span class="number">0</span>) - o1.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sba, nba, cba, aba]</span><br></pre></td></tr></table></figure><h5 id="简述Comparable和Comparator两个接口的区别"><a href="#简述Comparable和Comparator两个接口的区别" class="headerlink" title="简述Comparable和Comparator两个接口的区别"></a>简述Comparable和Comparator两个接口的区别</h5><p><strong>Comparable</strong>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的compareTo方法被称为它</p><p>的自然比较方法。只能在类中实现compareTo()一次，不能经常修改类的代码实现自己想要的排序。实现此接口的对象列表</p><p>（和数组）可以通过Collections.sort（和Arrays.sort）进行自动排序，对象可以用作有序映射中的键或有序集合中的元素，</p><p>无需指定比较器。</p><p><strong>Comparator</strong>强行对某个对象进行整体排序。可以将Comparator 传递给sort方法（如Collections.sort或 Arrays.sort），从</p><p>而允许在排序顺序上实现精确控制。还可以使用Comparator来控制某些数据结构（如有序set或有序映射）的顺序，或者为</p><p>那些没有自然顺序的对象collection提供排序。</p><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>一一对应的关系，叫做<strong>映射</strong>。Java提供了专门的集合来存放这种关系的对象，即<code>java.util.Map</code>接口。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218224257-218245.bmp" alt></p><ul><li><code>Collection</code>中的集合，元素是孤立存在的，向集合中存储元素采用一个个元素的方式存储。</li><li><code>Map</code>中的集合，元素是成对存在的。每个元素由键与值两部分组成，通过键可以找对所对应的值。</li><li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li><li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li></ul><h3 id="常用子类"><a href="#常用子类" class="headerlink" title="常用子类"></a>常用子类</h3><ul><li><p><strong>HashMap&lt;K,V&gt;</strong>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要</p><p>重写键的hashCode()方法、equals()方法。</p></li><li><p><strong>LinkedHashMap&lt;K,V&gt;</strong>：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表</p><p>结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、</p><p>equals()方法。</p></li></ul><blockquote><p>tips：Map接口中的集合有两个泛型变量&lt;K,V&gt;，两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可以不同。</p></blockquote><h3 id="Map接口中的常用方法"><a href="#Map接口中的常用方法" class="headerlink" title="Map接口中的常用方法"></a>Map接口中的常用方法</h3><p>Map接口中定义了很多方法，常用的如下：</p><ul><li><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</li><li><code>public V remove(Object key)</code>: 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li><li><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</li><li><code>boolean containsKey(Object key)</code> 判断集合中是否包含指定的键。</li><li><code>boolean containsValue(Object value)</code> 判断集合中是否包含指定的值。</li><li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><blockquote><p>tips:使用put方法时</p><ul><li><p>若指定的键(key)在集合中没有，返回null，并把指定的键值添加到集合中； </p></li><li><p>若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。 </p></li></ul></blockquote><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="遍历键找值方式"><a href="#遍历键找值方式" class="headerlink" title="遍历键找值方式"></a>遍历键找值方式</h4><p>键找值方式：即通过元素中的键，获取键所对应的值</p><p>分析步骤：</p><ol><li>获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键——<code>keyset()</code></li><li>遍历键的Set集合，得到每一个键。</li><li>根据键，获取键所对应的值。方法提示:<code>get(K key)</code></li></ol><h4 id="Entry键值对对象"><a href="#Entry键值对对象" class="headerlink" title="Entry键值对对象"></a>Entry键值对对象</h4><p><code>Map</code>中一对对象又称做<code>Map</code>中的一个<code>Entry(项)</code>。<code>Entry</code>将键值对的对应关系封装成了键值对对象</p><p> 既然Entry表示了一对键和值，那么也同样提供了获取对应键和对应值得方法：</p><ul><li><code>public K getKey()</code>：获取Entry对象中的键。</li><li><code>public V getValue()</code>：获取Entry对象中的值。</li></ul><p>在Map集合中也提供了获取所有Entry对象的方法：</p><ul><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><p>操作步骤与图解：</p><ol><li><p>获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示:<code>entrySet()</code>。</p></li><li><p>遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。</p></li><li><p>通过键值对(Entry)对象，获取Entry对象中的键与值。  方法提示:<code>getkey() getValue()</code>     </p></li></ol><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218224351-656126.bmp" alt></p><blockquote><p>tips：Map集合不能直接使用迭代器或者foreach进行遍历。但是转成Set之后就可以使用了。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><strong>需求：</strong></p><p>计算一个字符串中每个字符出现次数。</p><p><strong>分析：</strong></p><ol><li>获取一个字符串对象</li><li>创建一个Map集合，键代表字符，值代表次数。</li><li>遍历字符串得到每个字符。</li><li>判断Map中是否有该键。</li><li>如果没有，第一次出现，存储次数为1；如果有，则说明已经出现过，获取到对应的值进行++，再次存储。     </li><li>打印最终结果</li></ol><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//友情提示</span></span><br><span class="line">        System.out.println(<span class="string">"请录入一个字符串:"</span>);</span><br><span class="line">        String line = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">        <span class="comment">// 定义 每个字符出现次数的方法</span></span><br><span class="line">        findChar(line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findChar</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1:创建一个集合 存储  字符 以及其出现的次数</span></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="comment">//2:遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = line.charAt(i);</span><br><span class="line">            <span class="comment">//判断 该字符 是否在键集中</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(c)) &#123;<span class="comment">//说明这个字符没有出现过</span></span><br><span class="line">                <span class="comment">//那就是第一次</span></span><br><span class="line">                map.put(c, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先获取之前的次数</span></span><br><span class="line">                Integer count = map.get(c);</span><br><span class="line">                <span class="comment">//count++;</span></span><br><span class="line">                <span class="comment">//再次存入  更新</span></span><br><span class="line">                map.put(c, ++count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合综合案例"><a href="#集合综合案例" class="headerlink" title="集合综合案例"></a>集合综合案例</h2><h3 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h3><p>用collection来实现简单的斗地主</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1: 准备牌操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//1.1 创建牌盒 将来存储牌面的 </span></span><br><span class="line">        ArrayList&lt;String&gt; pokerBox = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//1.2 创建花色集合</span></span><br><span class="line">        ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.3 创建数字集合</span></span><br><span class="line">        ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.4 分别给花色 以及 数字集合添加元素</span></span><br><span class="line">        colors.add(<span class="string">"♥"</span>);</span><br><span class="line">        colors.add(<span class="string">"♦"</span>);</span><br><span class="line">        colors.add(<span class="string">"♠"</span>);</span><br><span class="line">        colors.add(<span class="string">"♣"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            numbers.add(i+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        numbers.add(<span class="string">"J"</span>);</span><br><span class="line">        numbers.add(<span class="string">"Q"</span>);</span><br><span class="line">        numbers.add(<span class="string">"K"</span>);</span><br><span class="line">        numbers.add(<span class="string">"A"</span>);</span><br><span class="line">        <span class="comment">//1.5 创造牌  拼接牌操作</span></span><br><span class="line">        <span class="comment">// 拿出每一个花色  然后跟每一个数字 进行结合  存储到牌盒中</span></span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="comment">//color每一个花色 </span></span><br><span class="line">            <span class="comment">//遍历数字集合</span></span><br><span class="line">            <span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line">                <span class="comment">//结合</span></span><br><span class="line">                String card = color+number;</span><br><span class="line">                <span class="comment">//存储到牌盒中</span></span><br><span class="line">                pokerBox.add(card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.6大王小王</span></span><br><span class="line">        pokerBox.add(<span class="string">"小☺"</span>);</span><br><span class="line">        pokerBox.add(<span class="string">"大☠"</span>);  </span><br><span class="line">        <span class="comment">// System.out.println(pokerBox);</span></span><br><span class="line">        <span class="comment">//洗牌 是不是就是将  牌盒中 牌的索引打乱 </span></span><br><span class="line">        <span class="comment">// Collections类  工具类  都是 静态方法</span></span><br><span class="line">        <span class="comment">// shuffer方法   </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * static void shuffle(List&lt;?&gt; list) </span></span><br><span class="line"><span class="comment">         *     使用默认随机源对指定列表进行置换。 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//2:洗牌</span></span><br><span class="line">        Collections.shuffle(pokerBox);</span><br><span class="line">        <span class="comment">//3 发牌</span></span><br><span class="line">        <span class="comment">//3.1 创建 三个 玩家集合  创建一个底牌集合</span></span><br><span class="line">        ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历 牌盒  必须知道索引   </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokerBox.size();i++)&#123;</span><br><span class="line">            <span class="comment">//获取 牌面</span></span><br><span class="line">            String card = pokerBox.get(i);</span><br><span class="line">            <span class="comment">//留出三张底牌 存到 底牌集合中</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;<span class="comment">//存到底牌集合中</span></span><br><span class="line">                dipai.add(card);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//玩家1   %3  ==0</span></span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                  player1.add(card);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;<span class="comment">//玩家2</span></span><br><span class="line">                  player2.add(card);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//玩家3</span></span><br><span class="line">                  player3.add(card);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//看看</span></span><br><span class="line">        System.out.println(<span class="string">"令狐冲："</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">"田伯光："</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">"绿竹翁："</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">"底牌："</span>+dipai);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200218224430-981816.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1组装54张扑克牌</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 1.1 创建Map集合存储</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; pokerMap = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 1.2 创建 花色集合 与 数字集合</span></span><br><span class="line">        ArrayList&lt;String&gt; colors = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3 存储 花色 与数字</span></span><br><span class="line">        Collections.addAll(colors, <span class="string">"♦"</span>, <span class="string">"♣"</span>, <span class="string">"♥"</span>, <span class="string">"♠"</span>);</span><br><span class="line">        Collections.addAll(numbers, <span class="string">"2"</span>, <span class="string">"A"</span>, <span class="string">"K"</span>, <span class="string">"Q"</span>, <span class="string">"J"</span>, <span class="string">"10"</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"7"</span>, <span class="string">"6"</span>, <span class="string">"5"</span>, <span class="string">"4"</span>, <span class="string">"3"</span>);</span><br><span class="line">        <span class="comment">// 设置 存储编号变量</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        pokerMap.put(count++, <span class="string">"大王"</span>);</span><br><span class="line">        pokerMap.put(count++, <span class="string">"小王"</span>);</span><br><span class="line">        <span class="comment">// 1.4 创建牌 存储到map集合中</span></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                String card = color + number;</span><br><span class="line">                pokerMap.put(count++, card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 2 将54张牌顺序打乱</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 取出编号 集合</span></span><br><span class="line">        Set&lt;Integer&gt; numberSet = pokerMap.keySet();</span><br><span class="line">        <span class="comment">// 因为要将编号打乱顺序 所以 应该先进行转换到 list集合中</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numberList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        numberList.addAll(numberSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打乱顺序</span></span><br><span class="line">        Collections.shuffle(numberList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 完成三个玩家交替摸牌，每人17张牌，最后三张留作底牌</span></span><br><span class="line">        <span class="comment">// 3.1 发牌的编号</span></span><br><span class="line">        <span class="comment">// 创建三个玩家编号集合 和一个 底牌编号集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; noP1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; noP2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; noP3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; dipaiNo = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.2发牌的编号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 获取该编号</span></span><br><span class="line">            Integer no = numberList.get(i);</span><br><span class="line">            <span class="comment">// 发牌</span></span><br><span class="line">            <span class="comment">// 留出底牌</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">51</span>) &#123;</span><br><span class="line">                dipaiNo.add(no);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    noP1.add(no);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    noP2.add(no);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    noP3.add(no);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 查看三人各自手中的牌（按照牌的大小排序）、底牌</span></span><br><span class="line">        <span class="comment">// 4.1 对手中编号进行排序</span></span><br><span class="line">        Collections.sort(noP1);</span><br><span class="line">        Collections.sort(noP2);</span><br><span class="line">        Collections.sort(noP3);</span><br><span class="line">        Collections.sort(dipaiNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.2 进行牌面的转换</span></span><br><span class="line">        <span class="comment">// 创建三个玩家牌面集合 以及底牌牌面集合</span></span><br><span class="line">        ArrayList&lt;String&gt; player1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.3转换</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP1) &#123;</span><br><span class="line">            <span class="comment">// 4.4 根据编号找到 牌面 pokerMap</span></span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            <span class="comment">// 添加到对应的 牌面集合中</span></span><br><span class="line">            player1.add(card);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP2) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            player2.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : noP3) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            player3.add(card);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : dipaiNo) &#123;</span><br><span class="line">            String card = pokerMap.get(i);</span><br><span class="line">            dipai.add(card);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.5 查看</span></span><br><span class="line">        System.out.println(<span class="string">"令狐冲："</span>+player1);</span><br><span class="line">        System.out.println(<span class="string">"石破天："</span>+player2);</span><br><span class="line">        System.out.println(<span class="string">"鸠摩智："</span>+player3);</span><br><span class="line">        System.out.println(<span class="string">"底牌："</span>+dipai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h3><p>集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成Object类型。</p><p>当我们在取出每一个对象进行相应的操作时，必须采用类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">coll.add(<span class="string">"abc"</span>);</span><br><span class="line">coll.add(<span class="string">"itcast"</span>);</span><br><span class="line">coll.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class="line">Iterator it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"><span class="comment">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class="line">String str = (String) it.next();</span><br><span class="line">System.out.println(str.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序在运行时发生了问题<strong>java.lang.ClassCastException</strong>。                                                                                                                                                   </p><p>Collection虽然可以存储各种对象，但实际上通常Collection只存储同一类型对象</p><ul><li><strong>泛型</strong>：可以在类或方法中预支地使用未知的类型。</li></ul><blockquote><p>tips:一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。</p></blockquote><h3 id="使用泛型的好处"><a href="#使用泛型的好处" class="headerlink" title="使用泛型的好处"></a>使用泛型的好处</h3><ul><li>将运行时期的ClassCastException，转移到了编译时期变成了编译失败。</li><li>避免了类型强转的麻烦。</li></ul><p>通过我们如下代码体验一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"itcast"</span>);</span><br><span class="line"><span class="comment">// list.add(5);//当集合明确类型后，存放类型不一致就会编译报错</span></span><br><span class="line"><span class="comment">// 集合已经明确具体存放的元素类型，迭代器也同样会知道具体遍历元素类型</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String str = it.next();</span><br><span class="line">    <span class="comment">//当使用Iterator&lt;String&gt;控制元素类型后，就不需要强转了。获取到的元素就是String类型</span></span><br></pre></td></tr></table></figure><blockquote><p>tips:泛型是数据类型的一部分，我们将类名与泛型合并一起看做数据类型。</p></blockquote><h3 id="泛型的定义与使用"><a href="#泛型的定义与使用" class="headerlink" title="泛型的定义与使用"></a>泛型的定义与使用</h3><h4 id="含有泛型的类"><a href="#含有泛型的类" class="headerlink" title="含有泛型的类"></a>含有泛型的类</h4><h5 id="定义格式："><a href="#定义格式：" class="headerlink" title="定义格式："></a>定义格式：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，API中的ArrayList集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型： 即什么时候确定泛型。</p><h5 id="在创建对象的时候确定泛型"><a href="#在创建对象的时候确定泛型" class="headerlink" title="在创建对象的时候确定泛型"></a>在创建对象的时候确定泛型</h5><p><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><h4 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h4><h5 id="定义格式：-1"><a href="#定义格式：-1" class="headerlink" title="定义格式："></a>定义格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">    System.out.println(mvp.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function">MVP <span class="title">show2</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用方法时，确定泛型的类型"><a href="#调用方法时，确定泛型的类型" class="headerlink" title="调用方法时，确定泛型的类型"></a>调用方法时，确定泛型的类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">MyGenericMethod mm = <span class="keyword">new</span> MyGenericMethod();</span><br><span class="line"><span class="comment">// 演示看方法提示</span></span><br><span class="line">mm.show(<span class="string">"aaa"</span>);</span><br><span class="line">mm.show(<span class="number">123</span>);</span><br><span class="line">mm.show(<span class="number">12.45</span>);</span><br></pre></td></tr></table></figure><h4 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h4><h5 id="定义格式：-2"><a href="#定义格式：-2" class="headerlink" title="定义格式："></a>定义格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface接口名&lt;代表泛型的变量&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用格式："><a href="#使用格式：" class="headerlink" title="使用格式："></a>使用格式：</h5><h6 id="定义类时确定泛型的类型"><a href="#定义类时确定泛型的类型" class="headerlink" title="定义类时确定泛型的类型"></a>定义类时确定泛型的类型</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，泛型E的值就是String类型。</p><h6 id="始终不确定泛型的类型，直到创建对象时，确定泛型的类型"><a href="#始终不确定泛型的类型，直到创建对象时，确定泛型的类型" class="headerlink" title="始终不确定泛型的类型，直到创建对象时，确定泛型的类型"></a>始终不确定泛型的类型，直到创建对象时，确定泛型的类型</h6><p> 例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp2</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyImp2&lt;String&gt;  my = <span class="keyword">new</span> MyImp2&lt;String&gt;();  </span><br><span class="line">        my.add(<span class="string">"aa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><p>当使用泛型类或者接口做参数接收数据时，泛型类型不确定，可以通过通配符&lt;?&gt;表示。</p><p>但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h4 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h4><p>此时只能接受数据,不能往该集合中存储数据。</p><p>举个例子大家理解使用即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Intger&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    getElement(list1);</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    getElement(list2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure><blockquote><p>tips:泛型不存在继承关系 Collection<object> list = new ArrayList<string>();这种是错误的。</string></object></p></blockquote><h4 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h4><p>JAVA的泛型中可以指定一个泛型的<strong>上限</strong>和<strong>下限</strong>。</p><p><strong>泛型的上限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? extends 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其子类</code></li></ul><p><strong>泛型的下限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其父类型</code></li></ul><p>比如：现已知Object类，String 类，Number类，Integer类，其中Number是Integer的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">    Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    </span><br><span class="line">    getElement(list1);</span><br><span class="line">    getElement(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement(list3);</span><br><span class="line">    getElement(list4);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">    getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list3);</span><br><span class="line">    getElement2(list4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，可以对其简化成如下格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型... 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>其实这个书写完全等价与</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型[] 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>只是后面这种定义，在调用时必须传递数组，而前者可以直接传递数据即可</p><p><strong>JDK1.5</strong>以后。出现了简化操作。<strong>…</strong> 用在参数上，称之为可变参数。</p><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际</p><p>参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，</p><p>自动完成了</p><p>多个方法符合条件时，优先调用不含可变参数的方法</p><p>代码演示：    </p><blockquote><p><strong>注意：如果在方法书写时，这个方法拥有多参数，参数中包含可变参数，可变参数一定要写在参数列表的末尾位置</strong>。</p><p>可以直接传入数组，但以数组作为形参时不可传入可变参数</p></blockquote><h2 id="JDK9对集合优化"><a href="#JDK9对集合优化" class="headerlink" title="JDK9对集合优化"></a>JDK9对集合优化</h2><p>通常，我们在代码中创建一个集合（例如，List 或 Set ），并直接用一些元素填充它。 实例化集合，几个 add方法 调用，</p><p>使得代码重复。</p><p> Java 9，添加了几种集合工厂方法,更方便创建少量元素的集合、map实例。新的List、Set、Map的静态工厂方法可以更方</p><p>便地创建集合的<strong>不可变实例</strong>。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Set&lt;String&gt; str1=Set.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);  </span><br><span class="line"><span class="comment">//str1.add("c");这里编译的时候不会错，但是执行的时候会报错，因为是不可变的集合  </span></span><br><span class="line">System.out.println(str1);  </span><br><span class="line">Map&lt;String,Integer&gt; str2=Map.of(<span class="string">"a"</span>,<span class="number">1</span>,<span class="string">"b"</span>,<span class="number">2</span>);  </span><br><span class="line">System.out.println(str2);  </span><br><span class="line">List&lt;String&gt; str3=List.of(<span class="string">"a"</span>,<span class="string">"b"</span>);  </span><br><span class="line">System.out.println(str3);</span><br></pre></td></tr></table></figure><p>需要注意以下两点：</p><blockquote><p>1:of()方法只是Map，List，Set这三个接口的静态方法，其父类接口和子类实现并没有这类方法</p><p>2:<strong>返回的集合是不可变的</strong>；</p></blockquote><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li></ul><p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。</p><p>Java处理异常的方式是<strong>中断处理</strong>。</p><blockquote><p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p></blockquote><h3 id="体系"><a href="#体系" class="headerlink" title="体系"></a>体系</h3><p>异常机制其实是帮助我们<strong>找到</strong>程序中的问题，平常所说的异常指<code>java.lang.Exception</code>。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092432-251086.png" alt></p><p><strong>Throwable体系：</strong></p><ul><li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免</li><li><strong>Exception</strong>:表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的</li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p><p>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</p></li><li><p><code>public String getMessage()</code>:获取发生异常的原因。</p><p>提示给用户的时候,就提示错误原因。</p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092440-286569.bmp" alt></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>我们平常说的异常就是指Exception，因为这类异常一旦出现，我们就要对代码进行更正</p><p><strong>异常(Exception)的分类</strong></p><ul><li><strong>编译时期异常</strong>:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)</li><li><strong>运行时期异常</strong>:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数学异常)</li></ul><p>​    <img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092148-834172.png" alt></p><h3 id="产生过程解析"><a href="#产生过程解析" class="headerlink" title="产生过程解析"></a>产生过程解析</h3><p> <img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092154-791954.png" alt></p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h4 id="抛出异常throw"><a href="#抛出异常throw" class="headerlink" title="抛出异常throw"></a>抛出异常throw</h4><p>在java中，提供了一个<strong>throw</strong>关键字，它用来抛出一个指定的异常对象。那么，抛出一个异常具体如何操作呢？</p><ol><li><p>创建一个异常对象。封装一些提示信息(信息可以自己编写)。</p></li><li><p>需要将这个异常对象告知给调用者。通过关键字throw就可以完成</p><p>throw<strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，<strong>并结束当前方法的执行</strong>。</p></li></ol><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类名(参数);</span><br></pre></td></tr></table></figure><p> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"要访问的arr数组不存在"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"该索引在数组中不存在，已超出范围"</span>);</span><br></pre></td></tr></table></figure><p>学习完抛出异常的格式后，我们通过下面程序演示下throw的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index)</span></span>&#123; </span><br><span class="line">   <span class="comment">//判断  索引是否越界</span></span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         判断条件如果满足，当执行完throw抛出异常对象后，方法已经无法继续运算。</span></span><br><span class="line"><span class="comment">         这时就会结束当前方法的执行，并将异常告知给调用者。这时就需要通过异常来解决。 </span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"哥们，角标越界了~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> element = arr[index];</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明异常throws"><a href="#声明异常throws" class="headerlink" title="声明异常throws"></a>声明异常throws</h4><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了编译时异常，而没有捕获处理，那么必须通过throws进行声明，让调用者去处理。</p><p><strong>声明异常格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2…&#123;   &#125;</span><br></pre></td></tr></table></figure><p>throws用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在throws后面可以写多个异常类，用逗号隔开。</p><h4 id="捕获异常try…catch"><a href="#捕获异常try…catch" class="headerlink" title="捕获异常try…catch"></a>捕获异常try…catch</h4><p>如果异常出现的话,会立刻终止程序</p><p>两种处理异常的方法：</p><ol><li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)</li><li>在方法中使用try-catch的语句块来处理异常。</li></ol><ul><li><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</li></ul><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型  e)&#123;</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p><p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><h4 id="finally-代码块"><a href="#finally-代码块" class="headerlink" title="finally 代码块"></a>finally 代码块</h4><p><strong>finally</strong>：无论异常是否发生，在finally代码块中存放的代码都是一定会被执行的，常用于资源的释放</p><p>比如在我们之后学习的IO流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。</p><blockquote><p>当只有在try或者catch中调用退出JVM的相关方法,此时finally才不会执行,否则finally永远会执行。</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>多个异常使用捕获又该如何处理呢？</p><ol><li>多个异常分别处理</li><li>多个异常一次捕获，多次处理。(<strong>推荐)</strong></li><li>多个异常一次捕获一次处理。</li></ol><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">try</span>&#123;</span><br><span class="line">&gt;      编写可能会出现异常的代码</span><br><span class="line">&gt; &#125;<span class="keyword">catch</span>(异常类型A  e)&#123;  当<span class="keyword">try</span>中出现A类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">&gt;      处理异常的代码</span><br><span class="line">&gt;      <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&gt; &#125;<span class="keyword">catch</span>(异常类型B  e)&#123;  当<span class="keyword">try</span>中出现B类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">&gt;      处理异常的代码</span><br><span class="line">&gt;      <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</p></li><li><p>如果finally有return语句,永远返回finally中的结果,<strong>避免该情况.</strong> </p></li><li><p>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或父类异常的子类或不抛出异常。</p></li><li><p>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常，此时子类产生异常，只能捕获处理，不能声明抛出</p></li></ul><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p><strong>什么是自定义异常类:</strong></p><p>在开发中根据自己业务的异常情况来定义异常类.</p><p>自定义一个业务逻辑异常: <strong>RegisterException</strong>。一个注册异常类。</p><p><strong>异常类如何定义:</strong></p><ol><li>编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li><li>运行期异常:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li><li>命名：XxxException</li></ol><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p>要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><p>首先定义一个登陆异常类RegisterException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 表示异常提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟数据库中已存在账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] names = &#123;<span class="string">"bill"</span>,<span class="string">"hill"</span>,<span class="string">"jill"</span>&#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;     </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">            checkUsername(<span class="string">"nill"</span>);</span><br><span class="line">            System.out.println(<span class="string">"注册成功"</span>);<span class="comment">//如果没有异常就是注册成功</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(RegisterException e)&#123;</span><br><span class="line">            <span class="comment">//处理异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断当前注册账号是否存在</span></span><br><span class="line">    <span class="comment">//因为是编译期异常，又想调用者去处理 所以声明该异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(String uname)</span> <span class="keyword">throws</span> LoginException</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.equals(uname))&#123;<span class="comment">//如果名字在这里面 就抛出登陆异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">"亲"</span>+name+<span class="string">"已经被注册了！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><h3 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h3><ol><li>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</li><li>白盒测试：需要写代码的。关注程序具体的执行流程。</li></ol><h3 id="Junit使用"><a href="#Junit使用" class="headerlink" title="Junit使用"></a>Junit使用</h3><p><strong>白盒测试</strong></p><ul><li>步骤：<ol><li>定义一个测试类(测试用例)<ul><li>建议：<ul><li>测试类名：被测试的类名Test        CalculatorTest</li><li>包名：xxx.xxx.xx.test        cn.itcast.test</li></ul></li></ul></li></ol></li></ul><ol start="2"><li>定义测试方法：可以独立运行<pre><code>* 建议：    * 方法名：test测试的方法名        testAdd()      * 返回值：void    * 参数列表：空参</code></pre><ol start="3"><li>给方法加@Test</li></ol></li><li>导入junit依赖环境</li></ol><h3 id="判定结果"><a href="#判定结果" class="headerlink" title="判定结果"></a>判定结果</h3><ul><li>红色：失败</li><li>绿色：成功</li><li>用断言操作来处理结果<ul><li>Assert.assertEquals(期望的结果,运算的结果);</li></ul></li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>@Before:<ul><li>修饰的方法会在测试方法之前被自动执行，申请资源</li></ul></li><li>@After:<ul><li>修饰的方法会在测试方法执行之后自动被执行，释放资源</li></ul></li></ul><h2 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">* 框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</span><br><span class="line">* 反射：将类的各个组成部分封装为其他对象，这就是反射机制</span><br><span class="line">* 好处：</span><br><span class="line"><span class="number">1</span>. 可以在程序运行过程中，操作这些对象。</span><br><span class="line"><span class="number">2</span>. 可以解耦，提高程序的可扩展性。</span><br><span class="line">* 获取Class对象的方式：</span><br><span class="line"><span class="number">1</span>. Class.forName(<span class="string">"全类名"</span>)：将字节码文件加载进内存，返回Class对象</span><br><span class="line">* 多用于配置文件，将类名定义在配置文件中。读取文件，加载类</span><br><span class="line"><span class="number">2</span>. 类名.class：通过类名的属性<span class="class"><span class="keyword">class</span>获取</span></span><br><span class="line"><span class="class">* 多用于参数的传递</span></span><br><span class="line"><span class="class">3. 对象.<span class="title">getClass</span>()：<span class="title">getClass</span>()方法在<span class="title">Object</span>类中定义着。</span></span><br><span class="line"><span class="class">* 多用于对象的获取字节码的方式</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">* 结论：</span></span><br><span class="line"><span class="class">同一个字节码文件(*.<span class="title">class</span>)在一次程序运行过程中，只会被加载一次，</span></span><br><span class="line"><span class="class">不论通过哪一种方式获取的<span class="title">Class</span>对象都是同一个。</span></span><br><span class="line"><span class="class">* <span class="title">Class</span>对象功能：</span></span><br><span class="line"><span class="class">* 获取功能：</span></span><br><span class="line"><span class="class">1. 获取成员变量们</span></span><br><span class="line">* Field[] getFields() ：获取所有public修饰的成员变量</span><br><span class="line">* <span class="function">Field <span class="title">getField</span><span class="params">(String name)</span>   获取指定名称的 <span class="keyword">public</span>修饰的成员变量</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* Field[] <span class="title">getDeclaredFields</span><span class="params">()</span>  获取所有的成员变量，不考虑修饰符</span></span><br><span class="line"><span class="function">* Field <span class="title">getDeclaredField</span><span class="params">(String name)</span>  </span></span><br><span class="line"><span class="function">2. 获取构造方法们</span></span><br><span class="line"><span class="function">* Constructor&lt;?&gt;[] <span class="title">getConstructors</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">* Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function">* Constructor&lt;?&gt;[] <span class="title">getDeclaredConstructors</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">3. 获取成员方法们：</span></span><br><span class="line"><span class="function">* Method[] <span class="title">getMethods</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">* Method <span class="title">getMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* Method[] <span class="title">getDeclaredMethods</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">* Method <span class="title">getDeclaredMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. 获取全类名</span></span><br><span class="line"><span class="function">* String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">* Field：成员变量</span></span><br><span class="line"><span class="function">* 操作：</span></span><br><span class="line"><span class="function">1. 设置值</span></span><br><span class="line"><span class="function">* <span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span>  </span></span><br><span class="line"><span class="function">2. 获取值</span></span><br><span class="line"><span class="function">* <span class="title">get</span><span class="params">(Object obj)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. 忽略访问权限修饰符的安全检查</span></span><br><span class="line"><span class="function">* <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span>:暴力反射</span></span><br><span class="line"><span class="function">* Constructor:构造方法</span></span><br><span class="line"><span class="function">* 创建对象：</span></span><br><span class="line"><span class="function">* T <span class="title">newInstance</span><span class="params">(Object... initargs)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 如果使用空参数构造方法创建对象，操作可以简化为Class对象的newInstance方法</span></span><br><span class="line"><span class="function">* Method：方法对象</span></span><br><span class="line"><span class="function">* 执行方法：</span></span><br><span class="line"><span class="function">* Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 获取方法名称：</span></span><br><span class="line"><span class="function">* String getName:获取方法名</span></span><br><span class="line"><span class="function">* 案例：</span></span><br><span class="line"><span class="function">* 需求：写一个"框架"，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，</span></span><br><span class="line"><span class="function">   并且执行其中任意方法</span></span><br><span class="line"><span class="function">* 实现：</span></span><br><span class="line"><span class="function">1. 配置文件</span></span><br><span class="line"><span class="function">2. 反射</span></span><br><span class="line"><span class="function">* 步骤：</span></span><br><span class="line"><span class="function">1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中</span></span><br><span class="line"><span class="function">2. 在程序中加载读取配置文件</span></span><br><span class="line"><span class="function">3. 使用反射技术来加载类文件进内存</span></span><br><span class="line"><span class="function">4. 创建对象</span></span><br><span class="line"><span class="function">5. 执行方法</span></span><br><span class="line"><span class="function">        <span class="comment">//1.加载配置文件</span></span></span><br><span class="line"><span class="function">        <span class="comment">//1.1创建Properties对象</span></span></span><br><span class="line"><span class="function">        Properties pro </span>= <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>概念：说明程序的。给计算机看的</p></li><li><p>注释：用文字描述程序的。给程序员看的</p></li><li><p>定义：注解（Annotation），也叫元数据。一种代码级别的说明，与类、接口、枚举是在同一个层次。JDK1.5之后的新</p><p>特性,它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释</p></li><li><p>作用分类：</p><blockquote><p>编写文档：通过代码里标识的注解生成文档【生成文档doc文档】</p><p>代码分析：通过代码里标识的注解对代码进行分析【使用反射】</p><p>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p></blockquote></li><li><p>JDK中预定义的一些注解</p><blockquote><p>@Override：检测被该注解标注的方法是否是继承自父类(接口)的</p><p>@Deprecated：该注解标注的内容，表示已过时</p><p>@SuppressWarnings：压制警告</p><ul><li>一般传递参数all  @SuppressWarnings(“all”)</li></ul></blockquote></li><li><p>自定义注解</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元注解</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">属性列表;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 本质：注解本质上就是一个接口，该接口默认继承Annotation接口</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public interface MyAnno extends java.lang.annotation.Annotation &#123;&#125;</span><br></pre></td></tr></table></figure><pre><code>* 属性：接口中的抽象方法    * 要求：        1. 属性的返回值类型有下列取值            &gt; 基本数据类型        &gt;            &gt; String            &gt;            &gt; 枚举&gt;            &gt; 注解            &gt;            &gt; 以上类型的数组    2. 定义了属性，在使用时需要给属性赋值            &gt; 如果定义属性时，使用default关键字给属性默认初始化值，            &gt;            &gt; 如果只有一个属性需要赋值且属性名是value，则value可以省略，直接定义值即可。            &gt;            &gt; 数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略* 元注解：用于描述注解的注解    * @Target：描述注解能够作用的位置        * ElementType取值：            &gt; TYPE：可以作用于类上            &gt;            &gt; METHOD：可以作用于方法上            &gt;            &gt; FIELD：可以作用于成员变量上    * @Retention：描述注解被保留的阶段        &gt; @Retention(RetentionPolicy.SOURCE)：        &gt;         当前被描述的注解，仅保留在源文件中        &gt; @Retention(RetentionPolicy.CLASS)：        &gt;         当前被描述的注解，会保留到class字节码文件中，加载到JVM时丢弃        &gt; @Retention(RetentionPolicy.RUNTIME)：        &gt;         当前被描述的注解，会保留到class字节码文件中，并被JVM读取到    * @Documented：描述注解是否被抽取到api文档中    * @Inherited：描述注解是否被子类继承</code></pre><ul><li><p>在程序使用(解析)注解：获取注解中定义的属性值</p><ol><li><p>获取注解定义的位置的对象  （Class，Method,Field）</p></li><li><p>获取指定的注解</p><ul><li><p>getAnnotation(Class)<br>其实就是在内存中生成了一个该注解接口的子类实现对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProImpl</span> <span class="keyword">implements</span> <span class="title">Pro</span></span>&#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">className</span><span class="params">()</span></span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">"cn.itcast.annotation.Demo1"</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">methodName</span><span class="params">()</span></span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">"show"</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用注解中的抽象方法获取配置的属性值</p></li></ol></li><li><p>案例：简单的测试框架</p></li><li><p>小结：</p><blockquote><p>以后大多数时候，我们会使用注解，而不是自定义注解</p><p>注解给谁用？</p><ol><li>编译器</li><li>给解析程序用</li></ol><p>注解不是程序的一部分，可以理解为注解就是一个标签</p></blockquote></li></ul><h2 id="学习项目流程"><a href="#学习项目流程" class="headerlink" title="学习项目流程"></a>学习项目流程</h2><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200307104825827.png" alt="image-20200307104825827"></p><p>第一遍：看视频确认理解后开始自己实现</p><p>​    遇到问题先独立思考，实在不行再回头看视频</p><p>第二遍：将自己写的与源码进行对比，分析优缺点</p><p>第三遍：自行独立从头实现一遍</p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200223092839-309487.png" alt></p><p>面向对象过分强调“必须通过对象的形式来做事情”</p><p>函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong>。</p><p>面向对象的思想:</p><p>​    做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</p><p>函数式编程思想:</p><p>​    只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="冗余的Runnable代码"><a href="#冗余的Runnable代码" class="headerlink" title="冗余的Runnable代码"></a>冗余的Runnable代码</h4><p>当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code>类来启动该线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 匿名内部类</span></span><br><span class="line">Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 覆盖重写抽象方法</span></span><br><span class="line">System.out.println(<span class="string">"多线程任务执行！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(task).start(); <span class="comment">// 启动线程</span></span><br></pre></td></tr></table></figure><p><strong>代码分析</strong></p><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容：</p><ul><li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</li><li>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</li><li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li></ul><p>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</p><h4 id="编程思想转换"><a href="#编程思想转换" class="headerlink" title="编程思想转换"></a>编程思想转换</h4><p><strong>做什么，而不是怎么做</strong></p><p><strong>传递一段代码</strong>——这才是我们真正的目的</p><h4 id="Lambda的更优写法"><a href="#Lambda的更优写法" class="headerlink" title="Lambda的更优写法"></a>Lambda的更优写法</h4><p>Lambda：<strong>凡可推导的，都可省略</strong></p><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LambdaRunnable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)).start(); <span class="comment">// 启动线程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回顾匿名内部类"><a href="#回顾匿名内部类" class="headerlink" title="回顾匿名内部类"></a>回顾匿名内部类</h3><h4 id="匿名内部类的好处与弊端"><a href="#匿名内部类的好处与弊端" class="headerlink" title="匿名内部类的好处与弊端"></a>匿名内部类的好处与弊端</h4><p>一方面，匿名内部类可以帮我们<strong>省去实现类的定义</strong>；</p><p>另一方面，匿名内部类的语法——<strong>确实太复杂了！</strong></p><h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p><code>Runnable</code>接口只有一个<code>run</code>方法的定义：</p><ul><li><code>public abstract void run();</code></li></ul><p>即制定了一种做事情的方案（其实就是一个函数）：</p><ul><li><strong>无参数</strong>：不需要任何条件即可执行该方案。</li><li><strong>无返回值</strong>：该方案不产生任何结果。</li><li><strong>代码块</strong>（方法体）：该方案的具体执行步骤。</li></ul><h3 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h3><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p>Lambda表达式的<strong>标准格式</strong>为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数类型 参数名称) -&gt; &#123; 代码语句 &#125;</span><br></pre></td></tr></table></figure><p>格式说明：</p><ul><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li><code>-&gt;</code>是新引入的语法格式，代表指向动作。</li><li>大括号内的语法与传统方法体要求基本一致。</li></ul><h3 id="有参数和返回值"><a href="#有参数和返回值" class="headerlink" title="有参数和返回值"></a>有参数和返回值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求:</span><br><span class="line">    使用数组存储多个Person对象</span><br><span class="line">    对数组中的Person对象使用Arrays的sort方法通过年龄进行升序排序</span><br></pre></td></tr></table></figure><p>下面举例演示<code>java.util.Comparator&lt;T&gt;</code>接口的使用场景代码，其中的抽象方法定义为：</p><ul><li><code>public abstract int compare(T o1, T o2);</code></li></ul><p>当需要对一个对象数组进行排序时，<code>Arrays.sort</code>方法需要一个<code>Comparator</code>接口实例来指定排序的规则。假设有一个<code>Person</code>类，含有<code>String name</code>和<code>int age</code>两个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略构造器、toString方法与Getter Setter </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda写法"><a href="#Lambda写法" class="headerlink" title="Lambda写法"></a>Lambda写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person[] array = &#123;</span><br><span class="line">  <span class="keyword">new</span> Person(<span class="string">"古力娜扎"</span>, <span class="number">19</span>),</span><br><span class="line">  <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>),</span><br><span class="line">  <span class="keyword">new</span> Person(<span class="string">"马尔扎哈"</span>, <span class="number">20</span>) &#125;;</span><br><span class="line"></span><br><span class="line">Arrays.sort(array, (Person a, Person b) -&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a.getAge() - b.getAge();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="省略格式"><a href="#省略格式" class="headerlink" title="省略格式"></a>省略格式</h3><h4 id="可推导即可省略"><a href="#可推导即可省略" class="headerlink" title="可推导即可省略"></a>可推导即可省略</h4><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略</p><h4 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h4><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li><li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ol><h3 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h3><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p><ol><li><p>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。</p></li><li><p>使用Lambda必须具有<strong>上下文推断</strong></p><p>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</p></li></ol><blockquote><p>备注：有且仅有一个抽象方法的接口，称为“<strong>函数式接口</strong>”。</p></blockquote><h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><p>有些场景的代码执行后，结果不一定会被使用，从而造成性能浪费。</p><p>而Lambda表达式是延迟执行的，真正需要时才会执行，可提升性能</p><h3 id="作为参数和返回值"><a href="#作为参数和返回值" class="headerlink" title="作为参数和返回值"></a>作为参数和返回值</h3><p>如果抛开实现原理不说，Java中的Lambda表达式可以被当作是匿名内部类的替代品。</p><p>如果方法的参数是一个函数式接口类型，那么就可以使用Lambda表达式进行替代。使用Lambda表达式作为方法参数，其</p><p>实就是使用函数式接口作为方法参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        startThread(() ‐&gt; System.out.println(<span class="string">"线程任务执行！"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为返回值类似做参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Comparator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">newComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a, b) ‐&gt; b.length() ‐ a.length();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"abc"</span>, <span class="string">"ab"</span>, <span class="string">"abcd"</span> &#125;;</span><br><span class="line">        Arrays.sort(array, newComparator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>函数式接口在Java中是指：有且仅有一个抽象方法的接口。</p><p>而Java中的函数式编程体现就是Lambda，所以函数式接口就是可以适用于Lambda使用的接口</p><p>只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。</p><p><strong>备注</strong>：</p><blockquote><p>“语法糖”是指使用更加方便，但是原理不变的代码语法。例如在遍历集合时使用的for-each语法，其实</p><p>底层的实现原理仍然是迭代器，这便是“语法糖”。从应用层面来讲，Java中的Lambda可以被当做是匿名内部</p><p>类的“语法糖”，但是二者在原理上是不同的。</p></blockquote><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>只要确保接口中有且仅有一个抽象方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 修饰符 <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    [<span class="keyword">public</span> <span class="keyword">abstract</span>] 返回值类型 方法名称(可选参数信息);</span><br><span class="line">    <span class="comment">// 其他非抽象方法内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h3><p>用于检验该类是否满足函数式接口要求</p><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h3><h4 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h4><p>java.util.function.Supplier<t> 接口仅包含一个无参的方法： <code>T get()</code> 。用来获取一个泛型参数指定类型的对象数据。</t></p><p>Supplier 接口是一个<strong>供给型</strong>的接口，其实，说白了就是一个<strong>容器</strong>，可以用来存储数据，然后可以供其他方法使用的这么一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Supplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//① 使用Supplier接口实现方法,只有一个get方法，无参数，返回一个值</span></span><br><span class="line">    Supplier&lt;Integer&gt; supplier = <span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//返回一个随机值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"********************"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//② 使用lambda表达式，</span></span><br><span class="line">    supplier = () -&gt; <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">    System.out.println(<span class="string">"********************"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//③ 使用方法引用</span></span><br><span class="line">    Supplier&lt;Double&gt; supplier2 = Math::random;</span><br><span class="line">    System.out.println(supplier2.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h4><p>java.util.function.Consumer<t> 接口则正好与Supplier接口相反，它不是生产一个数据，而是消费一个数据</t></p><p><code>consumer接口</code>就是一个消费型的接口，通过传入参数，然后输出值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//① 使用consumer接口实现方法</span></span><br><span class="line">    Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Stream&lt;String&gt; stream = Stream.of(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ddd"</span>, <span class="string">"ccc"</span>, <span class="string">"fff"</span>);</span><br><span class="line">    stream.forEach(consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//② 使用lambda表达式，forEach方法需要的就是一个Consumer接口</span></span><br><span class="line">    stream = Stream.of(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ddd"</span>, <span class="string">"ccc"</span>, <span class="string">"fff"</span>);</span><br><span class="line">    Consumer&lt;String&gt; consumer1 = (s) -&gt; System.out.println(s);<span class="comment">//lambda表达式返回的就是一个Consumer接口</span></span><br><span class="line">    stream.forEach(consumer1);</span><br><span class="line">    <span class="comment">//更直接的方式</span></span><br><span class="line">    <span class="comment">//stream.forEach((s) -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//③ 使用方法引用，方法引用也是一个consumer</span></span><br><span class="line">    stream = Stream.of(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ddd"</span>, <span class="string">"ccc"</span>, <span class="string">"fff"</span>);</span><br><span class="line">    Consumer consumer2 = System.out::println;</span><br><span class="line">    stream.forEach(consumer);</span><br><span class="line">    <span class="comment">//更直接的方式</span></span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="andThen"><a href="#andThen" class="headerlink" title="andThen"></a>andThen</h5><p>是默认方法，对一个数据多次消费(处理)时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) ‐&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10ConsumerAndThen</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumeString</span><span class="params">(Consumer&lt;String&gt; one, Consumer&lt;String&gt; two)</span> </span>&#123;</span><br><span class="line">        one.andThen(two).accept(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        consumeString(</span><br><span class="line">            s ‐&gt; System.out.println(s.toUpperCase()),</span><br><span class="line">            s ‐&gt; System.out.println(s.toLowerCase()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Predicate-接口"><a href="#Predicate-接口" class="headerlink" title="Predicate 接口"></a>Predicate 接口</h4><p>Predicate 接口是一个谓词型接口，其实，这个就是一个类似于 bool 类型的判断的接口</p><p>对某种类型的数据进行判断，从而得到一个boolean值结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Predicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//① 使用Predicate接口实现方法,只有一个test方法，传入一个参数，返回一个bool值</span></span><br><span class="line">    Predicate&lt;Integer&gt; predicate = <span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(integer &gt; <span class="number">5</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(predicate.test(<span class="number">6</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//② 使用lambda表达式，</span></span><br><span class="line">    predicate = (t) -&gt; t &gt; <span class="number">5</span>;</span><br><span class="line">    System.out.println(predicate.test(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="and"><a href="#and" class="headerlink" title="and"></a>and</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) ‐&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="or"><a href="#or" class="headerlink" title="or"></a>or</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) ‐&gt; test(t) || other.test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t) ‐&gt; !test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤出数组中性别为女且名字长度为4的人</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPredicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, <span class="string">"马尔扎哈,男"</span>, <span class="string">"赵丽颖,女"</span> &#125;;</span><br><span class="line">        List&lt;String&gt; list = filter(array,</span><br><span class="line">                                   s ‐&gt; <span class="string">"女"</span>.equals(s.split(<span class="string">","</span>)[<span class="number">1</span>]),</span><br><span class="line">                                   s ‐&gt; s.split(<span class="string">","</span>)[<span class="number">0</span>].length() == <span class="number">4</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">filter</span><span class="params">(String[] array, Predicate&lt;String&gt; one, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       Predicate&lt;String&gt; two)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String info : array) &#123;</span><br><span class="line">            <span class="keyword">if</span> (one.and(two).test(info)) &#123;</span><br><span class="line">                list.add(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h4><p>接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//① 使用map方法，泛型的第一个参数是转换前的类型，第二个是转化后的类型</span></span><br><span class="line">    Function&lt;String, Integer&gt; function = <span class="keyword">new</span> Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.length();<span class="comment">//获取每个字符串的长度，并且返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stream = Stream.of(<span class="string">"aaa"</span>, <span class="string">"bbbbb"</span>, <span class="string">"ccccccv"</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = stream.map(function);</span><br><span class="line">    stream1.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p>说到Stream便容易想到I/O Stream，而实际上，谁规定“流”就一定是“IO流”呢？</p><p>在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream概念，用于解决<strong>已有集合类库</strong>既有的弊端</p><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>几乎所有的集合（如 Collection 接口或 Map 接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元素进行</p><p>操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历</p><h4 id="循环遍历的弊端"><a href="#循环遍历的弊端" class="headerlink" title="循环遍历的弊端"></a>循环遍历的弊端</h4><p>Java 8的Lambda让我们可以更加专注于做什么，而不是怎么做，这点此前已经结合内部类进行了对比</p><p>说明</p><blockquote><p>for循环的语法就是“怎么做”</p><p>for循环的循环体才是“做什么”</p></blockquote><p>为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，而并不是从第一个</p><p>到最后一个顺次处理的循环。前者是目的，后者是方式。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ol><li>将集合A根据条件一过滤为子集B；</li><li>然后再根据条件二过滤为子集C。</li></ol><p>##### </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StreamFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line"> </span><br><span class="line">        list.stream()</span><br><span class="line">            .filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>))</span><br><span class="line">            .filter(s ‐&gt; s.length() == <span class="number">3</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流式思想概述"><a href="#流式思想概述" class="headerlink" title="流式思想概述"></a>流式思想概述</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200225101339-260224.png" alt></p><p>这里的 filter 、 map 、 skip 都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法 count执行的时</p><p>候，整个模型才会按照指定策略执行操作。<strong>而这得益于Lambda的延迟执行特性</strong>。</p><p><strong>备注</strong>：</p><ul><li>“Stream流”其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何元素</li></ul><p>Stream（流）是一个来自数据源的元素队列</p><p>元素是特定类型的对象，形成一个队列。</p><p>Java中的Stream并不会存储元素，而是按需计算数据源流的来源。可以是集合，数组等</p><p>Stream操作还有两个基础的特征：</p><ul><li><p>Pipelining: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（ﬂuent style）。</p><p>这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</p></li><li><p>内部迭代： 以前对集合遍历都是通过Iterator或者增强for的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 </p><p>Stream提供了内部迭代的方式，流可以直接调用遍历方法。当使用一个流的时候通常包括三个基本步骤：</p><p><strong>获取一个数据源（source）→ 数据转换→执行操作获取想要的结果</strong></p></li></ul><h3 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h3><p><code>java.util.stream.Stream&lt;T&gt;</code> 是Java 8新加入的最常用的流接口。（这并不是一个函数式接口）</p><p>获取一个流非常简单，有以下几种常用的方式：</p><p>所有的 Collection 集合都可以通过 stream 默认方法获取流；</p><p>Stream 接口的静态方法 of 可以获取数组对应的流。</p><h4 id="根据Collection获取流"><a href="#根据Collection获取流" class="headerlink" title="根据Collection获取流"></a>根据Collection获取流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line"> </span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line"> </span><br><span class="line">        Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream3 = vector.stream();</span><br></pre></td></tr></table></figure><h4 id="根据Map获取流"><a href="#根据Map获取流" class="headerlink" title="根据Map获取流"></a>根据Map获取流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">        Stream&lt;String&gt; valueStream = map.values().stream();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream();</span><br></pre></td></tr></table></figure><h4 id="根据数组获取流"><a href="#根据数组获取流" class="headerlink" title="根据数组获取流"></a>根据数组获取流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        String[] array = &#123; <span class="string">"张无忌"</span>, <span class="string">"张翠山"</span>, <span class="string">"张三丰"</span>, <span class="string">"张一元"</span> &#125;;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line"><span class="comment">//  of 方法的参数其实是一个可变参数，所以支持数组。</span></span><br></pre></td></tr></table></figure><h4 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; parallelStream1 = coll.parallelStream();</span><br><span class="line">Stream&lt;Integer&gt; parallelStream2 = Stream.of(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>).parallel();</span><br></pre></td></tr></table></figure><h3 id="常用方法-6"><a href="#常用方法-6" class="headerlink" title="常用方法"></a>常用方法</h3><p>延迟方法：返回值类型仍然是 Stream 接口自身类型的方法，因此支持链式调用</p><p>终结方法：返回值类型不再是 Stream 接口自身类型的方法，因此不再支持链式调用，本小节包括 count 和 forEach 方法</p><h4 id="逐一处理：forEach"><a href="#逐一处理：forEach" class="headerlink" title="逐一处理：forEach"></a>逐一处理：forEach</h4><p>虽然方法名字叫 forEach ，但是与for循环中的“for-each”不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><p>该方法接收一个 Consumer 接口函数，会将每一个流元素交给该函数进行处理。</p><p>基本使用： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        stream.forEach(name‐&gt; System.out.println(name));</span><br></pre></td></tr></table></figure><h4 id="过滤：ﬁlter"><a href="#过滤：ﬁlter" class="headerlink" title="过滤：ﬁlter"></a>过滤：ﬁlter</h4><p>可以通过 filter 方法将一个流转换成另一个子集流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure><p>该接口接收一个 Predicate 函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件</p><p>基本使用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br></pre></td></tr></table></figure><h4 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h4><p>如果需要将流中的元素映射到另一个流中，可以使用 map 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><p>该接口需要一个 Function 函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。</p><p>将一种T类型转换成为R类型，而这种转换的动作，就称为“映射”。<br>基本使用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"10"</span>, <span class="string">"12"</span>, <span class="string">"18"</span>);</span><br><span class="line">        Stream&lt;Integer&gt; result = original.map(str‐&gt;Integer.parseInt(str));</span><br></pre></td></tr></table></figure><h4 id="统计个数：count"><a href="#统计个数：count" class="headerlink" title="统计个数：count"></a>统计个数：count</h4><p>正如集合 Collection 当中的 size 方法一样，流提供 count 方法来数一数其中的元素个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>该方法返回一个long值代表元素个数</p><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>));</span><br></pre></td></tr></table></figure><h4 id="取用前几个：limit"><a href="#取用前几个：limit" class="headerlink" title="取用前几个：limit"></a>取用前几个：limit</h4><p>limit 方法可以对流进行截取，只取用前n个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br></pre></td></tr></table></figure><p>参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作</p><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.limit(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="跳过前几个：skip"><a href="#跳过前几个：skip" class="headerlink" title="跳过前几个：skip"></a>跳过前几个：skip</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br></pre></td></tr></table></figure><p>如果希望跳过前几个元素，可以使用 skip 方法获取一个截取之后的新流：</p><p>如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流</p><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.skip(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="组合：concat"><a href="#组合：concat" class="headerlink" title="组合：concat"></a>组合：concat</h4><p>如果有两个流，希望合并成为一个流，那么可以使用 Stream 接口的静态方法 concat </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span></span><br></pre></td></tr></table></figure><h3 id="练习：集合元素处理"><a href="#练习：集合元素处理" class="headerlink" title="练习：集合元素处理"></a>练习：集合元素处理</h3><p>现在有两个 ArrayList 集合存储队伍当中的多个成员姓名，</p><p>要求使用传统的for循环（或增强for循环）依次进行以下若干操作步骤：</p><ol><li>第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</li><li>第一个队伍筛选之后只要前3个人；存储到一个新集合中。</li><li>第二个队伍只要姓张的成员姓名；存储到一个新集合中。</li><li>第二个队伍筛选之后不要前2个人；存储到一个新集合中。</li><li>将两个队伍合并为一个队伍；存储到一个新集合中。</li><li>根据姓名创建 Person 对象；存储到一个新集合中。</li><li>打印整个队伍的Person对象信息。</li></ol><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArrayListNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        one.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        one.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        one.add(<span class="string">"苏星河"</span>);</span><br><span class="line">        one.add(<span class="string">"石破天"</span>);</span><br><span class="line">        one.add(<span class="string">"石中玉"</span>);</span><br><span class="line">        one.add(<span class="string">"老子"</span>);</span><br><span class="line">        one.add(<span class="string">"庄子"</span>);</span><br><span class="line">        one.add(<span class="string">"洪七公"</span>);</span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">"古力娜扎"</span>);</span><br><span class="line">        two.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        two.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        two.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        two.add(<span class="string">"尼古拉斯赵四"</span>);</span><br><span class="line">        two.add(<span class="string">"张天爱"</span>);</span><br><span class="line">        two.add(<span class="string">"张二狗"</span>);</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;name='"</span> + name + <span class="string">"'&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用传统的for循环"><a href="#使用传统的for循环" class="headerlink" title="使用传统的for循环"></a>使用传统的for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArrayListNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        List&lt;String&gt; oneA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : one) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                oneA.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        List&lt;String&gt; oneB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            oneB.add(oneA.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        List&lt;String&gt; twoA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : two) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"张"</span>)) &#123;</span><br><span class="line">                twoA.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        List&lt;String&gt; twoB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; twoA.size(); i++) &#123;</span><br><span class="line">            twoB.add(twoA.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        List&lt;String&gt; totalNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        totalNames.addAll(oneB);</span><br><span class="line">        totalNames.addAll(twoB);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        List&lt;Person&gt; totalPersonList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : totalNames) &#123;</span><br><span class="line">            totalPersonList.add(<span class="keyword">new</span> Person(name));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : totalPersonList) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Stream方式"><a href="#使用Stream方式" class="headerlink" title="使用Stream方式"></a>使用Stream方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoStreamNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = one.stream().filter(s ‐&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = two.stream().filter(s ‐&gt; s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        Stream.concat(streamOne, streamTwo).map(Person::<span class="keyword">new</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿什么参数做什么操作。</p><p>那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑？</p><h3 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口如下</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintSimple</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable data)</span> </span>&#123;</span><br><span class="line">        data.print(<span class="string">"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用lambda，但只是想调一下现成的方法，感觉还是有些累赘</span></span><br><span class="line">        printString(s ‐&gt; System.out.println(s));</span><br><span class="line"><span class="comment">// 使用方法引用，明显这样更精简</span></span><br><span class="line">        printString(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>双冒号 :: 为引用运算符，而它所在的表达式被称为方法引用。</p><p>如果<strong>Lambda要表达的函数方案已经存在于某个方法的实现中</strong>，那么则可以通过双冒号来引用该方法</p><ul><li>Lambda表达式写法： s -&gt; System.out.println(s);</li><li>方法引用写法： System.out::println</li></ul><p>第一种语义是指：拿到参数之后经Lambda之手，继而传递给 System.out.println 方法去处理。</p><p>第二种等效写法的语义是指：直接让 System.out 中的 println 方法来取代Lambda</p><p>方法引用复用了已有方案，更加简洁。</p><p>注：二者参数类型需要对应，否则会抛出异常</p><h3 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h3><h4 id="通过对象名引用成员方法"><a href="#通过对象名引用成员方法" class="headerlink" title="通过对象名引用成员方法"></a>通过对象名引用成员方法</h4><p>这是最常见的一种用法，如果一个类中已经存在了一个成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRefObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable lambda)</span> </span>&#123;</span><br><span class="line">        lambda.print(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MethodRefObject obj = <span class="keyword">new</span> MethodRefObject();</span><br><span class="line">        <span class="comment">// 通过已有对象来引用</span></span><br><span class="line">        printString(obj::printUpperCase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过类名称引用静态方法"><a href="#通过类名称引用静态方法" class="headerlink" title="通过类名称引用静态方法"></a>通过类名称引用静态方法</h4><p>由于在 java.lang.Math 类中已经存在了静态方法 abs ，所以当我们需要通过Lambda来调用该方法时，有两种写</p><p>法。首先是函数式接口：</p><p>Lambda表达式： n -&gt; Math.abs(n)</p><p>方法引用： Math::abs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calcable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> num, Calcable lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.calc(num));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// lambda表达式写法</span></span><br><span class="line">        method(‐<span class="number">10</span>, n ‐&gt; Math.abs(n));</span><br><span class="line">        <span class="comment">// 方法引用仅此一行有差异</span></span><br><span class="line">        method(-<span class="number">10</span>, Math::abs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过super引用成员方法"><a href="#通过super引用成员方法" class="headerlink" title="通过super引用成员方法"></a>通过super引用成员方法</h4><p>如果存在继承关系，当Lambda中需要出现super调用时，也可以使用方法引用进行替代。首先是函数式接口： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greetable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大家好,我是Man!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义方法method,参数传递Greetable接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Greetable g)</span></span>&#123;</span><br><span class="line">        g.greet();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Lambda</span></span><br><span class="line">        method(()‐&gt;<span class="keyword">new</span> Human().sayHello());</span><br><span class="line">        <span class="comment">//使用super关键字化简lambda</span></span><br><span class="line">        method(()‐&gt;<span class="keyword">super</span>.sayHello());</span><br><span class="line">        <span class="comment">// 使用方法引用</span></span><br><span class="line">        method(<span class="keyword">super</span>::sayHello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过this引用成员方法"><a href="#通过this引用成员方法" class="headerlink" title="通过this引用成员方法"></a>通过this引用成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lambda表达式： () -&gt; <span class="keyword">this</span>.buyHouse()</span><br><span class="line"></span><br><span class="line">方法引用： <span class="keyword">this</span>::buyHouse</span><br></pre></td></tr></table></figure><h4 id="类的构造器引用"><a href="#类的构造器引用" class="headerlink" title="类的构造器引用"></a>类的构造器引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lambda表达式： name -&gt; <span class="keyword">new</span> Person(name)</span><br><span class="line"></span><br><span class="line">方法引用： Person::<span class="keyword">new</span></span><br></pre></td></tr></table></figure><h4 id="数组的构造器引用"><a href="#数组的构造器引用" class="headerlink" title="数组的构造器引用"></a>数组的构造器引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lambda表达式： length -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[length]</span><br><span class="line"></span><br><span class="line">方法引用： <span class="keyword">int</span>[]::<span class="keyword">new</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用类&quot;&gt;&lt;a href=&quot;#常用类&quot; class=&quot;headerlink&quot; title=&quot;常用类&quot;&gt;&lt;/a&gt;常用类&lt;/h1&gt;&lt;h2 id=&quot;Object类&quot;&gt;&lt;a href=&quot;#Object类&quot; class=&quot;headerlink&quot; title=&quot;Object类&quot;&gt;&lt;/a&gt;Object类&lt;/h2&gt;&lt;p&gt;&lt;code&gt;java.lang.Object&lt;/code&gt;类是Java语言中的根类，那么默认则继承自Object类&lt;/p&gt;
&lt;h3 id=&quot;toString方法&quot;&gt;&lt;a href=&quot;#toString方法&quot; class=&quot;headerlink&quot; title=&quot;toString方法&quot;&gt;&lt;/a&gt;toString方法&lt;/h3&gt;&lt;h4 id=&quot;方法摘要&quot;&gt;&lt;a href=&quot;#方法摘要&quot; class=&quot;headerlink&quot; title=&quot;方法摘要&quot;&gt;&lt;/a&gt;方法摘要&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public String toString()&lt;/code&gt;：返回该对象的字符串表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;toString方法返回该对象的字符串表示，默认为对象的类型+@+内存地址值的hash值。&lt;/p&gt;
&lt;p&gt;而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，故需要重写它。&lt;/p&gt;
&lt;h4 id=&quot;覆盖重写&quot;&gt;&lt;a href=&quot;#覆盖重写&quot; class=&quot;headerlink&quot; title=&quot;覆盖重写&quot;&gt;&lt;/a&gt;覆盖重写&lt;/h4&gt;&lt;p&gt;如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Person&amp;#123;&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;name=&#39;&quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&#39;\&#39;&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;, age=&quot;&lt;/span&gt; + age + &lt;span class=&quot;string&quot;&gt;&#39;&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt; 在我们直接使用输出语句输出对象名的时候,其实默认通过该对象调用了其toString()方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="heima57" scheme="http://yoursite.com/categories/heima57/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java入门</title>
    <link href="http://yoursite.com/2020/02/14/heima57/java%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/02/14/heima57/java入门/</id>
    <published>2020-02-13T17:29:50.000Z</published>
    <updated>2020-03-10T06:04:33.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java初识"><a href="#Java初识" class="headerlink" title="Java初识"></a>Java初识</h3><h4 id="发展简史"><a href="#发展简史" class="headerlink" title="发展简史"></a>发展简史</h4><p>95由sun开发，1.5和1.8是两次较大的版本更新</p><p>09年在1.6版本时被Oracle收购</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>各种互联网程序以及服务器后台处理大数据的存储，查询和数据挖掘等</p><h4 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h4><p>win+r进入</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>盘符名:</code></td><td>切换盘符</td></tr><tr><td><code>dir</code></td><td>查看当前文件夹</td></tr><tr><td><code>cd 文件夹名</code></td><td>切换文件夹</td></tr><tr><td><code>cd \</code></td><td>切换到磁盘根目录</td></tr><tr><td><code>cls</code></td><td>清屏</td></tr></tbody></table><a id="more"></a><h4 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h4><p>跨平台性，通过jvm实现</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215123316.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215123646.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215134138.png" alt></p><h4 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h4><p>官网下载安装包</p><h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><p>JAVA_HOME    java安装目录</p><p>path中添加    %JAVA_HOME%\bin;</p><h4 id="Java程序开发"><a href="#Java程序开发" class="headerlink" title="Java程序开发"></a>Java程序开发</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215131916.png" alt></p><p><code>javac  xxx.class</code>        编译</p><p><code>java xxx</code>                运行，注意别加后缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个文件中仅能有一个公共类，且必须与文件名相同</p><h4 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h4><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>单行   //</p><p>多行   <code>/*  */</code></p><p>文档    <code>/**  */</code></p><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><table><thead><tr><th>访问控制</th><th>private</th><th>protected</th><th>public</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>类,方法和变量修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td><td>new</td><td>static</td></tr><tr><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td><td>for</td><td>instanceof</td></tr><tr><td>switch</td><td>case</td><td>default</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td><td>short</td><td>null</td></tr><tr><td>true</td><td>false</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h5 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h5><ul><li>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号，内部类会用到，自己少用） 和 _（下划线） </li><li>标识符不能以数字开头</li><li>标识符不能是关键字</li></ul><p><strong>建议</strong></p><ul><li><p>包名规范：域名倒叙+模块+功能，全部小写</p><ul><li><p><code>package com.guardwarm.train</code>        必须定义在java文件第一行</p></li><li><p>同一个包下不能存在重名的类，建议每个包功能单一</p></li><li><p>调用不同包下的类：全类名/导入包</p><blockquote><p>import com.guardwarm.train.Classify    推荐</p><p>import com.guardwarm.train.*        .*只能加载该包下直接包含的类，不会遍历其下所有子包的类</p><p>com.guardwarm.train.Classify c = new com.guardwarm.train.Classify();    当调用两个同名类时，只能这样</p></blockquote></li></ul></li><li><p>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）</p></li><li><p>方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）</p></li><li><p>变量名规范：全部小写</p></li></ul><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>变量名全部大写</p><table><thead><tr><th>类型</th><th>含义</th><th>数据举例</th></tr></thead><tbody><tr><td>整数常量</td><td>所有的整数</td><td>0，1， 567， -9</td></tr><tr><td>小数常量</td><td>所有的小数</td><td>0.0， -0.1， 2.55</td></tr><tr><td>字符常量</td><td>单引号引起来,只能写一个字符,必须有内容</td><td>‘a’ ， ‘ ‘， ‘好’</td></tr><tr><td>字符串常量</td><td>双引号引起来,可以写多个字符,也可以不写</td><td>“A” ，”Hello” ，”你好” ，””</td></tr><tr><td>布尔常量</td><td>只有两个值</td><td>true ， false</td></tr><tr><td>空常量</td><td>只有一个值</td><td>null</td></tr></tbody></table><h5 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h5><p>标准用7位表示</p><p>扩展用八位</p><table><thead><tr><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>0</td><td>48</td></tr><tr><td>9</td><td>57</td></tr><tr><td>A</td><td>65</td></tr><tr><td>Z</td><td>90</td></tr><tr><td>a</td><td>97</td></tr><tr><td>z</td><td>122</td></tr></tbody></table><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200302213306-828282.png" alt="image-20200302213306021"></p><h5 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h5><p>方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值.</p><p>eg：数组作为方法参数传递，传递的参数是<strong>数组内存的地址</strong>。</p><h5 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a>变量的默认值</h5><p>栈中变量(局部变量)没有默认值，必须初始化，堆中变量(new)有默认值</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200304122256-190744.png" alt="image-20200304122254794"></p><h5 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h5><p>看包(是否需要导包)</p><p>看构造</p><p>看具体方法</p><h5 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h5><p>有自动装箱和拆箱的存在，使用很方便</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215221338.png" alt></p><h5 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200218122128.png" alt></p><p><strong>建以</strong></p><ul><li>成员变量使用 private ，隐藏细节。 </li><li>构造方法使用 public ，方便创建对象。 </li><li>成员方法使用 public ，方便调用方法。</li></ul><h5 id="访问顺序"><a href="#访问顺序" class="headerlink" title="访问顺序"></a>访问顺序</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200218170814.png" alt></p><ul><li>多态<ul><li>编译看左—-向上转型</li><li>运行看右—-动态绑定</li></ul></li><li>继承<ul><li>成员变量是静态绑定，故运行看左</li><li>privae/static/final的方法，按照静态绑定</li></ul></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>基本数据类型：包括 <strong>整数 、 浮点数 、 字符 、 布尔</strong> 。 </li><li>引用数据类型：包括 <strong>类 、 数组 、 接口</strong> 。</li></ul><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>四类八种</p><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2</td><td>-32768~32767</td></tr><tr><td>整型</td><td><strong>int</strong></td><td>4</td><td>-2的31次方~2的31次方</td></tr><tr><td>长整型</td><td>long</td><td>8</td><td>-2的63次方~2的63</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td><strong>double</strong></td><td>8</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2</td><td>0-65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1</td><td>true，false</td></tr></tbody></table><h5 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h5><p><code>数据类型 变量名 = 数据值;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//定义字节型变量</span></span><br><span class="line">      <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">      <span class="comment">//定义短整型变量</span></span><br><span class="line">      <span class="keyword">short</span> s = <span class="number">1000</span>;</span><br><span class="line">      <span class="comment">//定义整型变量</span></span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">123456</span>;</span><br><span class="line">      <span class="comment">//定义长整型变量</span></span><br><span class="line">      <span class="keyword">long</span> l = <span class="number">12345678900L</span>;</span><br><span class="line">      <span class="comment">//定义单精度浮点型变量</span></span><br><span class="line">      <span class="keyword">float</span> f = <span class="number">5.5F</span>;</span><br><span class="line">      <span class="comment">//定义双精度浮点型变量</span></span><br><span class="line">      <span class="keyword">double</span> d = <span class="number">8.5</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.23E5</span>;</span><br><span class="line"><span class="keyword">double</span> d = .<span class="number">2</span>;</span><br><span class="line">      <span class="comment">//定义布尔型变量</span></span><br><span class="line">      <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">//定义字符型变量</span></span><br><span class="line">      <span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><h6 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h6><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200302213526-559725.png" alt="image-20200302213525091"></p><ul><li><p>将<strong>取值范围小</strong>的类型自动提升为 <strong>取值范围大</strong>的类型 </p><p><strong>注意</strong>：是按取值大小来分，eg：float比long所占字节少，但由于是浮点型取值范围更大</p><p><strong>byte、short、char‐‐&gt;int‐‐&gt;long‐‐&gt;float‐‐&gt;double</strong></p></li><li><p>byte、short、char 运算时直接提升为 int (类型提升)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">1</span></span><br><span class="line"><span class="comment">// 由于jvm的优化，都是常量会在运算成一个数后编译，所以不存在类型提升，可以通过</span></span><br><span class="line"><span class="keyword">byte</span> b3 = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="comment">// 由于右侧是变量，所以不会优化，编译都无法通过</span></span><br><span class="line"><span class="keyword">byte</span> b4 = b1 + b3</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// +=是一个运算符，所以不存在类型提升，一切ok    </span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"><span class="comment">// 这样会被提升为int类型   </span></span><br><span class="line">a = a + <span class="number">1</span></span><br></pre></td></tr></table></figure><h6 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h6><p><code>数据类型 变量名 = （数据类型）被转数据值;</code></p><ul><li><p>将 取值范围大的类型 强制转换成 取值范围小的类型 </p></li><li><p>浮点转成整数，直接取消小数点，可能造成数据损失精度</p></li><li><p>int 强制转成 short 砍掉2个字节，可能造成数据丢失</p></li></ul><h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><p>运算符+操作数</p><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200302225807286.png" alt="image-20200302225807286"></p><blockquote><p>tips：&amp;&amp;会出现短路，但&amp;不会</p></blockquote><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200302234416-761211.png" alt="image-20200302225305299"></p><p><strong>在运算时可以将数字放大一定倍数来避免小数计算</strong></p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>引用类型也可以作为  成员变量、作为方法参数、作为方法的返回值</p><ul><li><p>类作为成员变量时，对它进行赋值的操作，实际上，是赋给它该类的一个对象</p></li><li><p>接口是对<strong>方法</strong>的封装</p><p>我们使用一个接口作为成员变量，这样的设计更为灵活，增强了程序的扩展性。可以通过多种匿名内部类实现丰富的扩展</p><p>接口作为成员变量时，对它进行赋值的操作，实际上，是赋给它该接口的一个子类对象。</p><p>当接口作为方法的参数时,需要传递什么呢？当接口作为方法的返回值类型时，需要返回什么呢？</p><p>​    都是它的 <strong>子类对象</strong>。</p></li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (判断条件<span class="number">1</span>) &#123;</span><br><span class="line">执行语句<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (判断条件<span class="number">2</span>) &#123;</span><br><span class="line">执行语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (判断条件n) &#123;</span><br><span class="line">执行语句n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">执行语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200302234431-908625.png" alt="image-20200302234430112"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表达式类型：byte，short，int，char，enum（枚举），JDK7后可以接收字符串</span></span><br><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 最后一个break虽说可有可无，但为了保持良好习惯，应该添加</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化表达式中的值，仅在for循环内有效</span></span><br><span class="line"><span class="keyword">for</span>(初始化表达式①; 布尔表达式②; 步进表达式④)&#123;</span><br><span class="line">循环体③</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="keyword">while</span>(布尔表达式②)&#123;</span><br><span class="line">    循环体③</span><br><span class="line">    步进表达式④</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体③</span><br><span class="line">    步进表达式④</span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式②);</span><br></pre></td></tr></table></figure><ul><li>有明确次数时用for</li><li>无限循环，但有退出条件用while</li><li>最少执行一次用do-while</li><li>break，continue进行循环控制</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>相当于别的语言中的函数</p><p>将一些常用的功能抽象为一个方法，便于提高代码的复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215200107.png" alt></p><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><ul><li>函数名相同，但参数列表不同，与修饰符和返 回值类型无关</li><li>参数列表：个数不同，数据类型不同，顺序不同</li><li>重载方法调用：JVM通过方法的参数列表，调用不同的方法。</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><strong>容器</strong>：是将多个数据存储到一起，每个数据称为该容器的元素。</p><p><strong>数组</strong>： 数组就是存储数据<strong>长度固定</strong>的容器，保证多个数据的<strong>数据类型要一致</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组存储的数据类型[] 数组名字 = new 数组存储的数据类型[长度];</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,元素3...&#125;;</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 数据类型[] 数组名 = &#123;元素1,元素2,元素3...&#125;;</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 前两种申明和定义可以分开，最后一种必须一体</span></span><br></pre></td></tr></table></figure><p><strong>二维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] a2 = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值.</strong></p><p>所以数组作为方法参数传递，传递的参数是<strong>数组内存的地址</strong>。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215203842.png" alt></p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组名[索引]=数值，为数组中的元素赋值</span></span><br><span class="line"><span class="comment">// 变量=数组名[索引]，获取出数组中的元素</span></span><br><span class="line"><span class="comment">// 数组名.length获取数组名中元素个数</span></span><br></pre></td></tr></table></figure><h4 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215201824.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215201906.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215203113.png" alt></p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><ul><li>NullPointerException：只定义未申明</li><li>ArrayIndexOutOfBoundsException：操作下标越界</li></ul><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取出最大元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">5</span>, <span class="number">15</span>, <span class="number">2000</span>, <span class="number">10000</span>, <span class="number">100</span>, <span class="number">4000</span> &#125;;</span><br><span class="line">    <span class="comment">//定义变量，保存数组中0索引的元素</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//遍历数组，取出每个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//遍历到的元素和变量max比较</span></span><br><span class="line">    <span class="comment">//如果数组元素大于max</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">        <span class="comment">//max记录住大值</span></span><br><span class="line">        max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"数组最大值是： "</span> + max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转(双向遍历，交换数据)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    循环中定义变量min=0最小索引</span></span><br><span class="line"><span class="comment">    max=arr.length‐1最大索引</span></span><br><span class="line"><span class="comment">    min++,max‐‐</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length ‐ <span class="number">1</span>; min &lt;= max; min++, max‐‐) &#123;</span><br><span class="line">    <span class="comment">//利用第三方变量完成数组中的元素交换</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">        arr[min] = arr[max];</span><br><span class="line">        arr[max] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转后，遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>这里的<strong>对象泛指现实中一切事物</strong>，每种事物都具备自己的<strong>属性和行为</strong>。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。 它区别于面向过程思想，强调的是<strong>通过调用对象的行为来实现功能，而不是自己一步一步的去 操作实现</strong>。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>封装、继承和多态。</p><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>类：是一组相关属性和行为的集合</p><ul><li>属性：就是该事物的状态信息</li><li>行为：就是该事物能够做什么。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象：是一类事物的具体体现。对象是类的一个实例，必然具备该类事物的属性 和行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">// 对象名.成员变量；</span></span><br><span class="line"><span class="comment">// 对象名.成员方法()；</span></span><br></pre></td></tr></table></figure><h6 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h6><p><code>new 类名(参数列表)；</code></p><p>. 创建匿名对象直接调用方法，没有变量名，对于那些只使用一次的变量(参数，返回值，…)</p><h5 id="二者关系"><a href="#二者关系" class="headerlink" title="二者关系"></a>二者关系</h5><p>类是对一类事物的描述，是抽象的。 对象是一类事物的实例，是具体的。 类是对象的模板，对象是类的实体。</p><h5 id="内存图-1"><a href="#内存图-1" class="headerlink" title="内存图"></a>内存图</h5><h6 id="一个对象调用一个方法"><a href="#一个对象调用一个方法" class="headerlink" title="一个对象调用一个方法"></a>一个对象调用一个方法</h6><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215213202.png" alt></p><h6 id="两个对象调用一个方法"><a href="#两个对象调用一个方法" class="headerlink" title="两个对象调用一个方法"></a>两个对象调用一个方法</h6><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200215213427.png" alt></p><h5 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h5><ul><li><p>在类中的位置不同</p><ul><li>成员变量：类中，方法外 </li><li>局部变量：方法中或者方法声明上(形式参数) </li></ul></li><li><p>作用范围不一样 </p><ul><li>成员变量：类中 </li><li>局部变量：方法中 </li></ul></li><li><p>初始化值的不同</p><ul><li>成员变量：有默认值 </li><li>局部变量：没有默认值，必须先定义，赋值，最后使用 </li></ul></li><li><p>在内存中的位置不同</p><ul><li>成员变量：堆内存 </li><li>局部变量：栈内存 </li></ul></li><li><p>生命周期不同</p><ul><li>成员变量：随着对象的创建而存在，随着对象的消失而消失 </li><li>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</li></ul></li></ul><h5 id="构造函数与成员方法"><a href="#构造函数与成员方法" class="headerlink" title="构造函数与成员方法"></a>构造函数与成员方法</h5><ul><li>命名规则不同<ul><li>一个与类名相同，一个随意</li></ul></li><li>返回值不同<ul><li>一个无返回值类型，一个必须有</li></ul></li><li>作用不同<ul><li>一个用于创建对象，一个用于实现对象方法</li></ul></li><li>调用不同<ul><li>一个通过new来创建对象，一个通过对象名调用</li></ul></li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的 方式。</p><h5 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h5><p>隐藏对象的信息，留出访问的接口</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200304203227-402099.png" alt="image-20200304125108134"></p><p>可以通过<strong>异常或判断</strong>来控制</p><h5 id="封装优化"><a href="#封装优化" class="headerlink" title="封装优化"></a>封装优化</h5><ul><li>用this来解决命名冲突</li></ul><p>方法被哪个对象调用，方法中的this就代表那个对象。即谁在调用，this就代表谁。</p><ul><li>提供构造方法<ul><li>如果你不提供构造方法，系统会给出无参数构造方法</li><li>如果你提供了构造方法，系统将不再提供无参数构造方法</li><li>构造方法是可以重载的，既可以定义参数，也可以不定义参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法无须返回值</span></span><br><span class="line">修饰符 构造方法名(参数列表)&#123;</span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h5><p>JavaBean 是 Java语言编写类的一种<strong>标准规范</strong>，可重用的组件</p><p>符合 JavaBean 的类，要求类必须是具体的和公共的，并且具有无参数的构造方法，提供用来操作成员变量的 set 和 get 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="comment">//无参构造方法【必须】</span></span><br><span class="line">    <span class="comment">//有参构造方法【建议】</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">// boolean的get方法为isXxx()</span></span><br><span class="line">    <span class="comment">//getXxx()</span></span><br><span class="line">    <span class="comment">//setXxx()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h5><h6 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h6><p>它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属 于某个对象的。可以不靠创建对象来调用了</p><ul><li>类属性</li></ul><p>当 static 修饰成员变量时，该变量称为类属性。类对象共享，类加载时产生，销毁时释放，生命周期长</p><ul><li><p>静态方法 </p><p>当 static 修饰成员方法时，该方法称为类方法 。静态方法在声明中有 static ，建议使用类名来调用</p><ul><li>静态方法可以直接访问类变量和静态方法</li></ul></li><li><p>静态方法不能直接访问普通成员变量或成员方法。但反之，成员方法可以直接访问类变量或静态方法</p><ul><li>若一定要调用非静态成员，需先实例化一个对象，用该对象去调用</li></ul><p>原因：<strong>内存中先加载静态方法，实例化时再加载成员方法</strong></p><ul><li>静态方法中，不能使用this关键字</li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200216094554.png" alt></p></li></ul><h6 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h6><ul><li>位置：类中方法外</li><li>执行：随着类的加载而执行且执行一次，优先于main方法和构造方法的执行</li><li>作用：用于变量的初始化赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> version;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; list;</span><br><span class="line">    <span class="comment">// 静态代码块，只能操作静态成员只在加载类时执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 给类变量赋值</span></span><br><span class="line">        number = <span class="number">2</span>;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 添加元素到集合中</span></span><br><span class="line">        list.add(<span class="string">"张三"</span>);</span><br><span class="line">        list.add(<span class="string">"李四"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 代码块每次构造对象时执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        version = <span class="number">3</span>;</span><br><span class="line">        sex = <span class="number">0</span>;</span><br><span class="line">        number = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 普通代码块随着方法的调用而执行</span></span><br><span class="line">        &#123;</span><br><span class="line">            number++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.number = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="两个对象相互联系"><a href="#两个对象相互联系" class="headerlink" title="两个对象相互联系"></a>两个对象相互联系</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200304200947-417199.png" alt="image-20200304200946350"></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h5><p><strong>由来：</strong>多个类中存在相同属性和行为时，将这些内容<strong>抽取到单独一个类中</strong>，那么多个类无需再定义这些属性和行为，只要 继承那一个类即可</p><p>子类可以直接访问父类中的非私有的属性和行为</p><ul><li>提高代码重用性</li><li>类与类之间产生了关系，是多态的前提</li><li>子类 <strong>is a</strong> 父类，满足这样的一般都可以</li></ul><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><blockquote><p>java只支持单继承，但支持<strong>多层继承</strong></p><p>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰</p><p>接口中，没有构造方法，不能创建对象</p><p>接口中，没有静态代码块。</p></blockquote><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200304210520-202826.png" alt="image-20200304210052823"></p><h5 id="成员变量的访问"><a href="#成员变量的访问" class="headerlink" title="成员变量的访问"></a>成员变量的访问</h5><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用 super 关键字，修饰父类成员变量</p><p><strong>super和this不能用于静态方法</strong></p><h5 id="成员方法的访问"><a href="#成员方法的访问" class="headerlink" title="成员方法的访问"></a>成员方法的访问</h5><p>子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效 果，也称为<strong>重写</strong>或者复写。<strong>声明不变，重新实现。</strong></p><ul><li>通过重写，可以实现子类对父类方法的拓展</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span><span class="comment">// 对是否重写做检验</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用父类已经存在的功能使用super在原基础上扩展</span></span><br><span class="line">    <span class="keyword">super</span>.showNum();</span><br><span class="line">    <span class="comment">//增加自己特有显示姓名和图片功能</span></span><br><span class="line">    System.out.println(<span class="string">"显示来电姓名"</span>);</span><br><span class="line">    System.out.println(<span class="string">"显示头像"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ol><li>子类方法覆盖父类方法，必须要保证<strong>权限大于等于父类权限</strong>，一般采用相同权限</li><li>子类方法覆盖父类方法<strong>，返回值类型、函数名和参数列表</strong>都要一模一样。</li></ol><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    Zi()&#123;</span><br><span class="line">    <span class="comment">// super（），调用父类构造方法</span></span><br><span class="line">    <span class="comment">// 子类的每个构造方法中有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()</span></span><br><span class="line"><span class="comment">// super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</span></span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    System.out.println(<span class="string">"Zi（）"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200218101920.png" alt></p><ul><li>super ：代表父类的存储空间标识(可以理解为父亲的引用)。<ul><li>super(…)    super.成员方法名()    super.成员变量</li></ul></li><li>this ：代表当前对象的引用(谁调用就代表谁)。</li></ul><h5 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200304232013-831582.png" alt="image-20200304232011565"></p><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><h6 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h6><p>抽象方法 ： 没有方法体的方法，只有声明，没有实现</p><p>抽象类：用abstract修饰的类，不必须包含抽象方法，只要不想让该方法可以直接实例化，即可声明为抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 修饰符 abstract 返回值类型 方法名 (参数列表)；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。否则，该子类也必须声明为抽象类。</p><ul><li>抽象类不能实例化</li><li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的</li><li>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类</li><li>抽象类的子类，必须重写抽象父类中所有的抽象方法，除非该子类也是抽象类</li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><h5 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h5><p>接口，是Java语言中一种引用类型，是方法的集合，接口的内部主要就是封装了方法，包含<strong>抽象方法</strong>（JDK 7及以前），<strong>默认方法和静态方法</strong>（JDK 8），<strong>私有方法</strong> （JDK 9）。 </p><p>接口的定义，它与定义类方式相似，但是使用 interface 关键字。它也会被编译成.class文件，但一定要明确它并 不是类，而是另外一种引用数据类型。</p><blockquote><p> 引用数据类型：数组，类，接口。 </p></blockquote><p>接口的使用，它不能创建对象，但是可以被实现（ implements）。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 默认方法用于接口功能扩展，如果再加抽象方法，使用实现类都得改，当然子类也可以重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法供接口直接调用，子类无法继承亦无法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 私有方法用于将默认方法中的重复代码抽取</span></span><br><span class="line">    <span class="comment">// 私有方法：只有默认方法可以调用。</span></span><br><span class="line"><span class="comment">// 私有静态方法：默认方法和静态方法可以调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多实现"><a href="#多实现" class="headerlink" title="多实现"></a>多实现</h5><p>子类重写接口默认方法后</p><p><code>接口名.super.方法名</code>来调用接口的默认方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 类名 [extends 父类名] implements 接口名1,接口名2,接口名3... &#123;</span><br><span class="line">    <span class="comment">// 重写接口中抽象方法【必须】如果抽象方法有重名的，只需要重写一次。</span></span><br><span class="line">    <span class="comment">// 如果默认方法有重名的，必须重写一次，不重名时随意</span></span><br><span class="line"><span class="comment">// 存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法</span></span><br><span class="line">    <span class="comment">// 若一个成员变量在接口和父类中都出现，子类必须重新定义</span></span><br><span class="line">    <span class="comment">// 若一个成员方法在接口和父类中都出现，子类会调用父类的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"AAAAAAAAAAAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"DDDDDDDDDDDD"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="comment">// 未重写methodA方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    C c = <span class="keyword">new</span> C();</span><br><span class="line">    c.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">DDDDDDDDDDDD</span><br></pre></td></tr></table></figure><h5 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h5><p>一个接口能继承另一个或者多个接口，和类之间的继承比较相似。接口的继承使用 extends 关键字，子接口继 承父接口的方法。<strong>如果父接口中的默认方法有重名的，那么子接口需要重写一次</strong></p><ul><li>子接口重写默认方法时，default关键字可以保留</li><li>子类重写默认方法时，default关键字不可以保留</li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h5><p>多态： 是指同一行为，具有多个不同表现形式。(单一的父类来接收多种多样的子类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</span></span><br><span class="line"><span class="comment">// 父类类型 变量名 = new 子类对象；</span></span><br><span class="line"><span class="comment">// 变量名.方法名();</span></span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.method();</span><br></pre></td></tr></table></figure><h5 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h5><ul><li>继承或者实现【二选一】 </li><li>方法的重写【意义体现——不重写的话，多态没有意义】 </li><li>父类引用指向子类对象【格式体现】</li></ul><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法</p><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><p>可以使程序编写的更简单，并有良好的扩展</p><p>用多态作为参数或返回值来避免使用大量的方法重载</p><h5 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h5><ol><li><p>向上转型</p><p>多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类类型 变量名 = new 子类类型();</span></span><br><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>向下转型</p><p>父类类型向子类类型向下转换的过程，这个过程是强制的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了调用子类特有的方法</span></span><br><span class="line"><span class="comment">// 子类类型 变量名 = (子类类型) 父类变量名;</span></span><br><span class="line">Cat c =(Cat) a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经常面临ClassCastException</span></span><br><span class="line"><span class="comment">// instanceof运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 向上转型</span></span><br><span class="line">    Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">    a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">    <span class="comment">// 向下转型</span></span><br><span class="line">    <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">        Cat c = (Cat)a;</span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">        Dog d = (Dog)a;</span><br><span class="line">        d.watchHouse(); <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h5 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h5><p>final： 不可改变。可以用于修饰类、方法和变量。变量名一般全大写</p><ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。 </li><li>变量：被修饰的变量，不能被重新赋值。<ul><li>修饰成员属性时必须初始化，要么在定义时初始化，要么就是在构造代码块或者构造方法中初始化</li></ul></li></ul><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><ul><li><p>基本类型的变量被final修饰后仅能赋值一次</p></li><li><p>成员变量涉及到初始化的问题，初始化方式有两种，必须二选一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示初始化；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String USERNAME = <span class="string">"张三"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造方法初始化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String USERNAME ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.USERNAME = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的 修改（变量和那个对象绑定了，但那个对象自己还可以变）</li></ul><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类</p><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><p>成员内部类 ：定义在类中方法外的类</p><p>在描述事物时，若一个事物内部还包含其他事物，就可以使用内部类这种结构。比如，汽车类 Car 中包含发动机 类 Engine ，这时， Engine 就可以使用内部类来描述，定义在成员位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 外部类 </span>&#123;</span><br><span class="line">    <span class="comment">// 通常会提供访问内部类的方法</span></span><br><span class="line">    <span class="keyword">public</span> 内部类 get内部类()&#123;</span><br><span class="line">        <span class="keyword">return</span> 内部类;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>内部类可以直接访问外部类的成员，包括私有成员。</p><p>当内部类与外部类变量重名时：<code>外部类类名.this.变量名</code>来访问外部类变量</p></li><li><p>外部类要访问内部类的成员，必须要建立内部类的对象</p></li><li><p>内部类可以用任意访问修饰符，但相应的访问权限会受到限制</p></li></ul><p>在其他类中获取内部类有如下三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//法一</span></span><br><span class="line"><span class="comment">// 外部类名.内部类名 对象名 = new 外部类型().new 内部类型()；</span></span><br><span class="line"><span class="comment">//法二</span></span><br><span class="line"><span class="comment">// 外部类名.内部类名 对象名 = 外部类对象.new 内部类型()；</span></span><br><span class="line"><span class="comment">//法三</span></span><br><span class="line"><span class="comment">// 外部类中提供get内部类的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建外部类对象</span></span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="comment">// 创建内部类对象</span></span><br><span class="line">    Heart heart = p.new Heart();</span><br><span class="line">    <span class="comment">// 调用内部类方法</span></span><br><span class="line">    heart.jump();</span><br><span class="line">    <span class="comment">// 调用外部类方法</span></span><br><span class="line">    p.setLive(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 调用内部类方法</span></span><br><span class="line">    heart.jump();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 内部类是一个独立的类，在编译之后会内部类会被编译成独立的.class文件，但前面冠以外部类的类名和$符号</span></span><br><span class="line"><span class="comment">// 比如，Person$Heart.class</span></span><br></pre></td></tr></table></figure><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>是内部类的简化写法。它的本质是一个<strong>带具体实现</strong>的<strong>父类或者父接口的匿名的子类对象</strong>。</p><p>开发中，最常用到的内部类就是匿名内部类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于那些只实例化一次的方法不配专门创建文件</span></span><br><span class="line"><span class="comment">// 类似匿名对象，那些只使用一次的对象不配拥有姓名</span></span><br><span class="line"><span class="keyword">new</span> 父类名或者接口名()&#123;</span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.等号右边:是匿名内部类，定义并创建该接口的子类对象</span></span><br><span class="line"><span class="comment">    2.等号左边:是多态赋值,接口类型引用指向子类对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    FlyAble f = <span class="keyword">new</span> FlyAble()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我飞了~~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//调用 fly方法,执行重写后的方法</span></span><br><span class="line">    f.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别匿名对象和匿名内部类：</p><blockquote><p>​    匿名内部类是只实例化一次，但该实例可被变量接收，多次调用</p><p>​    匿名对象是仅调用一次</p></blockquote><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p><a href="https://blog.csdn.net/chenkaibsw/article/details/80848069" target="_blank" rel="noopener">参见这篇文章</a></p><h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><h4 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Scanner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2. 创建键盘录入数据的对象</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//3. 接收数据</span></span><br><span class="line">        System.out.println(<span class="string">"请录入一个整数："</span>);</span><br><span class="line">        <span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line">        <span class="comment">//4. 输出数据</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Random</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2. 创建键盘录入数据的对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//3. 随机生成一个数据</span></span><br><span class="line">        <span class="comment">// 可以通过平移和伸缩来实现输出任意范围随机数</span></span><br><span class="line">        <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//4. 输出数据</span></span><br><span class="line">        System.out.println(<span class="string">"number:"</span>+ number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h4><h5 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h5><p>而数组的长度是固定的，无法适应数据变化的需 求。为了解决这个问题，Java提供了另一个容器 java.util.ArrayList 集合类,让我们可以更便捷的存储和操作对 象数据。</p><h5 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h5><p>java.util.ArrayList 是大小可变的数组的实现，存储在内的数据称为元素。此类提供一些方法来操作内部存储 的元素。 ArrayList 中可<strong>自动扩容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建jdk1.7之后右侧&lt;&gt;可以留空</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> <span class="comment">// 将指定的元素添加到此集合的尾部。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 移除此集合中指定位置上的元素。返回被删除的元素。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 返回此集合中指定位置上的元素。返回获取的元素。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="comment">// 返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</span></span></span><br></pre></td></tr></table></figure><p>ArrayList对象不能存储基本类型，只能存储引用类型的数据。所以需要<strong>存入对应的包装类</strong></p><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><h5 id="定义-12"><a href="#定义-12" class="headerlink" title="定义"></a>定义</h5><p>Java程序中<strong>所有的字符串文字</strong>（例如 “abc” ）都可以被看作是实现此类的实例。</p><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><ul><li>字符串不变：字符串的值在创建后不能被更改。但凡改变，必定是生成了新的字符串</li><li>因为String对象是不可变的，所以它们可以被共享。</li></ul><p>类似于python中的缓存机制，java中应该被称为常量池</p><ul><li>“abc” 等效于 char[] data={ ‘a’ , ‘b’ , ‘c’ }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">相当于：</span><br><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br><span class="line"><span class="comment">// String底层是靠字符数组实现的。</span></span><br></pre></td></tr></table></figure><h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造</span></span><br><span class="line">String str = <span class="keyword">new</span> String（）；</span><br><span class="line"><span class="comment">// 通过字符数组构造</span></span><br><span class="line"><span class="keyword">char</span> chars[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(chars);</span><br><span class="line"><span class="comment">// 通过字节数组构造</span></span><br><span class="line"><span class="keyword">byte</span> bytes[] = &#123; <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span> &#125;;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(bytes);</span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200310135951425.png" alt="image-20200310135951425"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span> <span class="params">(String anotherString)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 将此字符串与指定对象进行比较，忽略大小写。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span> <span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 将指定的字符串连接到该字符串的末尾。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span> <span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 按索引取char值</span></span></span><br><span class="line"><span class="function"><span class="comment">// 转换</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span>[] <span class="title">toCharArray</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 将此字符串转换为新的字符数组。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span> <span class="params">(CharSequence target, CharSequence replacement)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 将与target匹配的字符串使用replacement字符串替换。</span></span></span><br></pre></td></tr></table></figure><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>与StringBuffer区别在于不是线程安全的，所以效率较高</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200310135730-301773.png" alt="image-20200310135729248"></p><h4 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h4><p>java.util.Arrays 此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] a)</span> <span class="comment">// 返回指定数组内容的字符串表示形式</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义int 数组</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">4</span>,<span class="number">657</span>,<span class="number">8</span>,<span class="number">69</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">// 打印数组,输出地址值</span></span><br><span class="line">    System.out.println(arr); <span class="comment">// [I@2ac1fdc4</span></span><br><span class="line">    <span class="comment">// 数组内容转为字符串</span></span><br><span class="line">    String s = Arrays.toString(arr);</span><br><span class="line">    <span class="comment">// 打印字符串,输出内容</span></span><br><span class="line">    System.out.println(s); <span class="comment">// [2, 34, 35, 4, 657, 8, 69, 9]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> <span class="comment">// 对指定的 int 型数组按数字升序进行排序，改变原数组</span></span></span><br></pre></td></tr></table></figure><h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><p>java.lang.Math 类包含用于执行基本数学运算的方法，其所有方法均为静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回 <span class="keyword">double</span> 值的绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回大于等于参数的最小的整数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回小于等于参数最大的整数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回最接近参数的 <span class="keyword">long</span>。<span class="params">(相当于四舍五入方法)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java初识&quot;&gt;&lt;a href=&quot;#Java初识&quot; class=&quot;headerlink&quot; title=&quot;Java初识&quot;&gt;&lt;/a&gt;Java初识&lt;/h3&gt;&lt;h4 id=&quot;发展简史&quot;&gt;&lt;a href=&quot;#发展简史&quot; class=&quot;headerlink&quot; title=&quot;发展简史&quot;&gt;&lt;/a&gt;发展简史&lt;/h4&gt;&lt;p&gt;95由sun开发，1.5和1.8是两次较大的版本更新&lt;/p&gt;
&lt;p&gt;09年在1.6版本时被Oracle收购&lt;/p&gt;
&lt;h4 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h4&gt;&lt;p&gt;各种互联网程序以及服务器后台处理大数据的存储，查询和数据挖掘等&lt;/p&gt;
&lt;h4 id=&quot;常用DOS命令&quot;&gt;&lt;a href=&quot;#常用DOS命令&quot; class=&quot;headerlink&quot; title=&quot;常用DOS命令&quot;&gt;&lt;/a&gt;常用DOS命令&lt;/h4&gt;&lt;p&gt;win+r进入&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;盘符名:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换盘符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看当前文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd 文件夹名&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd \&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换到磁盘根目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;清屏&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="heima57" scheme="http://yoursite.com/categories/heima57/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>maven使用</title>
    <link href="http://yoursite.com/2020/02/12/heima57/maven%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/02/12/heima57/maven使用/</id>
    <published>2020-02-11T19:31:35.000Z</published>
    <updated>2020-03-30T03:37:59.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>项目管理工具，对软件项目提供构建和依赖管理</li></ul><p><a href="https://search.maven.org/" target="_blank" rel="noopener">国外：中央仓库</a></p><p><a href="https://maven.aliyun.com/" target="_blank" rel="noopener">国内：阿里云</a></p><p><a href="http://maven.apache.org/" target="_blank" rel="noopener">官方文档</a></p><h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><ul><li>项目设置遵循统一规则，保证不同开发平台的兼容性</li><li>强大的依赖管理，项目依赖自动下载<ul><li>jar包管理</li><li>导入依赖时，如果这个依赖也有pom.xml文件，会自动导入其它需要的依赖</li></ul></li><li>可扩展插件机制<ul><li>一键编译</li><li>一键测试</li><li>一键部署</li></ul></li></ul><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>maven工程对jar包的管理过程，实现了jar包的重用</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211193637.png" alt></p><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p>去官网解压到一个路径下即可</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200213221931.png" alt></p><p>添加环境变量</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211194608.png" alt></p><p>path中添加</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211194717.png" alt></p><p>maven运行依赖于JAVA_HOME变量</p><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211195150.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211200548.png" alt></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211201920.png" alt></p><h3 id="pom文件结构"><a href="#pom文件结构" class="headerlink" title="pom文件结构"></a>pom文件结构</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212095810.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 配置私服 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从阿里云获取私服链接 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最终包名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Pinyin<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--打jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--入口类--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.imooc.maven.PinyinTestor<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--将所有相关jar包打到一个jar包里--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">discriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">discriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">discriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">discriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--java -jar jar包名来运行jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200330112417-40434.png" alt="image-20200330112320895"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211204554.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200214103350.png" alt></p><h1 id="idea集成maven"><a href="#idea集成maven" class="headerlink" title="idea集成maven"></a>idea集成maven</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>确认下电脑上是否安装好了maven</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211204851.png" alt></p><p>setting中配置如下信息</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211205521.png" alt></p><p><strong>-DarchetypeCatalog=internal</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211221827.png" alt></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200214104452.png" alt></p><p><strong>web项目所用的骨架</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211222427.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200214104602.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211205917.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211210002.png" alt></p><p>把没有提供全的目录自己添加一下，一般java项目不需要用骨架</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200214104621.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200211223115.png" alt></p><h3 id="jar包添加"><a href="#jar包添加" class="headerlink" title="jar包添加"></a>jar包添加</h3><h4 id="本地添加"><a href="#本地添加" class="headerlink" title="本地添加"></a>本地添加</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212101244.png" alt></p><h5 id="scope标签"><a href="#scope标签" class="headerlink" title="scope标签"></a>scope标签</h5><p>作用：有些jar包仅在编译时需要</p><table><thead><tr><th>包名</th><th>作用域</th></tr></thead><tbody><tr><td>servlet</td><td>provided</td></tr><tr><td>jsp</td><td>provided</td></tr><tr><td>junit</td><td>test</td></tr><tr><td>mysql</td><td>runtime</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212121126.png" alt></p><p>system 元素与 provided 元素类似，但是被依赖项不会从 maven 仓库中查找，而是从本地系统中获取，systemPath 元素用于制定本地系统中 jar 文件的路径</p><h4 id="中央仓库添加"><a href="#中央仓库添加" class="headerlink" title="中央仓库添加"></a>中央仓库添加</h4><p>去中央仓库查找</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212100951.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212101030.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200214104708.png" alt></p><h3 id="运行环境修改"><a href="#运行环境修改" class="headerlink" title="运行环境修改"></a>运行环境修改</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212114251.png" alt></p><p>可以将常用的添加为模板</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212114521.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200212114610.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;项目管理工具，对软件项目提供构建和依赖管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://search.mave
      
    
    </summary>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python例题</title>
    <link href="http://yoursite.com/2020/02/11/python/python%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/11/python/python例题/</id>
    <published>2020-02-10T17:46:38.000Z</published>
    <updated>2020-02-10T10:00:29.745Z</updated>
    
    <content type="html"><![CDATA[<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    func_list.append(<span class="keyword">lambda</span> x:x+i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(func_list)):</span><br><span class="line">    result = func_list[i](i)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>lambda返回的是个函数地址，且里面各变量在真正执行前都是保存着地址</p><p>通过闭包保存传入的参数，其余变量则在命名空间中寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></span><br><span class="line">    v = <span class="keyword">lambda</span> x: x + name</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1 = func(<span class="string">'太白'</span>)</span><br><span class="line">v2 = func(<span class="string">'alex'</span>)</span><br><span class="line">v3 = v1(<span class="string">'银角'</span>)</span><br><span class="line">v4 = v2(<span class="string">'金角'</span>)</span><br><span class="line">print(v1, v2, v3, v4)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="习题" scheme="http://yoursite.com/tags/%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://yoursite.com/2020/02/02/python/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/02/python/python基础/</id>
    <published>2020-02-01T20:07:42.000Z</published>
    <updated>2020-02-15T09:34:06.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><h4 id="计算机基本组件"><a href="#计算机基本组件" class="headerlink" title="计算机基本组件"></a>计算机基本组件</h4><h5 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h5><p>计算机的运算和计算中心</p><p>人类一秒，可以运行10亿条指令，比内存快百度，硬盘快百万倍</p><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>暂时存储数据，临时加载数据应用程序，分为RAM，ROM</p><h5 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h5><p>长期存储数据</p><h5 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h5><p>一个软件，连接计算机的硬件与所有软件之间的一个软件</p><h4 id="python历史"><a href="#python历史" class="headerlink" title="python历史"></a>python历史</h4><p>python崇尚优雅，简洁</p><p>2和3有较多区别</p><h4 id="python的种类"><a href="#python的种类" class="headerlink" title="python的种类"></a>python的种类</h4><ul><li>Cpython：官方推荐解释器。可以转化成C语言能识别的字节码。</li><li>Jpython: 可以转化成Java语言能识别的字节码。</li><li>Ironpython：可以转化成.net语言能识别的字节码</li><li>pypy: 动态编译</li></ul><a id="more"></a><h4 id="编程语言分类"><a href="#编程语言分类" class="headerlink" title="编程语言分类"></a>编程语言分类</h4><h5 id="编译型"><a href="#编译型" class="headerlink" title="编译型"></a>编译型</h5><p>​        将代码一次性全部编译成二进制，然后再执行。</p><p>​        优点：执行效率高。</p><p>​        缺点：开发效率低，不能跨平台。</p><p>​        代表语言：C</p><h5 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h5><p>​        逐行解释成二进制，逐行运行。</p><p>​        优点：开发效率高，可以跨平台。</p><p>​        缺点：执行效率低。</p><p>​        代表语言：python</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>相当于为对应内存空间起别名，不同类型变量为不同大小内存块或有不同作用</p><h5 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h5><ul><li>变量全部由数字，字母下划线任意组合。</li><li>不能以数字开头。 </li><li>不能是python的关键字。<ul><li>[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li></ul></li><li>要具有描述性。name= ‘太白金星’ sex</li><li>不能使用中文。</li><li>不能过长。</li><li>推荐<ul><li>驼峰体：AgeOfOldboy = 73</li><li>下划线：age_of_oldboy = 73</li></ul></li></ul><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>代指生活中一直不变的</p><p>python中<strong>没有真正的常量</strong>，为了应和其他语言的口味，全部大写的变量称之为常量。所以是一种约定俗成的东西，没有实际约束。<strong>将变量名全部大写，放在文件的最上面</strong></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>便于你理解对方的代码，自己的代码。</p><ul><li>单行注释： # </li><li>多行注释： ‘’’被注释内容’’’  “””被注释内容”””</li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><h5 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h5><p>以下假设变量：a=10，b=20</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208181809.png" alt></p><p> <strong>/ 是除法，例如：2/3 = 0.6666。而//是表示向下取整的除法，例如3//2=1，6.0//4 = 1。也就是说 / 返回的是浮点类型的结果， 而 // 返回的是整数结果(可以理解为/的整数部分)</strong></p><h5 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h5><p>以下假设变量：a=10，b=20</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208181841.png" alt></p><h5 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h5><p>以下假设变量：a=10，b=20</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208181910.png" alt></p><h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183226.png" alt></p><p><strong>断路与或</strong></p><p>x or y , x为真，值就是x，x为假，值是y</p><p>x and y, x为真，值是y,x为假，值是x。</p><h5 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h5><p>判断子元素是否在原字符串（字典，列表，集合）中</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183245.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'喜欢'</span> <span class="keyword">in</span> <span class="string">'dkfljadklf喜欢hfjdkas'</span>)</span><br><span class="line">print(<span class="string">'a'</span> <span class="keyword">in</span> <span class="string">'bcvd'</span>)</span><br><span class="line">print(<span class="string">'y'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'ofkjdslaf'</span>)</span><br></pre></td></tr></table></figure><h5 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">max = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="comment"># 两者等价</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">max = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = b</span><br></pre></td></tr></table></figure><h5 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h5><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += <em>= *</em>=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h4 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h4><p>Python pass 是空语句，是为了保持程序结构的完整性。</p><p><strong>pass</strong> 不做任何事情，一般用做占位语句。</p><h4 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h4><p>返回输入对象的内存地址</p><h4 id="is和"><a href="#is和" class="headerlink" title="is和=="></a>is和==</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">is</span> b<span class="comment"># 比较内存地址</span></span><br><span class="line">a == b<span class="comment"># 比较值</span></span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>不可变（可哈希）的数据类型：int，str，bool，tuple。</p><p>可变（不可哈希）的数据类型：list，dict，set。</p></li></ul><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><p>不同进制间转化</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>bit_length(self)</td><td>转为对应二进制后有效位的长度</td></tr></tbody></table><h4 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h4><p>常用于条件</p><p>while 1：比while True：更高效</p><h4 id="str"><a href="#str" class="headerlink" title="str"></a>str</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由单(双)引号引起</span></span><br><span class="line"><span class="comment"># 三引号：带换行的字符串</span></span><br><span class="line"> msg = <span class="string">'''</span></span><br><span class="line"><span class="string"> 今天我想写首小诗，</span></span><br><span class="line"><span class="string"> 歌颂我的同桌，</span></span><br><span class="line"><span class="string"> 你看他那乌黑的短发，</span></span><br><span class="line"><span class="string"> 好像一只炸毛鸡。</span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure><h5 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h5><ul><li>法一</li></ul><table><thead><tr><th align="center">符号</th><th align="center">指代</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">str</td></tr><tr><td align="center">%d</td><td align="center">digit</td></tr><tr><td align="center">%i</td><td align="center">int</td></tr><tr><td align="center">%r</td><td align="center">输出时对应字符串带引号</td></tr><tr><td align="center">%%</td><td align="center">普通%号</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"Name:"</span>)</span><br><span class="line">age = input(<span class="string">"Age:"</span>)</span><br><span class="line">job = input(<span class="string">"Job:"</span>)</span><br><span class="line">hobbie = input(<span class="string">"Hobbie:"</span>)</span><br><span class="line"></span><br><span class="line">info = <span class="string">'''</span></span><br><span class="line"><span class="string">------------ info of %s ----------- #这里的每个%s就是一个占位符，本行的代表 后面拓号里的 name </span></span><br><span class="line"><span class="string">Name  : %s  #代表 name </span></span><br><span class="line"><span class="string">Age   : %s  #代表 age  </span></span><br><span class="line"><span class="string">job   : %s  #代表 job </span></span><br><span class="line"><span class="string">Hobbie: %s  #代表 hobbie </span></span><br><span class="line"><span class="string">------------- end -----------------</span></span><br><span class="line"><span class="string">'''</span> %(name,name,age,job,hobbie)  <span class="comment"># 这行的 % 号就是 把前面的字符串 与拓号 后面的 变量 关联起来 </span></span><br><span class="line"><span class="comment"># %%来输出普通百分号</span></span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><ul><li>法二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res=<span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(<span class="string">'egon'</span>,<span class="number">18</span>,<span class="string">'male'</span>)</span><br><span class="line">res=<span class="string">'&#123;1&#125; &#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'egon'</span>,<span class="number">18</span>,<span class="string">'male'</span>)</span><br><span class="line">res=<span class="string">'&#123;name&#125; &#123;age&#125; &#123;sex&#125;'</span>.format(sex=<span class="string">'male'</span>,name=<span class="string">'egon'</span>,age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure><ul><li><p>法三</p><p>f-strings 是python3.6开始加入标准库的格式化输出新的写法，这个格式化输出比之前的%s 或者 format 效率高并且更加简化，非常的好用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任意表达式</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;<span class="number">3</span>*<span class="number">21</span>&#125;</span>'</span>)  <span class="comment"># 63</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">'barry'</span></span><br><span class="line">print(<span class="string">f"全部大写：<span class="subst">&#123;name.upper()&#125;</span>"</span>)  <span class="comment"># 全部大写：BARRY</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典也可以</span></span><br><span class="line">teacher = &#123;<span class="string">'name'</span>: <span class="string">'太白金星'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">msg = <span class="string">f"The teacher is <span class="subst">&#123;teacher[<span class="string">'name'</span>]&#125;</span>, aged <span class="subst">&#123;teacher[<span class="string">'age'</span>]&#125;</span>"</span></span><br><span class="line">print(msg)  <span class="comment"># The comedian is 太白金星, aged 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表也行</span></span><br><span class="line">l1 = [<span class="string">'太白金星'</span>, <span class="number">18</span>]</span><br><span class="line">msg = <span class="string">f'姓名：<span class="subst">&#123;l1[<span class="number">0</span>]&#125;</span>,年龄：<span class="subst">&#123;l1[<span class="number">1</span>]&#125;</span>.'</span></span><br><span class="line">print(msg)  <span class="comment"># 姓名：太白金星,年龄：18.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用函数完成相应的功能，然后将返回值返回到字符串相应的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_a_b</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(<span class="string">'求和的结果为'</span> + <span class="string">f'<span class="subst">&#123;sum_a_b(a,b)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行</span></span><br><span class="line">name = <span class="string">'barry'</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">ajd = <span class="string">'handsome'</span></span><br><span class="line"></span><br><span class="line">speaker = <span class="string">f'''Hi <span class="subst">&#123;name&#125;</span>.</span></span><br><span class="line"><span class="string">You are <span class="subst">&#123;age&#125;</span> years old.</span></span><br><span class="line"><span class="string">You are a <span class="subst">&#123;ajd&#125;</span> guy!'''</span></span><br><span class="line"></span><br><span class="line">speaker = <span class="string">f'Hi <span class="subst">&#123;name&#125;</span>.'</span>\</span><br><span class="line">          <span class="string">f'You are <span class="subst">&#123;age&#125;</span> years old.'</span>\</span><br><span class="line">          <span class="string">f'You are a <span class="subst">&#123;ajd&#125;</span> guy!'</span></span><br><span class="line">print(speaker)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些细节</span></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;&#123;<span class="number">73</span>&#125;</span>&#125;"</span>)  <span class="comment"># &#123;73&#125;</span></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;&#123;&#123;<span class="number">73</span>&#125;</span>&#125;&#125;"</span>)  <span class="comment"># &#123;73&#125;</span></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;&#123;&#123;&#123;<span class="number">73</span>&#125;</span>&#125;&#125;&#125;"</span>)  <span class="comment"># &#123;&#123;73&#125;&#125;</span></span><br><span class="line">m = <span class="number">21</span></span><br><span class="line"><span class="comment"># ! , : &#123; &#125; ;这些标点不能出现在&#123;&#125; 这里面。</span></span><br><span class="line"><span class="comment"># print(f'&#123;;12&#125;')  # 报错</span></span><br><span class="line"><span class="comment"># 所以使用lambda 表达式会出现一些问题。</span></span><br><span class="line"><span class="comment"># 解决方式：可将lambda嵌套在圆括号里面解决此问题。</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;(<span class="keyword">lambda</span> x: x*<span class="number">2</span>) (x)&#125;</span>'</span>)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>按下标取值，从零开始</p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>通过索引（索引：索引：步长）截取字符串的一段，形成新的字符串</p><p><strong>左闭右开</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABCDEFGHIJK'</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># print(a[:3]) 从开头开始取0可以默认不写</span></span><br><span class="line">print(a[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">print(a[:]) <span class="comment">#默认到最后</span></span><br><span class="line">print(a[:<span class="number">-1</span>]) <span class="comment"># -1 是列表中最后一个元素的索引，但是要满足顾头不顾腚的原则，所以取不到K元素</span></span><br><span class="line">print(a[:<span class="number">5</span>:<span class="number">2</span>]) <span class="comment">#加步长</span></span><br><span class="line">print(a[<span class="number">-1</span>:<span class="number">-5</span>:<span class="number">-2</span>]) <span class="comment">#反向加步长</span></span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>upper(self)</td><td>转为大写</td></tr><tr><td>lower(self)</td><td>转为小写</td></tr><tr><td>count(str,i,j)</td><td>从i到j的切片中str出现了几次</td></tr><tr><td>startswith(str,i,j)</td><td>从i到j，是不是str，不写i，j时从头匹配</td></tr><tr><td>endswith(str,i,j)</td><td>从i到j，是不是str，不写i，j时从尾匹配</td></tr><tr><td>replace(str,i)</td><td>默认全部替换，i可以指定替换个数</td></tr><tr><td>strip()</td><td>去除空拍字符(\t,\n,空格)，从左右两边开始删到都一个非空白为止</td></tr><tr><td>lstrip()</td><td>删左侧</td></tr><tr><td>rstrip()</td><td>删右侧</td></tr><tr><td>strip(str)</td><td>去除在str中的字符</td></tr><tr><td>isalnum()</td><td>字符串由字母或数字组成</td></tr><tr><td>isalpha()</td><td>字符串只由字母组成</td></tr><tr><td>isdecimal()</td><td>字符串只由十进制组成</td></tr></tbody></table><p>len(str)    获取数据的元素个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split 以什么分割，最终形成一个列表此列表不含有这个分割的元素。</span></span><br><span class="line">ret9 = <span class="string">'title,Tilte,atre,'</span>.split(<span class="string">'t'</span>)</span><br><span class="line">print(ret9)</span><br><span class="line">ret91 = <span class="string">'title,Tilte,atre,'</span>.rsplit(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">print(ret91)</span><br><span class="line"></span><br><span class="line"><span class="comment"># join与split相对，若是str则以每个元素都以指定字符连接，多是给链表使用</span></span><br><span class="line">s1 = <span class="string">"advewvbe"</span></span><br><span class="line">s2 = <span class="string">"+"</span>.join(s1)</span><br><span class="line"><span class="comment">#  a+d+v+e+w+v+b+e</span></span><br><span class="line">l1 = [<span class="string">"2"</span>,<span class="string">"chjs"</span>,<span class="string">"你好"</span>]</span><br><span class="line">l2 = <span class="string">":"</span>.join(l1)</span><br><span class="line"><span class="comment">#  2:chjs:你好</span></span><br><span class="line"><span class="comment">#  列表中元素必须全是字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#寻找字符串中的元素是否存在</span></span><br><span class="line">ret6 = a4.find(<span class="string">"fjdk"</span>,<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">print(ret6)  <span class="comment"># 返回的找到的元素的索引，如果找不到返回-1</span></span><br><span class="line"></span><br><span class="line">ret61 = a4.index(<span class="string">"fjdk"</span>,<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">print(ret61) <span class="comment"># 返回的找到的元素的索引，找不到报错。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#captalize,swapcase,title</span></span><br><span class="line">print(name.capitalize()) <span class="comment">#首字母大写</span></span><br><span class="line">print(name.swapcase()) <span class="comment">#大小写翻转</span></span><br><span class="line">msg=<span class="string">'taibai say hi'</span></span><br><span class="line">print(msg.title()) <span class="comment">#每个单词的首字母大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内同居中，总长度，空白处填充</span></span><br><span class="line">ret2 = a1.center(<span class="number">20</span>,<span class="string">"*"</span>)</span><br><span class="line">print(ret2)</span><br></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>l1 = [100, ‘alex’,True,[1, 2, 3]] </p><ul><li>承载任意数据类型，存储大量的数据</li><li>python常用的容器型数据类型。相当于其他语言的数组</li><li>列表是有序的，可索引，切片（步长）</li></ul><h5 id="切片，索引"><a href="#切片，索引" class="headerlink" title="切片，索引"></a>切片，索引</h5><p>同str</p><h5 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表的创建</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="comment"># l1 = [1, 2, 'Alex']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二  对可迭代的数据类型</span></span><br><span class="line"><span class="comment"># l1 = list()</span></span><br><span class="line"><span class="comment"># l1 = list('fhdsjkafsdafhsdfhsdaf')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"><span class="comment"># ['f', 'h', 'd', 's', 'j', 'k', 'h', 's', 'd', 'a', 'f']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三：列表推导式</span></span><br><span class="line"><span class="comment"># [i(对i的简单处理) 循环(可多层，但一般最多两到三层) 条件]</span></span><br><span class="line"><span class="comment"># 循环模式[变量(加工的变量) for 变量 in iterable]</span></span><br><span class="line"><span class="comment"># 多层循环[变量(加工的变量) for i in iterable for j in iterable]</span></span><br><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">print(l1)  <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">l2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>)] + list(<span class="string">"JQKA"</span>)<span class="comment">#扑克(不完整)</span></span><br><span class="line"><span class="comment"># 筛选模式[变量(加工的变量) for 变量 in iterable if 条件]</span></span><br></pre></td></tr></table></figure><h5 id="列表的增删改查"><a href="#列表的增删改查" class="headerlink" title="列表的增删改查"></a>列表的增删改查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增删改查</span></span><br><span class="line">l1 = [<span class="string">'太白'</span>, <span class="string">'女神'</span>, <span class="string">'xiao'</span>,<span class="string">'吴老师'</span>, <span class="string">'闫龙'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：</span></span><br><span class="line"><span class="comment"># append:追加</span></span><br><span class="line"><span class="comment"># l1.append('xx')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># insert 插入</span></span><br><span class="line"><span class="comment"># l1.insert(2,'wusir')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#extend 迭代着追加</span></span><br><span class="line"><span class="comment"># l1.extend('abcd')</span></span><br><span class="line"><span class="comment"># l1.extend(['alex',])</span></span><br><span class="line"><span class="comment"># l1.extend(['alex', 1, 3])</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># pop 按照索引位置删除，返回的是删除的元素</span></span><br><span class="line"><span class="comment"># l1.pop(-2)  # 按照索引删除</span></span><br><span class="line"><span class="comment"># print(l1.pop(-2))</span></span><br><span class="line"><span class="comment"># l1.pop()  # 默认删除最后一个</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove  指定元素删除,如果有重名元素，默认删除从左数第一个</span></span><br><span class="line"><span class="comment"># l1.remove('xiao')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear(了解)</span></span><br><span class="line"><span class="comment"># l1.clear() # 清空</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line">    <span class="comment"># 按照索引删除</span></span><br><span class="line">    <span class="comment"># del l1[-1]</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line">    <span class="comment"># 按照切片(步长)删除</span></span><br><span class="line">    <span class="comment"># del l1[::2]</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">    <span class="comment"># 按照索引改值</span></span><br><span class="line">    <span class="comment"># l1[0] = '男神'</span></span><br><span class="line">    <span class="comment"># 按照切片改（了解）整个切片替换</span></span><br><span class="line">    <span class="comment"># l1[2:] = 'fsdafsdafsdfdsfsadfdsfdsgsfdag'</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line">    <span class="comment"># 按照切片（步长）逐个替换，对应个数必须相同</span></span><br><span class="line">    <span class="comment"># l1[::2] = 'abc'</span></span><br><span class="line">    <span class="comment"># l1[::2] = 'abcd'</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：</span></span><br><span class="line"><span class="comment"># 索引，切片（步长）</span></span><br><span class="line"><span class="comment"># for i in l1:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br></pre></td></tr></table></figure><h5 id="列表相加或相乘"><a href="#列表相加或相乘" class="headerlink" title="列表相加或相乘"></a>列表相加或相乘</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># print(l1+l2)  # [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">print(l1*<span class="number">3</span>)  <span class="comment"># [1, 2, 3, 1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><p>count（数）（方法统计某个元素在列表中出现的次数）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"q"</span>,<span class="string">"w"</span>,<span class="string">"q"</span>,<span class="string">"r"</span>,<span class="string">"t"</span>,<span class="string">"y"</span>]</span><br><span class="line">print(a.count(<span class="string">"q"</span>))</span><br></pre></td></tr></table></figure><p>index（方法用于从列表中找出某个值第一个匹配项的索引位置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"q"</span>,<span class="string">"w"</span>,<span class="string">"r"</span>,<span class="string">"t"</span>,<span class="string">"y"</span>]</span><br><span class="line">print(a.index(<span class="string">"r"</span>))</span><br></pre></td></tr></table></figure><p>sort （方法用于在原位置对列表进行排序）</p><p> reverse （方法将列表中的元素反向存放）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.sort()<span class="comment"># 他没有返回值，所以只能打印a</span></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)<span class="comment"># 默认单增，这样可以单减</span></span><br><span class="line">print(a)</span><br><span class="line">a.reverse()<span class="comment">#他也没有返回值，所以只能打印a</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a>列表的嵌套</h5><p>相当于多维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'taibai'</span>, [<span class="number">1</span>, <span class="string">'alex'</span>, <span class="number">3</span>,]]</span><br><span class="line"><span class="comment"># 1, 将l1中的'taibai'变成大写并放回原处。</span></span><br><span class="line"><span class="comment"># 2，给小列表[1,'alex',3,]追加一个元素,'老男孩教育'。</span></span><br><span class="line">l1[<span class="number">3</span>] = l1[<span class="number">3</span>].append(<span class="string">"老男孩教育"</span>)</span><br><span class="line"><span class="comment"># 3，将列表中的'alex'通过字符串拼接的方式在列表中变成'alexsb'</span></span><br></pre></td></tr></table></figure><h5 id="循环列表，改变列表大小的问题"><a href="#循环列表，改变列表大小的问题" class="headerlink" title="循环列表，改变列表大小的问题"></a>循环列表，改变列表大小的问题</h5><p>用这个进行举例：当你循环到22时，你将列表中的22删除了，但是你带来的影响是：33,44,55都会往前进一位，他们的索引由原来的2,3,4变成了1,2,3 所以你在往下进行循环时，就会发现，额……..完全不对了</p><p>所以for循环遍历本质是在<strong>按索引遍历</strong>，正序遍历时删除元素会打乱原有顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> len(l1):</span><br><span class="line">    <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        l1.pop(index)</span><br><span class="line"><span class="comment"># [11,33,44]</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208200213.png" alt></p><ul><li>直接删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">del</span> l1[<span class="number">1</span>::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>倒序删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l1)<span class="number">-1</span>:<span class="number">-1</span>:<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">l1.pop(i)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208201450.png" alt></p><ul><li>思维转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">new_l1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> len(l1):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        new_l1.append(i)</span><br><span class="line">l1 = new_l1</span><br></pre></td></tr></table></figure><p>循环一个列表时<strong>最好不要改变</strong>列表的大小，容易出现错误</p><p>必须修改时可以用<strong>上诉三种方法</strong></p><h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><p>俗称不可变的列表,又被成为只读列表,也是python的基本数据类型之一,用小括号括起来,里面可以放任何数据类型的数据,查询可以,循环也可以,切片也可以.但就是不能改.</p><p>当元组中包含可变类型时，其仍可变，如包含链表时，该链表仍可修改</p><p>python中元组有一个特性，元组中如果只含有一个元素且没有逗号，则该元组不是元组，与改元素数据类型一致，如果有逗号，那么它是元组</p><p><strong>拆包专用</strong>，虽然链表也可以拆</p><h5 id="拆包-分别赋值"><a href="#拆包-分别赋值" class="headerlink" title="拆包(分别赋值)"></a>拆包(分别赋值)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">a,b = (<span class="string">'你好'</span>,<span class="string">'世界'</span>)  <span class="comment"># 这个用专业名词就叫做元组的拆包</span></span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line">你好 世界</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a,b = [<span class="string">'你好'</span>,<span class="string">'大飞哥'</span>]</span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line">你好 世界</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a,b = &#123;<span class="string">'汪峰'</span>:<span class="string">'北京北京'</span>,<span class="string">'王菲'</span>:<span class="string">'天后'</span>&#125;</span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line">汪峰 王菲</span><br></pre></td></tr></table></figure><h5 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tu1 = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'太白'</span>, <span class="number">3</span>, <span class="number">666</span>)</span><br><span class="line">print(tu1[<span class="number">0</span>])  <span class="comment"># 'a'</span></span><br><span class="line">print(tu1[<span class="number">-1</span>])  <span class="comment"># 666</span></span><br><span class="line">print(tu1[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># ('b', '太白')</span></span><br><span class="line">print(tu1[:<span class="number">-1</span>])  <span class="comment"># ('a', 'b', '太白', 3)</span></span><br><span class="line">print(tu1[::<span class="number">2</span>])  <span class="comment"># ('a', '太白', 666)</span></span><br><span class="line">print(tu1[::<span class="number">-1</span>])  <span class="comment"># (666, 3, '太白', 'b', 'a')</span></span><br></pre></td></tr></table></figure><h5 id="其他操作-1"><a href="#其他操作-1" class="headerlink" title="其他操作"></a>其他操作</h5><p>因为元组的特性，直接从属于元组的元素不能更改，所以元组只能查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以利用for循环查询</span></span><br><span class="line"></span><br><span class="line">tu1 = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'太白'</span>, <span class="number">3</span>, <span class="number">666</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tu1:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>index</strong>：通过元素找索引（可切片），找到第一个元素就返回，找不到该元素即报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="string">'太白'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ], <span class="string">'WuSir'</span>, <span class="string">'女神'</span>)</span><br><span class="line">print(tu.index(<span class="string">'太白'</span>)) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p><strong>count</strong>: 获取某元素在列表中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="string">'太白'</span>, <span class="string">'太白'</span>, <span class="string">'WuSir'</span>, <span class="string">'吴超'</span>)</span><br><span class="line">print(tu.count(<span class="string">'太白'</span>)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h4><p>字典是Python语言中的映射类型，他是以{}括起来，里面的内容是以键值对的形式储存的：</p><p> Key: 不可变（可哈希）的数据类型.并且键是唯一的，不重复的。</p><p> Value:任意数据(int，str，bool，tuple，list，dict，set)，包括后面要学的实例对象等。</p><p>在Python3.5版本（包括此版本）之前，字典是无序的。</p><p>在Python3.6版本之后，字典会按照初建字典时的顺序排列(即第一次插入数据的顺序排序)。</p><p>当然，字典也有缺点：他的缺点就是内存消耗巨大。</p><h5 id="为何查询快？"><a href="#为何查询快？" class="headerlink" title="为何查询快？"></a>为何查询快？</h5><p>底层用了散列表</p><p><img src="http://crm.pythonav.com/media/uploads/2019/03/28/IMAGE.PNG" alt></p><h5 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1:元组</span></span><br><span class="line">dic = dict(((<span class="string">'one'</span>, <span class="number">1</span>),(<span class="string">'two'</span>, <span class="number">2</span>),(<span class="string">'three'</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="comment"># dic = dict([('one', 1),('two', 2),('three', 3)])</span></span><br><span class="line">print(dic)  <span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:关键字</span></span><br><span class="line">dic = dict(one=<span class="number">1</span>,two=<span class="number">2</span>,three=<span class="number">3</span>)</span><br><span class="line">print(dic)  <span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式3:键值对</span></span><br><span class="line">dic = dict(&#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;)</span><br><span class="line">print(dic)  <span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式5:内置函数zip</span></span><br><span class="line">dic = dict(zip([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式6:字典推导式</span></span><br><span class="line">dic = &#123; k: v <span class="keyword">for</span> k,v <span class="keyword">in</span> [(<span class="string">'one'</span>, <span class="number">1</span>),(<span class="string">'two'</span>, <span class="number">2</span>),(<span class="string">'three'</span>, <span class="number">3</span>)]&#125;</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式7:利用fromkey("keys(可迭代类型)","所有键共用的值")</span></span><br><span class="line">dic = dict.fromkeys(<span class="string">'abcd'</span>,<span class="string">'太白'</span>)</span><br><span class="line">print(dic) <span class="comment"># &#123;'a': '太白', 'b': '太白', 'c': '太白', 'd': '太白'&#125;</span></span><br><span class="line"></span><br><span class="line">dic = dict.fromkeys([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],<span class="string">'太白'</span>)</span><br><span class="line">print(dic) <span class="comment"># &#123;1: '太白', 2: '太白', 3: '太白'&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里有一个坑，就是如果通过fromkeys得到的字典的值为可变的数据类型，那么你的小心了。</span></span><br><span class="line">dic = dict.fromkeys([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [])</span><br><span class="line">dic[<span class="number">1</span>].append(<span class="number">666</span>)</span><br><span class="line">print(id(dic[<span class="number">1</span>]),id(dic[<span class="number">2</span>]),id(dic[<span class="number">3</span>]))  <span class="comment"># &#123;1: [666], 2: [666], 3: [666]&#125;</span></span><br><span class="line">print(dic)  <span class="comment"># &#123;1: [666], 2: [666], 3: [666]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">lst1 = [<span class="string">'jay'</span>,<span class="string">'jj'</span>,<span class="string">'meet'</span>]</span><br><span class="line">lst2 = [<span class="string">'周杰伦'</span>,<span class="string">'林俊杰'</span>,<span class="string">'郭宝元'</span>]</span><br><span class="line">dic = &#123;lst1[i]:lst2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst1))&#125;</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># 通过键值对直接增加  有则改之，无则增加</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic[<span class="string">'weight'</span>] = <span class="number">75</span> <span class="comment"># 没有weight这个键，就增加键值对</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'weight': 75&#125;</span></span><br><span class="line">    dic[<span class="string">'name'</span>] = <span class="string">'barry'</span> <span class="comment"># 有name这个键，就成了字典的改值</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': 'barry', 'age': 18, 'weight': 75&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setdefault有则不变，无则加之</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic.setdefault(<span class="string">'height'</span>,<span class="number">175</span>) <span class="comment"># 没有height此键，则添加</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'height': 175&#125;</span></span><br><span class="line">    dic.setdefault(<span class="string">'name'</span>,<span class="string">'barry'</span>) <span class="comment"># 有此键则不变</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'height': 175&#125;</span></span><br><span class="line">    <span class="comment">#它有返回值可用于查看</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    ret = dic.setdefault(<span class="string">'name'</span>)</span><br><span class="line">    print(ret)  <span class="comment"># 太白</span></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># pop 通过key删除字典的键值对，有返回值，可设置返回值。</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    <span class="comment"># ret = dic.pop('name')</span></span><br><span class="line">    <span class="comment"># print(ret,dic) # 太白 &#123;'age': 18&#125;</span></span><br><span class="line">    ret1 = dic.pop(<span class="string">'n'</span>,<span class="literal">None</span>)</span><br><span class="line">    print(ret1,dic) <span class="comment"># None &#123;'name': '太白', 'age': 18&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#popitem 3.5版本之前，popitem为随机删除，3.6之后为删除最后一个，有返回值</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    ret = dic.popitem()</span><br><span class="line">    print(ret,dic) <span class="comment"># ('age', 18) &#123;'name': '太白'&#125;</span></span><br><span class="line"><span class="comment"># 值可以重复，所以不像其他有remove方法</span></span><br><span class="line">    <span class="comment"># clear 清空字典</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic.clear()</span><br><span class="line">    print(dic) <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># del</span></span><br><span class="line">    <span class="comment"># 通过键删除键值对</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    <span class="keyword">del</span> dic[<span class="string">'name'</span>]</span><br><span class="line">    print(dic) <span class="comment"># &#123;'age': 18&#125;</span></span><br><span class="line">    <span class="comment">#删除整个字典</span></span><br><span class="line">    <span class="keyword">del</span> dic</span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">    <span class="comment"># 通过键值对直接改</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic[<span class="string">'name'</span>] = <span class="string">'barry'</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': 'barry', 'age': 18&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># update类似于创建字典</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    </span><br><span class="line">    dic.update(sex=<span class="string">'男'</span>, height=<span class="number">175</span>)</span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'sex': '男', 'height': 175&#125;</span></span><br><span class="line"></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic.update([(<span class="number">1</span>, <span class="string">'a'</span>),(<span class="number">2</span>, <span class="string">'b'</span>),(<span class="number">3</span>, <span class="string">'c'</span>),(<span class="number">4</span>, <span class="string">'d'</span>)])</span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 1: 'a', 2: 'b', 3: 'c', 4: 'd'&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 有则加之，无则不变</span></span><br><span class="line">    dic1 = &#123;<span class="string">"name"</span>:<span class="string">"jin"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">    dic2 = &#123;<span class="string">"name"</span>:<span class="string">"alex"</span>,<span class="string">"weight"</span>:<span class="number">75</span>&#125;</span><br><span class="line">    dic1.update(dic2)</span><br><span class="line">    print(dic1) <span class="comment"># &#123;'name': 'alex', 'age': 18, 'sex': 'male', 'weight': 75&#125;</span></span><br><span class="line">    print(dic2) <span class="comment"># &#123;'name': 'alex', 'weight': 75&#125; </span></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">    <span class="comment"># 通过键查询</span></span><br><span class="line">    <span class="comment"># 直接dic[key](没有此键会报错)</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic[<span class="string">'name'</span>]) <span class="comment"># 太白</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    v = dic.get(<span class="string">'name'</span>)</span><br><span class="line">    print(v) <span class="comment"># '太白'</span></span><br><span class="line">    v = dic.get(<span class="string">'name1'</span>)</span><br><span class="line">    print(v) <span class="comment"># None</span></span><br><span class="line">    v = dic.get(<span class="string">'name2'</span>,<span class="string">'没有此键'</span>)</span><br><span class="line">    print(v) <span class="comment"># 没有此键 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    keys()</span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic.keys()) <span class="comment"># dict_keys(['name', 'age']) </span></span><br><span class="line"></span><br><span class="line">    values()</span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic.values()) <span class="comment"># dict_values(['太白', 18])</span></span><br><span class="line"></span><br><span class="line">    items()</span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic.items()) <span class="comment"># dict_items([('name', '太白'), ('age', 18)])</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    dict_keys(['name', 'age'])  dict_values(['太白', 18]) dict_items([('name', '太白'), ('age', 18)])</span></span><br><span class="line"><span class="string">    这些高仿的列表可以用于for循环，亦可传入list()来转换为真正的列表</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><h5 id="字典的嵌套"><a href="#字典的嵌套" class="headerlink" title="字典的嵌套"></a>字典的嵌套</h5><h5 id="循环字典，改变字典大小的问题"><a href="#循环字典，改变字典大小的问题" class="headerlink" title="循环字典，改变字典大小的问题"></a>循环字典，改变字典大小的问题</h5><p>来，先来研究一个小题，有如下字典：</p><p>dic = {‘k1’:’太白’,’k2’:’barry’,’k3’: ‘白白’, ‘age’: 18} 请将字典中所有键带k元素的键值对删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'太白'</span>,<span class="string">'k2'</span>:<span class="string">'barry'</span>,<span class="string">'k3'</span>: <span class="string">'白白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'k'</span> <span class="keyword">in</span> i:</span><br><span class="line">        <span class="keyword">del</span> dic[i]</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你会发现，报错了。。。。。</span></span><br><span class="line"><span class="comment"># 错误原因：</span></span><br><span class="line"><span class="comment"># RuntimeError: dictionary changed size during iteration</span></span><br><span class="line"><span class="comment"># 翻译过来是：字典在循环迭代时，改变了大小。</span></span><br></pre></td></tr></table></figure><p>所以说，他和列表差不多，只不过比列表更暴力一些，对其进行总结就是：</p><p>在循环一个字典的过程中，<strong>不要改变字典的大小</strong>（增，删字典的元素），这样会直接报错。</p><ul><li>思维转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 = []</span><br><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'太白'</span>,<span class="string">'k2'</span>:<span class="string">'barry'</span>,<span class="string">'k3'</span>: <span class="string">'白白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'k'</span> <span class="keyword">in</span> key:</span><br><span class="line">        l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">    dic.pop(i)</span><br></pre></td></tr></table></figure><ul><li>简化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'太白'</span>,<span class="string">'k2'</span>:<span class="string">'barry'</span>,<span class="string">'k3'</span>: <span class="string">'白白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> list(dic.keys()):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'k'</span> <span class="keyword">in</span> key:</span><br><span class="line">        dic.pop(key)</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>集合是无序的，不重复的数据集合</p><p>它里面的元素是可哈希的(不可变类型)，但是集合本身不可哈希（所以集合做不了字典的键）</p><p>以下是集合最重要的两点：</p><p>　　<strong>去重</strong>，把一个列表变成集合，就自动去重了。</p><p>　　<strong>关系测试</strong>，测试两组数据之前的交集、差集、并集等关系。</p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一</span></span><br><span class="line">set1 = set(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">'barry'</span>&#125;)</span><br><span class="line"><span class="comment"># 二</span></span><br><span class="line">set2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">'barry'</span>&#125;</span><br><span class="line">print(set1,set2)  <span class="comment"># &#123;1, 2, 'barry'&#125; &#123;1, 2, 'barry'&#125;</span></span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">-7</span>,<span class="number">9</span>]</span><br><span class="line">s = &#123;abs(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst&#125;</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h5 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 增</span></span><br><span class="line">    set1 = &#123;<span class="string">'alex'</span>,<span class="string">'wusir'</span>,<span class="string">'ritian'</span>,<span class="string">'egon'</span>,<span class="string">'barry'</span>&#125;</span><br><span class="line">    set1.add(<span class="string">'景女神'</span>)</span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#update：迭代着增加</span></span><br><span class="line">    set1.update(<span class="string">'A'</span>)</span><br><span class="line">    print(set1)</span><br><span class="line">    set1.update(<span class="string">'老师'</span>)</span><br><span class="line">    print(set1)</span><br><span class="line">    set1.update([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">    print(set1)</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">    set1 = &#123;<span class="string">'alex'</span>,<span class="string">'wusir'</span>,<span class="string">'ritian'</span>,<span class="string">'egon'</span>,<span class="string">'barry'</span>&#125;</span><br><span class="line"><span class="comment"># 因为无序，所以没有按所以删除</span></span><br><span class="line">    set1.remove(<span class="string">'alex'</span>)  <span class="comment"># 按内容删</span></span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    set1.pop()  <span class="comment"># 随机删除一个元素</span></span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    set1.clear()  <span class="comment"># 清空集合</span></span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> set1  <span class="comment"># 删除集合</span></span><br><span class="line">    print(set1)</span><br><span class="line"><span class="comment"># 无序，所以无法改查</span></span><br><span class="line"><span class="comment"># 但改可以通过先把要改元素删除，再把要改成的数据作为新值加入</span></span><br></pre></td></tr></table></figure><h5 id="集合的其他操作"><a href="#集合的其他操作" class="headerlink" title="集合的其他操作"></a>集合的其他操作</h5><p>4.1 交集。（&amp; 或者 intersection）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 &amp; set2)  <span class="comment"># &#123;4, 5&#125;</span></span><br><span class="line">print(set1.intersection(set2))  <span class="comment"># &#123;4, 5&#125;</span></span><br></pre></td></tr></table></figure><p>　　4.2 并集。（| 或者 union）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 | set2)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7,8&#125;print(set2.union(set1))  # &#123;1, 2, 3, 4, 5, 6, 7,8&#125;</span></span><br></pre></td></tr></table></figure><p>　　4.3 差集。（- 或者 difference）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 - set2)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line">print(set1.difference(set2))  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><p> 　4.4反交集。 （^ 或者 symmetric_difference）        排斥或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 ^ set2)  <span class="comment"># &#123;1, 2, 3, 6, 7, 8&#125;</span></span><br><span class="line">print(set1.symmetric_difference(set2))  <span class="comment"># &#123;1, 2, 3, 6, 7, 8&#125;</span></span><br></pre></td></tr></table></figure><p>　　4.5子集与超集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">print(set1 &lt; set2)</span><br><span class="line">print(set1.issubset(set2))  <span class="comment"># 这两个相同，都是说明set1是set2子集。</span></span><br><span class="line"></span><br><span class="line">print(set2 &gt; set1)</span><br><span class="line">print(set2.issuperset(set1))  <span class="comment"># 这两个相同，都是说明set2是set1超集。</span></span><br></pre></td></tr></table></figure><p>5，frozenset不可变集合，让集合变成不可变类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = frozenset(<span class="string">'barry'</span>)</span><br><span class="line">print(s,type(s))  <span class="comment"># frozenset(&#123;'a', 'y', 'b', 'r'&#125;) &lt;class 'frozenset'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据类型转化"><a href="#数据类型转化" class="headerlink" title="数据类型转化"></a>数据类型转化</h3><h4 id="bool，int，str互化"><a href="#bool，int，str互化" class="headerlink" title="bool，int，str互化"></a>bool，int，str互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int ---&gt; bool</span></span><br><span class="line">i = <span class="number">100</span></span><br><span class="line">print(bool(i))  <span class="comment"># True  # 非零即True</span></span><br><span class="line">i1 = <span class="number">0</span></span><br><span class="line">print(bool(i1))  <span class="comment"># False 零即False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool ---&gt; int</span></span><br><span class="line">t = <span class="literal">True</span></span><br><span class="line">print(int(t))  <span class="comment"># 1  True --&gt; 1</span></span><br><span class="line">t = <span class="literal">False</span></span><br><span class="line">print(int(t))  <span class="comment"># 0  False --&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int ---&gt; str</span></span><br><span class="line">i1 = <span class="number">100</span></span><br><span class="line">print(str(i1))  <span class="comment"># '100'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str ---&gt; int  # 全部由数字组成的字符串才可以转化成数字</span></span><br><span class="line">s1 = <span class="string">'90'</span></span><br><span class="line">print(int(s1))  <span class="comment"># 90</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str ---&gt; bool</span></span><br><span class="line">s1 = <span class="string">'太白'</span></span><br><span class="line">s2 = <span class="string">''</span></span><br><span class="line">print(bool(s1))  <span class="comment"># True 非空即True</span></span><br><span class="line">print(bool(s2))  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># bool ---&gt; str</span></span><br><span class="line">t1 = <span class="literal">True</span></span><br><span class="line">print(str(<span class="literal">True</span>))  <span class="comment"># 'True'</span></span><br></pre></td></tr></table></figure><h4 id="str，list互化"><a href="#str，list互化" class="headerlink" title="str，list互化"></a>str，list互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str ---&gt; list</span></span><br><span class="line">s1 = <span class="string">'alex 太白 武大'</span></span><br><span class="line">print(s1.split())  <span class="comment"># ['alex', '太白', '武大']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list ---&gt; str  # 前提 list 里面所有的元素必须是字符串类型才可以</span></span><br><span class="line">l1 = [<span class="string">'alex'</span>, <span class="string">'太白'</span>, <span class="string">'武大'</span>]</span><br><span class="line">print(<span class="string">' '</span>.join(l1))  <span class="comment"># 'alex 太白 武大'</span></span><br></pre></td></tr></table></figure><h4 id="list-set互化"><a href="#list-set互化" class="headerlink" title="list set互化"></a>list set互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list ---&gt; set</span></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(set(s1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set ---&gt; list</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>,&#125;</span><br><span class="line">print(list(set1))  <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="str，bytes互化"><a href="#str，bytes互化" class="headerlink" title="str，bytes互化"></a>str，bytes互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str ---&gt; bytes</span></span><br><span class="line">s1 = <span class="string">'太白'</span></span><br><span class="line">print(s1.encode(<span class="string">'utf-8'</span>))  <span class="comment"># b'\xe5\xa4\xaa\xe7\x99\xbd'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bytes ---&gt; str</span></span><br><span class="line">b = <span class="string">b'\xe5\xa4\xaa\xe7\x99\xbd'</span></span><br><span class="line">print(b.decode(<span class="string">'utf-8'</span>))  <span class="comment"># '太白'</span></span><br></pre></td></tr></table></figure><h4 id="所有皆可转为bool"><a href="#所有皆可转为bool" class="headerlink" title="所有皆可转为bool"></a>所有皆可转为bool</h4><p>转化成bool值为False的数据类型有：<br>‘’, 0, (), {}, [], set(), None</p><h3 id="基础数据类型总结"><a href="#基础数据类型总结" class="headerlink" title="基础数据类型总结"></a>基础数据类型总结</h3><p><a href="https://www.processon.com/view/link/5c99fe1fe4b0353e3c62e606#map" target="_blank" rel="noopener">思维导图</a></p><h4 id="按存储空间的占用分（从低到高）"><a href="#按存储空间的占用分（从低到高）" class="headerlink" title="按存储空间的占用分（从低到高）"></a>按存储空间的占用分（从低到高）</h4><p>数字<br>字符串<br>集合：无序，即无序存索引相关信息<br>元组：有序，需要存索引相关信息，不可变<br>列表：有序，需要存索引相关信息，可变，需要处理数据的增删改<br>字典：有序，需要存key与value映射的相关信息，可变，需要处理数据的增删改（3.6之后有序）</p><h4 id="按存值个数区分"><a href="#按存值个数区分" class="headerlink" title="按存值个数区分"></a>按存值个数区分</h4><table><thead><tr><th>标量／原子类型</th><th>数字，字符串</th></tr></thead><tbody><tr><td>容器类型</td><td>列表，元组，字典</td></tr></tbody></table><h4 id="按可变不可变区分"><a href="#按可变不可变区分" class="headerlink" title="按可变不可变区分"></a>按可变不可变区分</h4><table><thead><tr><th>可变</th><th>列表，字典</th></tr></thead><tbody><tr><td>不可变</td><td>数字，字符串，元组，布尔值</td></tr></tbody></table><h4 id="按访问顺序区分"><a href="#按访问顺序区分" class="headerlink" title="按访问顺序区分"></a>按访问顺序区分</h4><table><thead><tr><th>直接访问</th><th>数字</th></tr></thead><tbody><tr><td>顺序访问（序列类型）</td><td>字符串，列表，元组</td></tr><tr><td>key值访问（映射类型）</td><td>字典</td></tr></tbody></table><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>相当于生活中的一次次决策</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本结构</span></span><br><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    结果</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> int(age) &gt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'恭喜你，成年了'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'小屁孩儿'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 多个条件，python中无switch...case...    </span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'晚上请你吃饭'</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'一起溜达'</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'请你大宝剑'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'太笨了....'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># if可以嵌套</span></span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>用于重复执行的代码，一般没有明确次数用while，有确定次数用for</p><p>一般得在循环体内改变条件，或使用break，否则会出现死循环</p><p><img src="http://crm.pythonav.com/media/uploads/2019/03/27/IMAGE.PNG" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">在循环正常结束时执行</span><br><span class="line">若通过<span class="keyword">break</span>跳出则不执行</span><br></pre></td></tr></table></figure><p>continue：跳过本次条件</p><p>break：跳出循环</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>for…else   同while用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'老男孩python是全国范围内最好的python培训机构'</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> msg:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line">li = [<span class="string">'alex'</span>,<span class="string">'银角'</span>,<span class="string">'女神'</span>,<span class="string">'egon'</span>,<span class="string">'太白'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">'name'</span>:<span class="string">'太白'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'sex'</span>:<span class="string">'man'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure><h4 id="与循环配合的方法"><a href="#与循环配合的方法" class="headerlink" title="与循环配合的方法"></a>与循环配合的方法</h4><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><p>指定范围，生成指定数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>):  <span class="comment"># 步长</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">1</span>,<span class="number">-2</span>): <span class="comment"># 反向步长</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h5 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h5><p>枚举，对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'alex'</span>,<span class="string">'银角'</span>,<span class="string">'女神'</span>,<span class="string">'egon'</span>,<span class="string">'太白'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(li):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">for</span> index,name <span class="keyword">in</span> enumerate(li,<span class="number">1</span>):</span><br><span class="line">    print(index,name)</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(li, <span class="number">100</span>):  <span class="comment"># 起始位置默认是0，可更改</span></span><br><span class="line">    print(index, name)</span><br></pre></td></tr></table></figure><h3 id="控制台输入输出"><a href="#控制台输入输出" class="headerlink" title="控制台输入输出"></a>控制台输入输出</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"请输入用户名"</span>)</span><br></pre></td></tr></table></figure><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"name"</span>)</span><br><span class="line"><span class="comment"># 默认输出自带换行</span></span><br><span class="line">print(name,end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h4><p>计算机存储，传输文件底层都是二进制码</p><p>解码：将二进制文件按对应编码还原为数据</p><p>编码：将数据按指定编码转为二进制数据</p><h4 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h4><h5 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h5><p>最早的编码，只包含英文字母，数字，特殊字符</p><table><thead><tr><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>0</td><td>48</td></tr><tr><td>9</td><td>57</td></tr><tr><td>A</td><td>65</td></tr><tr><td>Z</td><td>90</td></tr><tr><td>a</td><td>97</td></tr><tr><td>z</td><td>122</td></tr></tbody></table><p><strong>每个字符对应8bit</strong></p><h5 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h5><p>国标，包含英文字母，数字，特殊字符，中文</p><p><strong>一个英文字符占1byte</strong></p><p><strong>一个中文字符占2byte</strong></p><h5 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h5><p>万国码，把世界上所有的文字都记录</p><p>起初每个字符用2byte，后来为了记录所有，每个字符用4byte</p><p>虽然全面，但浪费资源</p><h5 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h5><p>Unicode升级版</p><table><thead><tr><th align="left">字符</th><th align="left">大小</th></tr></thead><tbody><tr><td align="left">英文</td><td align="left">1byte</td></tr><tr><td align="left">欧洲文字</td><td align="left">2byte</td></tr><tr><td align="left">中文，亚洲文字</td><td align="left">3byte</td></tr></tbody></table><h4 id="数据大小"><a href="#数据大小" class="headerlink" title="数据大小"></a>数据大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">8bit = 1byte</span><br><span class="line">1024byte = 1KB</span><br><span class="line">1024KB = 1MB</span><br><span class="line">1024MB = 1GB</span><br><span class="line">1024GB = 1TB</span><br><span class="line">1024TB = 1PB</span><br><span class="line">1024TB = 1EB</span><br><span class="line">1024EB = 1ZB</span><br><span class="line">1024ZB = 1YB</span><br><span class="line">1024YB = 1NB</span><br><span class="line">1024NB = 1DB</span><br></pre></td></tr></table></figure><h4 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h4><p>　　<strong>1. 在计算机内存中，统一使用Unicode编码，当需要将数据保存到硬盘或者需要网络传输的时候，就转换为非Unicode编码比如：UTF-8编码。</strong></p><p>　　其实这个不用深入理解，他就是规定，举个例子：用文件编辑器（word，wps,等）编辑文件的时候，从文件将你的数据（此时你的数据是非Unicode（可能是UTF-8，也可能是gbk，这个编码取决于你的编辑器设置））字符被转换为Unicode字符读到内存里，进行相应的编辑，编辑完成后，保存的时候再把Unicode转换为非Unicode（UTF-8，GBK 等）保存到文件。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208211253.png" alt></p><p>　　<strong>2. 不同编码之间，不能直接互相识别。</strong></p><p>　　比如你的一个数据：‘老铁没毛病’是以utf-8的编码方式编码并发送给一个朋友，那么你发送的肯定是通过utf-8的编码转化成的二进制01010101，那么你的朋友接收到你发的这个数据，他如果想查看这个数据必须将01010101转化成汉字，才可以查看，那么此时那也必须通过utf-8编码反转回去，如果要是通过gbk编码反转，那么这个内容可能会出现乱码或者报错</p><p><strong>前提条件</strong>：python3x版本（python2x版本与这个不同）。</p><p><strong>主要用途</strong>：数据的存储或者传输。</p><p>刚才咱们也说过了，在计算机内存中，统一使用Unicode编码，当需要将数据<strong>保存到硬盘或者需要网络传输</strong>的时候，就转换为非Unicode编码比如：UTF-8编码</p><h4 id="引例：网络传输"><a href="#引例：网络传输" class="headerlink" title="引例：网络传输"></a>引例：网络传输</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208211432.png" alt></p><p>解决方式：用bytes做中介</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208211510.png" alt></p><h4 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h4><table><thead><tr><th>类名</th><th>str类型</th><th>bytes类型</th><th>标注</th></tr></thead><tbody><tr><td>名称</td><td>str,字符串,文本文字</td><td>bytes,字节文字</td><td></td></tr><tr><td>组成单位</td><td>字符</td><td>字节</td><td></td></tr><tr><td>组成形式</td><td>‘’ 或者 “” 或者 ‘’’ ‘’’ 或者 “”” “””</td><td>b’’ 或者 b”” 或者 b’’’ ‘’’ 或者 b””” “””</td><td>不同，bytes类型就是在引号前面+b(B)大小写都可以</td></tr><tr><td>表现形式</td><td>英文： ‘alex’ 中文： ‘中国’</td><td>英文：b’alex’中文：b’\xe4\xb8\xad\xe5\x9b\xbd’</td><td>字节文字对于ascii中的元素是可以直接显示的。</td></tr><tr><td>编码方式</td><td>Unicode</td><td>可指定编码（除Unicode之外）比如UTF-8，GBK 等</td><td>非ascii码中的元素是以十六进制的形式表示的</td></tr><tr><td>相应功能</td><td>upper lower spllit 等等</td><td>upper lower spllit 等等</td><td>几乎相同</td></tr><tr><td>转译</td><td>可在最前面加r进行转译</td><td>可在最前面加r进行转译</td><td>相同</td></tr><tr><td>重要用途</td><td>python基础数据类型，用于存储少量的常用的数据</td><td>负责以二进制字节序列的形式记录所需记录的对象，至于该对象到底表示什么（比如到底是什么字符）则由相应的编码格式解码所决定。<br>Python3中，bytes通常用于网络数据传输、二进制图片和文件的保存等等<br>bytes是唯一可以指定编码化为非unicode编码的</td><td>bytes就是用于数据存储和网络传输数据</td></tr></tbody></table><p>bytes类型也称作字节文本，他的主要用途就是网络的数据传输，与数据存储。那么有些同学肯定问，bytes类型既然与str差不多，而且操作方法也很相似，就是在字符串前面加个b不就行了，python为什么还要这两个数据类型呢？我只用bytes不行么？</p><p>如果你只用bytes开发，不方便。因为对于非ascii码里面的文字来说，bytes只是显示的是16进制。很不方便。</p><h4 id="str-bytes互化"><a href="#str-bytes互化" class="headerlink" title="str bytes互化"></a>str bytes互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过编码将str转为对应bytes</span></span><br><span class="line"><span class="comment"># encode称作编码:将 str 转化成 bytes类型</span></span><br><span class="line">s1 = <span class="string">'中国'</span></span><br><span class="line">b1 = s1.encode(<span class="string">'utf-8'</span>)  <span class="comment"># 转化成utf-8的bytes类型</span></span><br><span class="line">print(s1)  <span class="comment"># 中国</span></span><br><span class="line">print(b1)  <span class="comment"># b'\xe4\xb8\xad\xe5\x9b\xbd'</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">'中国'</span></span><br><span class="line">b1 = s1.encode(<span class="string">'gbk'</span>)  <span class="comment"># 转化成gbk的bytes类型</span></span><br><span class="line">print(s1)  <span class="comment"># 中国</span></span><br><span class="line">print(b1)  <span class="comment"># b'\xd6\xd0\xb9\xfa'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过解码将bytes还原为对应字符串</span></span><br><span class="line"><span class="comment"># decode称作解码, 将 bytes 转化成 str类型</span></span><br><span class="line">b1 = <span class="string">b'\xe4\xb8\xad\xe5\x9b\xbd'</span></span><br><span class="line">s1 = b1.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(s1)  <span class="comment"># 中国</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209135539.png" alt></p><h4 id="不同编码间转换"><a href="#不同编码间转换" class="headerlink" title="不同编码间转换"></a>不同编码间转换</h4><p>本质为不同编码形成的bytes，故以str为中介</p><p>示例：将gbk转为utf-8</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208215158.png" alt></p><h3 id="代码块和缓存机制"><a href="#代码块和缓存机制" class="headerlink" title="代码块和缓存机制"></a>代码块和缓存机制</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>Python程序是由代码块构造的。块是一个python程序的文本，他是作为一个单元执行的。</p><p>代码块：一个模块，一个函数，一个类，一个文件等都是一个代码块。</p><p>而作为交互方式输入的每个命令都是一个代码块</p><h4 id="代码块的缓存机制"><a href="#代码块的缓存机制" class="headerlink" title="代码块的缓存机制"></a>代码块的缓存机制</h4><ul><li><p><strong>前提条件</strong>：在同一个代码块内。</p></li><li><p><strong>机制内容：</strong>Python在执行同一个代码块的初始化对象的命令时，会检查是否其值是否已经存在，如果存在，会将其重用。换句话说：执行同一个代码块时，遇到初始化对象的命令时，他会将初始化的这个变量与值存储在一个字典中，在遇到新的变量时，会先在字典中查询记录，如果有同样的记录那么它会重复使用这个字典中的之前的这个值。所以在你给出的例子中，文件执行时（同一个代码块）会把i1、i2两个变量指向同一个对象，满足缓存机制则他们在内存中只存在一个，即：id相同。</p></li><li><p><strong>适用对象</strong>： int（float），str，bool。</p></li><li><p>变量之间相互赋值时都是直接指向了这些对象，而不是相互指向</p></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183914.png" alt></p><ul><li><strong>对象的具体细则：（了解）</strong></li></ul><p>int(float):任何数字在同一代码块下都会复用。</p><p>bool:True和False在字典中会以1，0方式存在，并且复用。</p><p>str：几乎所有的字符串都会符合缓存机制，具体规定如下（<strong>了解即可！</strong>）：</p><blockquote><p>1，非乘法得到的字符串都满足代码块的缓存机制：</p><p>2,乘法得到的字符串分两种情况：</p><blockquote><p>2.1 乘数为1时，任何字符串满足代码块的缓存机制：</p><p>2.2 乘数&gt;=2时：仅含大小写字母，数字，下划线，总长度&lt;=20，满足代码块的缓存机制：</p></blockquote></blockquote><ul><li>优点</li></ul><p>能够提高一些字符串，整数处理人物在时间和空间上的性能；需要值相同的字符串，整数的时候，直接从‘字典’中取出复用，避免频繁的创建和销毁，提升效率，节约内存。</p><h4 id="小数据池"><a href="#小数据池" class="headerlink" title="小数据池"></a>小数据池</h4><p>小数据池，不同代码块的缓存机制，也称为小整数缓存机制，或者称为驻留机制等等，</p><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a><strong>前提条件</strong></h5><p>在不同代码块内。</p><h5 id="机制内容"><a href="#机制内容" class="headerlink" title="*机制内容*"></a>*机制内容*</h5><p>Python自动将-5~256的整数进行了<strong>缓存</strong>，当你将这些整数赋值给变量时，并不会重新创建对象，而是使用已经创建好的缓存对象。</p><p>python会将一定规则的字符串在<strong>字符串驻留池</strong>中，创建一份，当你将这些字符串赋值给变量时，并不会重新创建对象， 而是使用在字符串驻留池中创建好的对象。</p><p>　　其实，无论是缓存还是字符串驻留池，都是python做的一个优化，就是将~5-256的整数，和一定规则的字符串，放在一个‘池’（容器，或者字典）中，无论程序中那些变量指向这些范围内的整数或者字符串，那么他直接在这个‘池’中引用，言外之意，就是内存中之创建一个。</p><h5 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a><strong>适用对象</strong></h5><p> <strong>int（float），str，bool</strong> </p><h5 id="对象的具体细则：（了解即可）"><a href="#对象的具体细则：（了解即可）" class="headerlink" title="\对象的具体细则：（了解即可）**"></a><strong><em>\</em>对象的具体细则：（了解即可）**</strong></h5><p><strong>int：</strong>那么大家都知道对于整数来说，小数据池的范围是-5~256 ，如果多个变量都是指向同一个（在这个范围内的）数字，他们在内存中指向的都是一个内存地址。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183354.png" alt></p><p><strong>str:</strong>字符串要从下面这几个大方向讨论（<strong>了解即可！</strong>）：</p><p><strong>1,字符串的长度为0或者1，默认都采用了驻留机制（小数据池）。</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183432.png" alt><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183447.png" alt></p><p><strong>2,字符串的长度&gt;1,且只含有大小写字母，数字，下划线时，才会默认驻留。</strong></p><p> <img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183511.png" alt></p><p><strong>3,用乘法得到的字符串，分两种情况。</strong></p><p>　　<strong>3.1 乘数为1时：</strong></p><p>仅含大小写字母，数字，下划线，默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183530.png" alt></p><p>含其他字符，长度&lt;=1,默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183551.png" alt></p><p>含其他字符，长度&gt;1,默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183615.png" alt></p><p>　　<strong>3.2 乘数&gt;=2时：</strong></p><p>仅含大小写字母，数字，下划线，总长度&lt;=20,默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183631.png" alt></p><p><strong>4，指定驻留。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> intern</span><br><span class="line">a = intern(<span class="string">'hello!@'</span>*<span class="number">20</span>)</span><br><span class="line">b = intern(<span class="string">'hello!@'</span>*<span class="number">20</span>)</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment"># 指定驻留是你可以指定任意的字符串加入到小数据池中，让其只在内存中创建一个对象，多个变量都是指向这一个字符串</span></span><br></pre></td></tr></table></figure><p><strong>bool</strong>：值就是True，False，无论你创建多少个变量指向True，False，那么他在内存中只存在一个。</p><h5 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h5><p>显而易见，节省大量内存在字符串比较时，非驻留比较效率o(n)，驻留时比较效率o(1)</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183651.png" alt></p><h3 id="深浅copy"><a href="#深浅copy" class="headerlink" title="深浅copy"></a>深浅copy</h3><h4 id="浅copy"><a href="#浅copy" class="headerlink" title="浅copy"></a>浅copy</h4><p>对于浅copy来说，只是在内存中重新创建了开辟了一个空间存放一个新列表，但是新列表中的元素与原列表中的元素是公用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同一代码块下：</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="string">'太白'</span>, <span class="literal">True</span>, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line">l2 = l1.copy()</span><br><span class="line">print(id(l1), id(l2))  <span class="comment"># 2713214468360 2713214524680</span></span><br><span class="line">print(id(l1[<span class="number">-2</span>]), id(l2[<span class="number">-2</span>]))  <span class="comment"># 2547618888008 2547618888008</span></span><br><span class="line">print(id(l1[<span class="number">-1</span>]),id(l2[<span class="number">-1</span>]))  <span class="comment"># 2547620322952 2547620322952</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同代码块下：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">1</span>, <span class="string">'太白'</span>, <span class="literal">True</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = l1.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1), id(l2))</span><br><span class="line"><span class="number">1477183162696</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1[<span class="number">-2</span>]), id(l2[<span class="number">-2</span>]))</span><br><span class="line"><span class="number">1477181814032</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1[<span class="number">-1</span>]), id(l2[<span class="number">-1</span>]))</span><br><span class="line"><span class="number">1477183162504</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183717.png" alt></p><h4 id="深copy"><a href="#深copy" class="headerlink" title="深copy"></a>深copy</h4><p>对于深copy来说，列表是在内存中重新创建的，列表中可变的数据类型是重新创建的，列表中的不可变的数据类型是公用的</p><p><strong>切片相当于浅copy</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同一代码块下</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">l1 = [<span class="number">1</span>, <span class="string">'alex'</span>, <span class="literal">True</span>, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line">l2 = copy.deepcopy(l1)</span><br><span class="line">print(id(l1), id(l2))  <span class="comment"># 2788324482440 2788324483016</span></span><br><span class="line">print(id(l1[<span class="number">0</span>]),id(l2[<span class="number">0</span>]))  <span class="comment"># 1470562768 1470562768</span></span><br><span class="line">print(id(l1[<span class="number">-1</span>]),id(l2[<span class="number">-1</span>]))  <span class="comment"># 2788324482632 2788324482696</span></span><br><span class="line">print(id(l1[<span class="number">-2</span>]),id(l2[<span class="number">-2</span>]))  <span class="comment"># 2788323047752 2788323047752</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同代码块下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">1</span>, <span class="string">'太白'</span>, <span class="literal">True</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = copy.deepcopy(l1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1), id(l2))</span><br><span class="line"><span class="number">1477183162632</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(<span class="number">0</span>), id(<span class="number">0</span>))</span><br><span class="line"><span class="number">1470562736</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(<span class="number">-2</span>), id(<span class="number">-2</span>))</span><br><span class="line"><span class="number">1470562672</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1[<span class="number">-1</span>]), id(l2[<span class="number">-1</span>]))</span><br><span class="line"><span class="number">1477183162312</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183827.png" alt></p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>计算机系统分为：计算机硬件，操作系统，应用程序三部分。</p><p>我们用python或其他语言编写的应用程序若想要把数据永久保存下来，必须要保存于硬盘中，这就涉及到应用程序要操作硬件，众所周知，应用程序是无法直接操作硬件的，这就用到了操作系统。操作系统把复杂的硬件操作封装成简单的接口给用户/应用程序使用，其中文件就是操作系统提供给应用程序来操作硬盘虚拟概念，用户或应用程序通过操作文件，可以将自己的数据永久保存下来。</p><p>有了文件的概念，我们无需再去考虑操作硬盘的细节，只需要关注操作文件的流程</p><p>文件操作的内容流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 打开文件，得到文件句柄并赋值给一个变量</span></span><br><span class="line">f=open(<span class="string">'a.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="comment">#默认打开模式就为r</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 通过句柄对文件进行操作</span></span><br><span class="line">data=f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="常出的错"><a href="#常出的错" class="headerlink" title="常出的错"></a>常出的错</h4><h5 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208223321.png" alt></p><p>这个是没有找到该文件，很可能是你的文件路径错了</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208223256.png" alt></p><p>你的的路径里面的\与后面的字符产生了特殊意义类似于\t，\n，换行符一样</p><ul><li><p>C:\Users\金鑫\Desktop\111.txt’ 凡是路径会产生特殊意义的地方，多加一个\ 这样就是前面\对后面的\进行转译，告诉计算机这个只是想单纯的表示\路径而已。即用\\代替\</p></li><li><p>r’C:\Users\金鑫\Desktop\111.txt’ 在路径的整体前面加一个r。（<strong>推荐</strong>）</p></li></ul><p>相对路径与绝对路径：</p><ul><li><p>绝对路径:从磁盘根目录开始一直到文件名</p></li><li><p>相对路径:用一个文件夹下的文件,相对于当前这个程序所在的文件而言.如果在同一个文件中,则相对路劲就是这个文件名.如果再上一层文件夹则要使用../相对路径下，你就可以直接写文件名即可。</p></li></ul><h5 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208223511.png" alt></p><p>用了错误的编码来打开文件</p><h4 id="读"><a href="#读" class="headerlink" title="读"></a>读</h4><h5 id="r模式"><a href="#r模式" class="headerlink" title="r模式"></a>r模式</h5><p>以只读方式打开文件，文件的指针将会放在文件的开头。是文件操作最常用的模式，也是<strong>默认模式</strong></p><h5 id="rb模式"><a href="#rb模式" class="headerlink" title="rb模式"></a>rb模式</h5><p>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。记住下面讲的也是一样，带b的都是以二进制的格式操作文件，他们主要是操作非文字文件：图片，音频，视频等,<strong>并且如果你要是带有b的模式操作文件，那么不用声明编码方式</strong></p><h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><h5 id="w模式"><a href="#w模式" class="headerlink" title="w模式"></a>w模式</h5><ul><li><p>如果文件不存在，利用w模式操作文件，那么它会先创建文件，然后写入内容.</p></li><li><p>如果文件存在，利用w模式操作文件，先清空原文件内容，在写入新内容。</p></li></ul><h5 id="wb模式"><a href="#wb模式" class="headerlink" title="wb模式"></a>wb模式</h5><p>wb模式：以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如：图片，音频，视频等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先以rb的模式将一个图片的内容以bytes类型全部读取出来，</span></span><br><span class="line"><span class="comment"># 然后在以wb将全部读取出来的数据写入一个新文件，这样就完成了类似于一个图片复制的流程</span></span><br><span class="line">f = open(<span class="string">"a.jpg"</span>,mode = <span class="string">"rb"</span>)</span><br><span class="line">content = f.read()</span><br><span class="line">f.close()</span><br><span class="line">f1 = open(<span class="string">"b.jpg"</span>, mode = <span class="string">"wb"</span>)</span><br><span class="line">f1.write(content)</span><br><span class="line">f1.close</span><br></pre></td></tr></table></figure><h4 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h4><h5 id="a模式"><a href="#a模式" class="headerlink" title="a模式"></a>a模式</h5><p>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h5 id="各种模式"><a href="#各种模式" class="headerlink" title="各种模式"></a>各种模式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件的模式有(默认为文本模式)：</span></span><br><span class="line">r，只读模式【默认模式，文件必须存在，不存在则抛出异常】</span><br><span class="line">w，只写模式【不可读；不存在则创建；存在则清空内容】</span><br><span class="line">a， 只追加写模式【不可读；不存在则创建；存在则只追加内容】</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 对于非文本文件，我们只能使用b模式，"b"表示以字节的方式操作</span></span><br><span class="line"><span class="comment">#（而所有文件也都是以字节的形式存储的，使用这种模式无需考虑文本文件的字符编码、</span></span><br><span class="line"><span class="comment"># 图片文件的jgp格式、视频文件的avi格式）</span></span><br><span class="line">rb </span><br><span class="line">wb</span><br><span class="line">ab</span><br><span class="line">注：以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型，不能指定编码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,‘+’模式（就是增加了一个功能）</span></span><br><span class="line">r+， 读写【可读，可写】</span><br><span class="line">w+，写读【可写，可读】</span><br><span class="line">a+， 写读【可写，可读】</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4，以bytes类型操作的读写，写读，写读模式</span></span><br><span class="line">r+b， 读写【可读，可写】</span><br><span class="line">w+b，写读【可写，可读】</span><br><span class="line">a+b， 写读【可写，可读】</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果你在读写模式下，先写后读，那么文件就会出问题，因为默认光标是在文件的最开始，你要是先写，则写入的内容会讲原内容覆盖掉，直到覆盖到你写完的内容，然后在后面开始读取。</p><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f.read()一次性读取所有内容</span></span><br><span class="line">f = open(<span class="string">'path1/小娃娃.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">msg = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># f.read(n)以字符为单位，读取n个字符  光标亦随之移动了n个字符</span></span><br><span class="line"><span class="comment"># 1. 文件打开方式为文本模式时，代表读取n个字符</span></span><br><span class="line"><span class="comment"># 2. 文件打开方式为b模式时，代表读取n个字节</span></span><br><span class="line">f = open(<span class="string">'path1/小娃娃.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">msg = f.read(<span class="number">3</span>)</span><br><span class="line">msg1 = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># readline()读取每次只读取一行,注意点:readline()读取出来的数据在后面都有一个\n，</span></span><br><span class="line"><span class="comment"># 加上print本身自动换行所以一般会加strip</span></span><br><span class="line">f = open(<span class="string">'path1/小娃娃.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">msg1 = f.readline().strip()</span><br><span class="line">msg2 = f.readline().strip()</span><br><span class="line">msg3 = f.readline().strip()</span><br><span class="line">msg4 = f.readline().strip()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># readlines() 返回一个列表，列表里面每个元素是原文件的每一行，如果文件很大，占内存，容易崩盘</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过for循环去读取，文件句柄是一个迭代器，他的特点就是每次循环只在内存中占一行的数据，非常节省内存</span></span><br><span class="line">f = open(<span class="string">'../path1/弟子规'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)      <span class="comment">#这种方式就是在一行一行的进行读取,它就执行了下边的功能</span></span><br><span class="line"></span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.readline())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意:读完的文件句柄一定要关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># seek(n)光标移动到n位置,注意: 移动单位是byte,所有如果是utf-8的中文部分要是3的倍数</span></span><br><span class="line"><span class="comment"># 通常我们使用seek都是移动到开头或者结尾</span></span><br><span class="line"><span class="comment"># 移动到开头:seek(0)</span></span><br><span class="line"><span class="comment"># 移动到结尾:seek(0,2) </span></span><br><span class="line"><span class="comment"># seek的第二个参数表示的是从哪个位置进行偏移,默认是0,表示开头,1表示当前位置,2表示结尾</span></span><br><span class="line">f = open(<span class="string">"小娃娃"</span>, mode=<span class="string">"r+"</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 光标移动到开头</span></span><br><span class="line">content = f.read() <span class="comment"># 读取内容, 此时光标移动到结尾</span></span><br><span class="line">print(content)</span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 再次将光标移动到开头</span></span><br><span class="line">f.seek(<span class="number">0</span>, <span class="number">2</span>) <span class="comment"># 将光标移动到结尾</span></span><br><span class="line">content2 = f.read() <span class="comment"># 读取内容. 什么都没有</span></span><br><span class="line">print(content2)</span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 移动到开头</span></span><br><span class="line">f.write(<span class="string">"张国荣"</span>) <span class="comment"># 写入信息. 此时光标在9 中文3 * 3个 = 9</span></span><br><span class="line">f.flush()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用tell()可以帮我们获取当前光标在什么位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  readable(),writeable()</span></span><br><span class="line">f = open(<span class="string">'Test'</span>,encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'r'</span>)</span><br><span class="line">print(f.readable())  <span class="comment"># True</span></span><br><span class="line">print(f.writable())  <span class="comment"># False</span></span><br><span class="line">content = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flush()刷新文件内部缓冲区</span></span><br></pre></td></tr></table></figure><h5 id="另一种打开方式"><a href="#另一种打开方式" class="headerlink" title="另一种打开方式"></a>另一种打开方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1,利用with上下文管理这种方式，它会自动在一段时间后哦关闭文件句柄。</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t1'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    f1.read()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2，一个with 语句可以操作多个文件，产生多个文件句柄。</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t1'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1,\</span><br><span class="line">        open(<span class="string">'Test'</span>, encoding=<span class="string">'utf-8'</span>, mode = <span class="string">'w'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f1.read()</span><br><span class="line">    f2.write(<span class="string">'老男孩老男孩'</span>)</span><br></pre></td></tr></table></figure><h4 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h4><p>文件的数据是存放于硬盘上的，因而只存在覆盖、不存在修改这么一说，我们平时看到的修改文件，都是模拟出来的效果</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209140134.png" alt></p><p>具体的说有两种实现方式：</p><p>方式一：将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘（word，vim，nodpad++等编辑器）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  <span class="comment"># 调用系统模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>) <span class="keyword">as</span> read_f,open(<span class="string">'.a.txt.swap'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    data=read_f.read() <span class="comment">#全部读入内存,如果文件很大,会很卡</span></span><br><span class="line">    data=data.replace(<span class="string">'alex'</span>,<span class="string">'SB'</span>) <span class="comment">#在内存中完成修改</span></span><br><span class="line"></span><br><span class="line">    write_f.write(data) <span class="comment">#一次性写入新文件</span></span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">'a.txt'</span>)  <span class="comment">#删除原文件</span></span><br><span class="line">os.rename(<span class="string">'.a.txt.swap'</span>,<span class="string">'a.txt'</span>)   <span class="comment">#将新建的文件重命名为原文件</span></span><br></pre></td></tr></table></figure><p>方式二：将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件</p><p>(当文件过大无法全部加载入内存中时用此法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>) <span class="keyword">as</span> read_f,open(<span class="string">'.a.txt.swap'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        line=line.replace(<span class="string">'alex'</span>,<span class="string">'SB'</span>)</span><br><span class="line">        write_f.write(line)</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">'a.txt'</span>)</span><br><span class="line">os.rename(<span class="string">'.a.txt.swap'</span>,<span class="string">'a.txt'</span>)</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p> 1，对一些功能就行封装，减少代码的重复性。</p><p> 2，使代码可读性更好</p><h4 id="函数结构"><a href="#函数结构" class="headerlink" title="函数结构"></a>函数结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure><p>def 关键词开头，空格之后接函数名称和圆括号()，最后还有一个”:”。</p><p>def 是固定的，不能变，他就是定义函数的关键字。</p><p>空格 为了将def关键字和函数名分开</p><p>函数名：函数名只能包含字符串、下划线和数字且不能以数字开头。虽然函数名可以随便起，但我们给函数起名字还是要尽量简短，并且要具有可描述性</p><p>括号：是必须加的，用于写形参</p><p>下面的函数体一定全部都要缩进，这代表是这个函数的代码</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>使用函数名加小括号就可以调用了 写法:函数名() 这个时候函数的函数体会被执行</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>1.遇到return,函数结束,return下面的（函数内）的代码不会执行。</p><p>2.return 会给函数的执行者返回值。</p><p>​    如果return后面什么都不写，或者函数中没有return,则返回的结果是None</p><p>​    如果return后面写了一个值,返回给调用者这个值</p><p>​    如果return后面写了多个结果,,返回给调用者一个tuple(元组),调用者可以直接使用元组的解构获取多个变量。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>将函数盘活，使函数能应对更多情况</p><h5 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h5><p>写在函数声明的位置的变量叫形参,形式上的一个完整.表示这个函数需要xxx</p><p>位置参数，args，默认参数，仅限关键字参数，**kwargs</p><h5 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h5><p>在函数调用的时候给函数传递的值</p><p>函数的传参就是函数将实际参数交给形式参数的过程.</p><p>按需传入</p><h5 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h5><h6 id="动态接收位置参数：-args"><a href="#动态接收位置参数：-args" class="headerlink" title="动态接收位置参数：*args"></a>动态接收位置参数：*args</h6><p>*args实参所有的位置参数接收，放置在一个元组中，并将这个元组赋值给args这个形参，PEP8规范中规定就使用args，约定俗成的</p><h6 id="动态接收关键字参数-kwargs"><a href="#动态接收关键字参数-kwargs" class="headerlink" title="动态接收关键字参数: kwargs"></a>动态接收关键字参数: kwargs</h6><p>**kwargs接受所有的关键字参数然后将其转换成一个字典赋值给kwargs这个形参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(args) <span class="comment"># ('蒸羊羔儿', '蒸熊掌', '蒸鹿尾儿')</span></span><br><span class="line">    print(kwargs) <span class="comment"># &#123;'name': '太白金星', 'sex': '男'&#125;</span></span><br><span class="line">func(<span class="string">'蒸羊羔儿'</span>, <span class="string">'蒸熊掌'</span>, <span class="string">'蒸鹿尾儿'</span>,name=<span class="string">'太白金星'</span>,sex=<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure><h5 id="的用法"><a href="#的用法" class="headerlink" title="*的用法"></a>*的用法</h5><h6 id="函数中"><a href="#函数中" class="headerlink" title="函数中"></a>函数中</h6><p> <strong>聚合</strong></p><p>在函数的定义时： *起到的是聚合的作用，将多个参数聚合为一个元组(字典)</p><p> <strong>打散</strong></p><p>出一个小题：你如何将三个数据（这三个数据都是可迭代对象类型的每一元素传给动态参数*args？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'alex'</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">tu1 = (<span class="string">'武sir'</span>, <span class="string">'太白'</span>, <span class="string">'女神'</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args) <span class="comment"># ('alex', [1, 2, 3, 4], ('武sir', '太白', '女神'))</span></span><br><span class="line">func(s1,l1,tu1)</span><br></pre></td></tr></table></figure><p>这样肯定是不行，他会将这个三个数据类型当成三个位置参数传给args，没有实现我的要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'alex'</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">tu1 = (<span class="string">'武sir'</span>, <span class="string">'太白'</span>, <span class="string">'女神'</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args) <span class="comment"># ('a', 'l', 'e', 'x', 1, 2, 3, 4, '武sir', '太白', '女神')</span></span><br><span class="line">func(*s1,*l1,*tu1)</span><br></pre></td></tr></table></figure><p>将位置参数的实参（可迭代类型）前面加上<em>，相当于将这些实参给拆解成一个一个的组成元素当成位置参数，然后传给args，所以在函数的执行时：\</em>，**起到的是打散的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">dic2 = &#123;<span class="string">'hobby'</span>: <span class="string">'喝茶'</span>, <span class="string">'sex'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(kwargs) <span class="comment"># &#123;'name': '太白', 'age': 18, 'hobby': '喝茶', 'sex': '男'&#125;</span></span><br><span class="line">func(**dic1,**dic2)</span><br></pre></td></tr></table></figure><h6 id="函数外"><a href="#函数外" class="headerlink" title="函数外"></a>函数外</h6><p>接收时聚合，传值时打散</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 之前讲过的分别赋值</span><br><span class="line">a,b = (1,2)</span><br><span class="line">print(a, b) # 1 2</span><br><span class="line"># 其实还可以这么用：</span><br><span class="line">a,*b = (1, 2, 3, 4,)</span><br><span class="line">print(a, b) # 1 [2, 3, 4]</span><br><span class="line">*rest,a,b = range(5)</span><br><span class="line">print(rest, a, b) # [0, 1, 2] 3 4</span><br><span class="line">print([1, 2, *[3, 4, 5]]) # [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><h5 id="仅限关键字参数"><a href="#仅限关键字参数" class="headerlink" title="仅限关键字参数"></a>仅限关键字参数</h5><p>他的位置要放在<em>args后面，*</em>kwargs前面（如果有**kwargs），也就是默认参数的位置，它与默认参数的前后顺序无所谓，它只接受关键字传的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,*args,c)</span>:</span></span><br><span class="line">print(a,b) <span class="comment"># 1 2</span></span><br><span class="line">print(args) <span class="comment"># (4, 5)</span></span><br><span class="line"><span class="comment"># 这样传参是错误的，因为仅限关键字参数c只接受关键字参数</span></span><br><span class="line"><span class="comment"># func(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,*args,c)</span>:</span></span><br><span class="line">print(a,b) <span class="comment"># 1 2</span></span><br><span class="line">print(args) <span class="comment"># (3, 4)</span></span><br><span class="line">print(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 这样就正确了：</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, c=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p> 这个仅限关键字参数从名字定义就可以看出他只能通过关键字参数传参，其实可以把它当成不设置默认值的默认参数而且必须要传参数，不传就报错。</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>内置命名空间–&gt; 存放python解释器为我们提供的名字, list, tuple, str, int这些都是内置命名空间</p><p>全局命名空间–&gt; 我们直接在py文件中, 函数外声明的变量都属于全局命名空间</p><p>局部命名空间–&gt; 在函数中声明的变量会放在局部命名空间</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209133542.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209133620.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209140957.png" alt></p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>全局作用域: 包含内置命名空间和全局命名空间. 在整个文件的任何位置都可以使用(遵循 从上到下逐⾏执行).</p><p>局部作用域: 在函数内部可以使用.</p><h5 id="两个内置函数"><a href="#两个内置函数" class="headerlink" title="两个内置函数"></a>两个内置函数</h5><p>globals(): 以字典的形式返回<strong>全局作用域</strong>所有的变量对应关系。</p><p>locals(): 以字典的形式返回<strong>当前作用域</strong>的变量的对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在全局作用域下打印，则他们获取的都是全局作用域的所有的内容。</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(globals())</span><br><span class="line">print(locals())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&#123;'__name__': '__main__', '__doc__': None, '__package__': None,</span></span><br><span class="line"><span class="string">'__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x000001806E50C0B8&gt;, </span></span><br><span class="line"><span class="string">'__spec__': None, '__annotations__': &#123;&#125;,</span></span><br><span class="line"><span class="string">'__builtins__': &lt;module 'builtins' (built-in)&gt;, </span></span><br><span class="line"><span class="string">'__file__': 'D:/lnh.python/py project/teaching_show/day09~day15/function.py',</span></span><br><span class="line"><span class="string">'__cached__': None, 'a': 2, 'b': 3&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在局部作用域中打印。</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    c = <span class="number">3</span></span><br><span class="line">    print(globals()) <span class="comment"># 和上面一样，还是全局作用域的内容</span></span><br><span class="line">    print(locals()) <span class="comment"># &#123;'c': 3&#125;</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h4 id="高阶函数-函数嵌套"><a href="#高阶函数-函数嵌套" class="headerlink" title="高阶函数(函数嵌套)"></a>高阶函数(函数嵌套)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例1：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    print(<span class="number">4</span>)</span><br><span class="line">func1()</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line">func2()</span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例2：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    func1()</span><br><span class="line">    print(<span class="number">4</span>)</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line">func2()</span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 例3：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span> </span><br><span class="line">    print(<span class="number">2</span>) </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">()</span>:</span> </span><br><span class="line">        print(<span class="number">6</span>) </span><br><span class="line">    print(<span class="number">4</span>) </span><br><span class="line">    fun3() </span><br><span class="line">    print(<span class="number">8</span>)</span><br><span class="line">print(<span class="number">3</span>)</span><br><span class="line">fun2()</span><br><span class="line">print(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="global"><a href="#global" class="headerlink" title="global"></a>global</h5><p>global关键字有两个作用：</p><p>1，声明一个全局变量。</p><p>2，在局部作用域想要对全局作用域的全局变量进行修改时，需要用到 global(限于字符串，数字)</p><h5 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h5><p>nonlocal的总结：</p><p>1，不能更改全局变量。</p><p>2，在局部作用域中，对父级作用域（或者更外层作用域非全局作用域）的变量进行引用和修改，并且引用的哪层，从那层及以下此变量全部发生改变</p><h4 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h4><p>函数名指向的是这个函数的内存地址，其实深一步理解可得知，与其说函数名()可以执行这个函数，不如说是函数的内存地址()才是执行这个函数的关键</p><ul><li>函数名可以赋值给其他变量</li><li>函数名可以当做容器类的元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func1: 嘻嘻"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func2: 哈哈"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func3: 咯咯"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func4: 吱吱"</span>)</span><br><span class="line">lst = [func1, func2, func3, func4]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    i()</span><br></pre></td></tr></table></figure><ul><li>函数名可以当做函数的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(f)</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">func2(func1)</span><br></pre></td></tr></table></figure><ul><li>函数名可以当做函数的返回值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(f)</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">ret = func2(func1)</span><br><span class="line">ret()  <span class="comment"># ret, f, func1 都是指向的func1这个函数的内存地址</span></span><br></pre></td></tr></table></figure><p>函数名是一个特殊的变量，他除了具有变量的功能，还有最主要一个特点就是加上() 就执行，其实他还有一个学名叫<strong>第一类对象</strong></p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><h5 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h5><p>  从字面意思来说：可迭代对象就是一个可以重复取值的实实在在的东西。</p><p>  从专业角度来说：但凡内部含有<strong>iter</strong>方法的对象，都是可迭代对象。</p><p>  可迭代对象可以通过判断该对象是否有’<strong>iter</strong>’方法来判断。</p><h6 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h6><p>  可迭代对象的<strong>优点</strong>：</p><ul><li><p>可以直观的查看里面的数据。</p><p>可迭代对象的<strong>缺点</strong>：</p></li><li><p>占用内存。</p></li><li><p>可迭代对象不能迭代取值（除去索引，key以外</p></li></ul><p>即使抛去索引,key以外，这些我可以通过for循环进行取值呀！对，他们都可以通过for循环进行取值，其实for循环在底层做了一个转化，就是<strong>先将可迭代对象转化成迭代器</strong>，然后在进行取值的</p><h6 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h6><p><strong>dir()</strong>会返回一个列表，这个列表中含有该对象的以字符串的形式所有方法名。这样我们就可以判断python中的一个对象是不是可迭代对象了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'alex'</span></span><br><span class="line">i = <span class="number">100</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(i))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(s1))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h5 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h5><p>  从字面意思来说迭代器，是一个可以迭代取值的工具，器：在这里当做工具比较合适。</p><p>  从专业角度来说：迭代器是这样的对象：实现了无参数的<strong>next</strong>方法，返回序列中的下一个元素，如果没有元素了，那么抛出StopIteration异常.python中的迭代器还实现了<strong>iter</strong>方法，因此迭代器也可以迭代。 出自《流畅的python》</p><p> 简单来说：<strong>在python中，内部含有’<strong>Iter</strong>‘方法并且含有’<strong>next</strong>‘方法的对象就是迭代器。</strong></p><h6 id="判断-1"><a href="#判断-1" class="headerlink" title="判断"></a>判断</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">o1 = <span class="string">'alex'</span></span><br><span class="line">o2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">o3 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">o4 = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>,<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">o5 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">f = open(<span class="string">'file'</span>,encoding=<span class="string">'utf-8'</span>, mode=<span class="string">'w'</span>)</span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o1))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o2))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o3))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o4))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o5))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(f))  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># hsagn</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o1))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o2))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o3))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o4))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o5))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(f))  <span class="comment"># True</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>之前我们学过的这些对象，只有文件句柄是迭代器，剩下的那些数据类型都是可迭代对象。</p><h6 id="迭代器取值"><a href="#迭代器取值" class="headerlink" title="迭代器取值"></a>迭代器取值</h6><p>取值之前仅是保存了那些地址</p><p>  可迭代对象是不可以一直迭代取值的（除去用索引，切片以及Key），但是转化成迭代器就可以了，迭代器是利用<strong>next</strong>()进行取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,]</span><br><span class="line">obj = l1.__iter__()  <span class="comment"># 或者 iter(l1)</span></span><br><span class="line"><span class="comment"># print(obj)  # &lt;list_iterator object at 0x000002057FE1A3C8&gt;</span></span><br><span class="line">ret = obj.__next__()</span><br><span class="line">print(ret)</span><br><span class="line">ret = obj.__next__()</span><br><span class="line">print(ret)</span><br><span class="line">ret = obj.__next__()</span><br><span class="line">print(ret)</span><br><span class="line">ret = obj.__next__()  <span class="comment"># StopIteration</span></span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 迭代器利用next取值：一个next取对应的一个值，如果迭代器里面的值取完了，还要next，</span></span><br><span class="line"><span class="comment"># 那么就报StopIteration的错误。</span></span><br></pre></td></tr></table></figure><h6 id="while模拟for"><a href="#while模拟for" class="headerlink" title="while模拟for"></a>while模拟for</h6><p>for循环的内部机制是：将可迭代对象转换成迭代器，然后利用next进行取值，最后利用异常处理处理StopIteration抛出的异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 1 将可迭代对象转化成迭代器</span></span><br><span class="line">obj = iter(l1)</span><br><span class="line"><span class="comment"># 2,利用while循环，next进行取值</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 3,利用异常处理终止循环</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(obj))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h6 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h6><p>​    迭代器的<strong>优点</strong>：</p><p>​        节省内存。<br>​          迭代器在内存中相当于只占一个数据的空间：因为每次取值都上一条数据会在内存释放，加载当前的此条数据。</p><p>​        惰性机制。<br>​          next一次，取一个值，绝不过多取值。​</p><p>​    迭代器的<strong>缺点</strong>：</p><p>​      不能直观的查看里面的数据。</p><p>​      取值时不走回头路，只能一直向下取值。</p><h5 id="可迭代对象转化成迭代器"><a href="#可迭代对象转化成迭代器" class="headerlink" title="可迭代对象转化成迭代器"></a>可迭代对象转化成迭代器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">obj = l1.__iter__() </span><br><span class="line"><span class="comment"># 或者 iter(l1)</span></span><br><span class="line"><span class="comment"># &lt;list_iterator object at 0x000002057FE1A3C8&gt;</span></span><br></pre></td></tr></table></figure><h5 id="迭代器与可迭代对象对比"><a href="#迭代器与可迭代对象对比" class="headerlink" title="迭代器与可迭代对象对比"></a>迭代器与可迭代对象对比</h5><p> <strong>可迭代对象：</strong></p><p>  是一个私有的方法比较多，操作灵活（比如列表，字典的增删改查，字符串的常用操作方法等）,比较直观，但是占用内存，而且不能直接通过循环迭代取值的这么一个数据集。</p><p>  <strong>应用</strong>：当你侧重于对于数据可以灵活处理，并且内存空间足够，将数据集设置为可迭代对象是明确的选择。</p><p>  <strong>迭代器：</strong></p><p>  是一个非常节省内存，可以记录取值位置，可以直接通过循环+next方法取值，但是不直观，操作方法比较单一的数据集。</p><p>  <strong>应用</strong>：当你的数据量过大，大到足以撑爆你的内存或者你以节省内存为首选因素时，将数据集设置为迭代器是一个不错的选择。（可参考为什么python把文件句柄设置成迭代器）。</p><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>什么是生成器？各种文献都有不同的理解，但是核心基本相同。生成器的本质就是迭代器，在python社区中，大多数时候都把迭代器和生成器是做同一个概念。生成器和迭代器也有不同，唯一的不同就是：迭代器都是Python给你提供的已经写好的工具或者通过数据转化得来的，（比如文件句柄，iter([1,2,3])。<strong>生成器是需要我们自己用python代码构建的工具</strong>。最大的区别也就如此了</p><h5 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h5><p>通过生成器函数</p><p>通过生成器推导式</p><p>python内置函数或者模块提供</p><p>（其实1,3两种本质上差不多，只不过1是自己写的生成器函数，3是python提供的生成器函数而已）</p><h5 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span></span><br><span class="line">ret = func()</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 运行结果:</span></span><br><span class="line">&lt;generator object func at <span class="number">0x000001A575163888</span>&gt;</span><br></pre></td></tr></table></figure><p>由于函数中存在yield,那么这个函数就是一个生成器函数.</p><p>我们在执行这个函数的时候.就不再是函数的执行了.而是获取这个生成器对象，那么生成器对象如何取值呢？</p><p>生成器的本质就是迭代器。所以我们可以直接执行<strong>next</strong>()来执行以下生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">     print(<span class="string">"111"</span>)</span><br><span class="line">     <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">gener = func() <span class="comment"># 这个时候函数不会执⾏. ⽽是获取到⽣成器</span></span><br><span class="line">ret = gener.__next__() <span class="comment"># 这个时候函数才会执⾏</span></span><br><span class="line">print(ret)  <span class="comment"># 并且yield会将func生产出来的数据 222 给了 ret</span></span><br></pre></td></tr></table></figure><p>当程序运行完最后一个yield,那么后面继续运行<strong>next</strong>()程序会报错，一个yield对应一个next，next超过yield数量，就会报错，与迭代器一样。</p><h5 id="yield与return的区别"><a href="#yield与return的区别" class="headerlink" title="yield与return的区别"></a>yield与return的区别</h5><p>​    return一般在函数中只设置一个，他的作用是终止函数，并且给函数的执行者返回值。</p><p>​    yield在生成器函数中可设置多个，他并不会终止函数，next会获取对应yield生成的元素。</p><p><strong>举例：</strong></p><p>我们来看一下这个需求：老男孩向楼下卖包子的老板订购了10000个包子.包子铺老板非常实在，一下就全部都做出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span>:</span></span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        lst.append(<span class="string">'包子'</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line">e = eat()</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>这样做没有问题，但是我们由于学生没有那么多，只吃了2000个左右，剩下的8000个，就只能占着一定的空间，放在一边了。如果包子铺老板效率够高，我吃一个包子，你做一个包子，那么这就不会占用太多空间存储了，完美。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'包子'</span>+str(i)</span><br><span class="line">e = eat()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    next(e)</span><br></pre></td></tr></table></figure><p><strong>这两者的区别:</strong></p><p>  第一种是直接把包子全部做出来，占用内存。</p><p>  第二种是吃一个生产一个，非常的节省内存，而且还可以保留上次的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'包子'</span>+str(i)</span><br><span class="line">e = eat()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    next(e)    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</span><br><span class="line">    next(e)</span><br><span class="line"><span class="comment"># 多次next包子的号码是按照顺序记录的。</span></span><br></pre></td></tr></table></figure><h5 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h5><p>可以直接把可迭代对象中的每一个数据作为生成器的结果进行返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对比yield 与 yield from </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    lst = [<span class="string">'卫龙'</span>,<span class="string">'老冰棍'</span>,<span class="string">'北冰洋'</span>,<span class="string">'牛羊配'</span>]</span><br><span class="line">    <span class="keyword">yield</span> lst</span><br><span class="line">g = func()</span><br><span class="line">print(g)</span><br><span class="line">print(next(g))  <span class="comment"># 只是返回一个列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    lst = [<span class="string">'卫龙'</span>,<span class="string">'老冰棍'</span>,<span class="string">'北冰洋'</span>,<span class="string">'牛羊配'</span>]</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> lst</span><br><span class="line">g = func()</span><br><span class="line">print(g)</span><br><span class="line"><span class="comment"># 他会将这个可迭代对象(列表)的每个元素当成迭代器的每个结果进行返回。</span></span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">yield from ['卫龙','老冰棍','北冰洋','牛羊配'] </span></span><br><span class="line"><span class="string">等同于：</span></span><br><span class="line"><span class="string">    yield '卫龙'</span></span><br><span class="line"><span class="string">    yield '老冰棍'</span></span><br><span class="line"><span class="string">    yield '北冰洋'</span></span><br><span class="line"><span class="string">    yield '牛羊配'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>两个yield from不会交替输出，而会先打印完第一个，在打印第二个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    lst1 = [<span class="string">'卫龙'</span>,<span class="string">'老冰棍'</span>,<span class="string">'北冰洋'</span>,<span class="string">'牛羊配'</span>]</span><br><span class="line">    lst2 = [<span class="string">'馒头'</span>,<span class="string">'花卷'</span>,<span class="string">'豆包'</span>,<span class="string">'大饼'</span>]</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> lst1</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> lst2</span><br><span class="line">    </span><br><span class="line">g = func()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h5 id="send方法-补充"><a href="#send方法-补充" class="headerlink" title="send方法(补充)"></a>send方法(补充)</h5><p><strong>send和next()区别:</strong></p><p>​    相同点：</p><p>​      send 和 next()都可以让生成器对应的yield向下执行一次。</p><p>​      都可以获取到yield生成的值。</p><p>​    不同点：</p><p>​      第一次获取yield值只能用next不能用send（可以用send(None)）。</p><p>​      send可以给上一个yield置传递值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># next只能获取yield生成的值，但是不能传递值。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> ready to eat'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;name&#125;</span> start to eat <span class="subst">&#123;food&#125;</span>'</span>)</span><br><span class="line">dog = gen(<span class="string">'alex'</span>)</span><br><span class="line">next(dog)</span><br><span class="line">next(dog)</span><br><span class="line">next(dog)</span><br><span class="line"><span class="comment"># 而使用send这个方法是可以的。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> ready to eat'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;name&#125;</span> start to eat <span class="subst">&#123;food&#125;</span>'</span>)</span><br><span class="line">dog = gen(<span class="string">'alex'</span>)</span><br><span class="line">next(dog)  <span class="comment"># 第一次必须用next让指针停留在第一个yield后面</span></span><br><span class="line"><span class="comment"># 与next一样，可以获取到yield的值</span></span><br><span class="line">ret = dog.send(<span class="string">'骨头'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> ready to eat'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;name&#125;</span> start to eat <span class="subst">&#123;food&#125;</span>'</span>)</span><br><span class="line">dog = gen(<span class="string">'alex'</span>)</span><br><span class="line">next(dog)</span><br><span class="line"><span class="comment"># 还可以给上一个yield发送值</span></span><br><span class="line">dog.send(<span class="string">'骨头'</span>)</span><br><span class="line">dog.send(<span class="string">'狗粮'</span>)</span><br><span class="line">dog.send(<span class="string">'香肠'</span>)</span><br></pre></td></tr></table></figure><h5 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h5><p>形式上仅是将列表生成式的[]改为()</p><p>生成器表达式和列表推导式的区别:</p><ul><li>列表推导式比较耗内存,所有数据一次性加载到内存。而.生成器表达式遵循迭代器协议，逐个产生元素。</li><li>得到的值不一样,列表推导式得到的是一个列表.生成器表达式获取的是一个生成器</li><li>列表推导式一目了然，生成器表达式只是一个内存地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> gen:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p><a href="https://www.processon.com/view/link/5b4ee15be4b0edb750de96ac#map" target="_blank" rel="noopener">思维导图</a></p><p>函数就是以功能为导向，一个函数封装一个功能，那么Python将一些常用的功能（比如len）给我们封装成了一个一个的函数，供我们使用，他们不仅效率高（底层都是用C语言写的），而且是拿来即用，避免重复早轮子，那么这些函数就称为内置函数，到目前为止python给我们提供的内置函数一共是68个</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200210104550.png" alt></p><h5 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h5><p>all：可迭代对象中，全都是True才是True</p><p>any：可迭代对象中，有一个True 就是True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># all  可迭代对象中，全都是True才是True</span></span><br><span class="line"><span class="comment"># any  可迭代对象中，有一个True 就是True</span></span><br><span class="line">print(all([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">True</span>,<span class="number">0</span>]))</span><br><span class="line">print(any([<span class="number">1</span>,<span class="string">''</span>,<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>bytes：用于不同编码之间的转化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'你好'</span></span><br><span class="line">bs = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line">s1 = bs.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(s1)</span><br><span class="line">bs = bytes(s,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line">b = <span class="string">'你好'</span>.encode(<span class="string">'gbk'</span>)</span><br><span class="line">b1 = b.decode(<span class="string">'gbk'</span>)</span><br><span class="line">print(b1.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>ord:输入字符找该字符编码的位置</p><p>chr:输入位置数字找出其对应的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ord 输入字符找该字符编码的位置</span></span><br><span class="line">print(ord(<span class="string">'a'</span>))</span><br><span class="line">print(ord(<span class="string">'中'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># chr 输入位置数字找出其对应的字符</span></span><br><span class="line">print(chr(<span class="number">97</span>))</span><br><span class="line">print(chr(<span class="number">20013</span>))</span><br></pre></td></tr></table></figure><p>repr:返回一个对象的string形式（原形毕露）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %r  原封不动的写出来</span></span><br><span class="line">name = <span class="string">'taibai'</span></span><br><span class="line">print(<span class="string">'我叫%r'</span>%name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># repr 原形毕露</span></span><br><span class="line">print(repr(<span class="string">'&#123;"name":"alex"&#125;'</span>))</span><br><span class="line">print(<span class="string">'&#123;"name":"alex"&#125;'</span>)</span><br></pre></td></tr></table></figure><p>eval：执行字符串类型的代码，并返回最终结果。</p><p>exec:执行字符串类型的代码。</p><p>用于网络上数据处理时易出现安全分险</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">'2 + 2'</span>)  <span class="comment"># 4</span></span><br><span class="line">n=<span class="number">81</span></span><br><span class="line">eval(<span class="string">"n + 4"</span>)  <span class="comment"># 85</span></span><br><span class="line">eval(<span class="string">'print(666)'</span>)  <span class="comment"># 666</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'''</span></span><br><span class="line"><span class="string">for i in [1,2,3]:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">exec(s)</span><br></pre></td></tr></table></figure><p>hash：获取一个对象（可哈希对象：int，str，Bool，tuple）的哈希值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">print(hash(<span class="number">12322</span>))</span><br><span class="line">print(hash(<span class="string">'123'</span>))</span><br><span class="line">print(hash(<span class="string">'arg'</span>))</span><br><span class="line">print(hash(<span class="string">'alex'</span>))</span><br><span class="line">print(hash(<span class="literal">True</span>))</span><br><span class="line">print(hash(<span class="literal">False</span>))</span><br><span class="line">print(hash((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">-2996001552409009098</span></span><br><span class="line"><span class="string">-4637515981888139739</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2528502973977326415</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>help：函数用于查看函数或模块用途的详细说明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(help(list))</span><br><span class="line">print(help(str.split))</span><br></pre></td></tr></table></figure><p><strong>callable</strong>：函数用于检查一个对象是否是可调用的。如果返回True，object仍然可能调用失败；但如果返回False，调用对象ojbect绝对不会成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'alex'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(callable(name))  <span class="comment"># False</span></span><br><span class="line">print(callable(func))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>int：函数用于将一个字符串或数字(取整)转换为整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(int())  <span class="comment"># 0</span></span><br><span class="line">print(int(<span class="string">'12'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(int(<span class="number">3.6</span>))  <span class="comment"># 3</span></span><br><span class="line">print(int(<span class="string">'0100'</span>,base=<span class="number">2</span>))  <span class="comment"># 将2进制的 0100 转化成十进制。结果为 4</span></span><br></pre></td></tr></table></figure><p>float：函数用于将整数和字符串转换成浮点数。</p><p>complex：函数用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(float(<span class="number">3</span>))  <span class="comment"># 3.0</span></span><br><span class="line">print(complex(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment"># (1+2j)</span></span><br></pre></td></tr></table></figure><p>bin：将十进制转换成二进制并返回。</p><p>oct：将十进制转化成八进制字符串并返回。</p><p>hex：将十进制转化成十六进制字符串并返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(bin(<span class="number">10</span>),type(bin(<span class="number">10</span>)))  <span class="comment"># 0b1010 &lt;class 'str'&gt;</span></span><br><span class="line">print(oct(<span class="number">10</span>),type(oct(<span class="number">10</span>)))  <span class="comment"># 0o12 &lt;class 'str'&gt;</span></span><br><span class="line">print(hex(<span class="number">10</span>),type(hex(<span class="number">10</span>)))  <span class="comment"># 0xa &lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure><p>divmod：计算除数与被除数的结果，返回一个包含商和余数的元组(a // b, a % b)。</p><p>round：保留浮点数的小数位数，默认保留整数。</p><p>pow：求x<strong>y次幂。（三个参数为x</strong>y的结果对z取余）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(divmod(<span class="number">7</span>,<span class="number">2</span>))  <span class="comment"># (3, 1)</span></span><br><span class="line">print(round(<span class="number">7</span>/<span class="number">3</span>,<span class="number">2</span>))  <span class="comment"># 2.33</span></span><br><span class="line">print(round(<span class="number">7</span>/<span class="number">3</span>))  <span class="comment"># 2</span></span><br><span class="line">print(round(<span class="number">3.32567</span>,<span class="number">3</span>))  <span class="comment"># 3.326</span></span><br><span class="line">print(pow(<span class="number">2</span>,<span class="number">3</span>))  <span class="comment"># 两个参数为2**3次幂</span></span><br><span class="line">print(pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>))  <span class="comment"># 三个参数为2**3次幂，对3取余。</span></span><br></pre></td></tr></table></figure><h5 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h5><p><strong>print() 屏幕输出。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''' 源码分析</span></span><br><span class="line"><span class="string">def print(self, *args, sep=' ', end='\n', file=None): # known special case of print</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="string">    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)</span></span><br><span class="line"><span class="string">    file:  默认是输出到屏幕，如果设置为文件句柄，输出到文件</span></span><br><span class="line"><span class="string">    sep:   打印多个值之间的分隔符，默认为空格</span></span><br><span class="line"><span class="string">    end:   每一次打印的结尾，默认为换行符</span></span><br><span class="line"><span class="string">    flush: 立即把内容输出到流文件，不作缓存</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,sep=<span class="string">'*'</span>)  <span class="comment"># 111*222*333</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">111</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="number">222</span>)  <span class="comment">#两行的结果 111222</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'log'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(<span class="string">'写入文件'</span>,fle=f,flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>int():pass</strong></p><p><strong>str():pass</strong></p><p><strong>bool():pass</strong></p><p><strong>set(): pass</strong></p><p><strong>list() 将一个可迭代对象转换成列表</strong></p><p><strong>tuple() 将一个可迭代对象转换成元组</strong></p><p><strong>dict() 通过相应的方式创建字典。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list</span><br><span class="line">l1 = list(<span class="string">'abcd'</span>)</span><br><span class="line">print(l1)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br><span class="line">tu1 = tuple(<span class="string">'abcd'</span>)</span><br><span class="line">print(tu1)  <span class="comment"># ('a', 'b', 'c', 'd')</span></span><br></pre></td></tr></table></figure><p><strong>abs() 返回绝对值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">-5</span></span><br><span class="line">print(abs(i))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p><strong>sum() 求和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">print(sum((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><strong>min() 求最小值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(min([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))  <span class="comment"># 返回此序列最小值</span></span><br><span class="line">ret = min([<span class="number">1</span>,<span class="number">2</span>,<span class="number">-5</span>,],key=abs)  <span class="comment"># 按照绝对值的大小，返回此序列最小值</span></span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 加key是可以加函数名，min自动会获取传入函数中的参数的每个元素，然后通过你设定的返回值比较大小，</span></span><br><span class="line"><span class="comment"># 返回最小的传入的那个参数。</span></span><br><span class="line">print(min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">-5</span>,<span class="number">6</span>,<span class="number">-3</span>,key=<span class="keyword">lambda</span> x:abs(x)))  <span class="comment"># 可以设置很多参数比较大小</span></span><br><span class="line">dic = &#123;<span class="string">'a'</span>:<span class="number">3</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">1</span>&#125;</span><br><span class="line">print(min(dic,key=<span class="keyword">lambda</span> x:dic[x]))</span><br><span class="line"><span class="comment"># x为dic的key，lambda的返回值（即dic的值进行比较）返回最小的值对应的键</span></span><br></pre></td></tr></table></figure><p><strong>max() 最大值与最小值用法相同。</strong></p><p><strong>reversed() 将一个序列翻转, 返回翻转序列的迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = reversed(<span class="string">'你好'</span>)  <span class="comment"># l 获取到的是一个生成器</span></span><br><span class="line">print(list(l))</span><br><span class="line">ret = reversed([<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line">print(list(ret))  <span class="comment"># [9, 7, 3, 4, 1]</span></span><br></pre></td></tr></table></figure><p><strong>bytes() 把字符串转换成bytes类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'你好太白'</span></span><br><span class="line">bs = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line"><span class="comment"># 结果:b'\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7'</span></span><br><span class="line">s1 = bs.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># 结果: 你好太白</span></span><br><span class="line">s = <span class="string">'你好'</span></span><br><span class="line">bs = bytes(s,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line"><span class="comment"># 将字符串转换成字节</span></span><br><span class="line">bs1 = str(bs,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs1)</span><br><span class="line"><span class="comment"># 将字节转换成字符串</span></span><br></pre></td></tr></table></figure><p><strong>zip() 拉链方法。</strong>函数用于将可迭代的对象作为参数,将对象中对应的元素打包成一个个元组,</p><p>然后返回由这些元祖组成的内容,如果各个迭代器的元素个数不一致,则按照长度最短的返回，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line">lst3 = (<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(lst1,lst2,lst3):</span><br><span class="line">    print(i)</span><br><span class="line">结果:</span><br><span class="line">(<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">11</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'b'</span>, <span class="number">12</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'c'</span>, <span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><strong>sorted</strong>排序函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:sorted(iterable,key=None,reverse=False)</span></span><br><span class="line"><span class="comment"># iterable : 可迭代对象</span></span><br><span class="line"><span class="comment"># key: 排序规则(排序函数),在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数.</span></span><br><span class="line"><span class="comment">#      根据函数运算的结果进行排序</span></span><br><span class="line"><span class="comment"># reverse :是否是倒叙,True 倒叙 False 正序</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">lst2 = sorted(lst)</span><br><span class="line">print(lst)    <span class="comment">#原列表不会改变</span></span><br><span class="line">print(lst2)   <span class="comment">#返回的新列表是经过排序的  </span></span><br><span class="line">lst3 = sorted(lst,reverse=<span class="literal">True</span>)</span><br><span class="line">print(lst3)   <span class="comment">#倒叙 </span></span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 字典使用sorted排序</span></span><br><span class="line">dic = &#123;<span class="number">1</span>:<span class="string">'a'</span>,<span class="number">3</span>:<span class="string">'c'</span>,<span class="number">2</span>:<span class="string">'b'</span>&#125;</span><br><span class="line">print(sorted(dic))   <span class="comment"># 字典排序返回的就是排序后的key </span></span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 和函数组合使用</span></span><br><span class="line"><span class="comment"># 定义一个列表,然后根据一元素的长度排序</span></span><br><span class="line">lst = [<span class="string">'天龙八部'</span>,<span class="string">'西游记'</span>,<span class="string">'红楼梦'</span>,<span class="string">'三国演义'</span>] </span><br><span class="line"><span class="comment"># 计算字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(s)</span><br><span class="line">print(sorted(lst,key=func)) </span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line"><span class="comment"># ['西游记', '红楼梦', '天龙八部', '三国演义']</span></span><br><span class="line">和<span class="keyword">lambda</span>组合使用</span><br><span class="line">lst = [<span class="string">'天龙八部'</span>,<span class="string">'西游记'</span>,<span class="string">'红楼梦'</span>,<span class="string">'三国演义'</span>] </span><br><span class="line">print(sorted(lst,key=<span class="keyword">lambda</span> s:len(s))) </span><br><span class="line">结果:</span><br><span class="line">[<span class="string">'西游记'</span>, <span class="string">'红楼梦'</span>, <span class="string">'天龙八部'</span>, <span class="string">'三国演义'</span>]  </span><br><span class="line">lst = [&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'alex'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'id'</span>:<span class="number">2</span>,<span class="string">'name'</span>:<span class="string">'wusir'</span>,<span class="string">'age'</span>:<span class="number">17</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'id'</span>:<span class="number">3</span>,<span class="string">'name'</span>:<span class="string">'taibai'</span>,<span class="string">'age'</span>:<span class="number">16</span>&#125;,] </span><br><span class="line"><span class="comment"># 按照年龄对学生信息进行排序 </span></span><br><span class="line">print(sorted(lst,key=<span class="keyword">lambda</span> e:e[<span class="string">'age'</span>])) </span><br><span class="line">结果:</span><br><span class="line">[&#123;<span class="string">'id'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'taibai'</span>, <span class="string">'age'</span>: <span class="number">16</span>&#125;, \</span><br><span class="line">&#123;<span class="string">'id'</span>: <span class="number">2</span>, <span class="string">'name'</span>: <span class="string">'wusir'</span>, <span class="string">'age'</span>: <span class="number">17</span>&#125;, &#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;]</span><br></pre></td></tr></table></figure><p><strong>filter</strong>筛选过滤</p><p>类似于各种推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: filter(function,iterable)</span></span><br><span class="line"><span class="comment"># function: 用来筛选的函数,在filter中会自动的把iterable中的元素传递给function,</span></span><br><span class="line"><span class="comment"># 然后根据function返回的True或者False来判断是否保留此项数据</span></span><br><span class="line">iterable:可迭代对象</span><br><span class="line">lst = [&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'alex'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'wusir'</span>,<span class="string">'age'</span>:<span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'taibai'</span>,<span class="string">'age'</span>:<span class="number">16</span>&#125;,] </span><br><span class="line">ls = filter(<span class="keyword">lambda</span> e:e[<span class="string">'age'</span>] &gt; <span class="number">16</span>,lst) </span><br><span class="line">print(list(ls)) </span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'wusir'</span>, <span class="string">'age'</span>: <span class="number">17</span>&#125;]</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 映射函数</span></span><br><span class="line"><span class="comment"># 语法: map(function,iterable) 可以对可迭代对象中的每一个元素进映射,分别取执行function,返回一个迭代器</span></span><br><span class="line"><span class="comment"># 计算列表中每个元素的平方,返回新列表</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  s*s</span><br><span class="line">mp = map(func,lst)</span><br><span class="line">print(mp)</span><br><span class="line">print(list(mp))</span><br><span class="line"><span class="comment"># 改写成lambda</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> s:s*s,lst)))</span><br><span class="line"><span class="comment"># 计算两个列表中相同位置的数据的和</span></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">lst2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x, y: x+y, lst1, lst2)))</span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure><p><img src="http://crm.pythonav.com/media/uploads/2019/04/12/IMAGE-20190412120136-9.GIF" alt="img"><strong>reduce</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="comment"># reduce 的使用方式:</span></span><br><span class="line"><span class="comment"># reduce(函数名,可迭代对象)  # 这两个参数必须都要有,缺一个不行</span></span><br><span class="line">ret = reduce(func,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line">print(ret)  <span class="comment"># 结果 25</span></span><br><span class="line"><span class="comment"># reduce的作用是先把列表中的前俩个元素取出计算出一个值然后临时保存着,</span></span><br><span class="line"><span class="comment"># 接下来用这个临时保存的值和列表中第三个元素进行计算,求出一个新的值将最开始</span></span><br><span class="line"><span class="comment"># 临时保存的值覆盖掉,然后在用这个新的临时值和列表中第四个元素计算.依次类推</span></span><br><span class="line"><span class="comment"># 注意:我们放进去的可迭代对象没有更改</span></span><br><span class="line"><span class="comment"># 以上这个例子我们使用sum就可以完全的实现了.我现在有[1,2,3,4]想让列表中的数变成1234,就要用到reduce了.</span></span><br><span class="line"><span class="comment"># 普通函数版</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">l = reduce(func,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 匿名函数版</span></span><br><span class="line">l = reduce(<span class="keyword">lambda</span> x,y:x*<span class="number">10</span>+y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 在Python2.x版本中recude是直接 import就可以的, Python3.x版本中需要从functools这个包中导入</span></span><br><span class="line"><span class="comment"># 龟叔本打算将 lambda 和 reduce 都从全局名字空间都移除, 舆论说龟叔不喜欢lambda 和 reduce</span></span><br><span class="line"><span class="comment"># 最后lambda没删除是因为和一个人写信写了好多封,进行交流然后把lambda保住了.</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>匿名函数 lambda，顾名思义就是没有名字的函数，也叫一句话函数。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>　　<strong>函数名 = lambda 参数:返回值(对参数的简单处理)</strong></p><p>  1）此函数不是没有名字，他是有名字的，他的名字就是你给其设置的变量，比如func.</p><p>  2）lambda 是定义匿名函数的关键字，相当于函数的def.</p><p>  3）lambda 后面直接加形参，形参加多少都可以，只要用逗号隔开就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> a,b,*args,sex= <span class="string">'alex'</span>,c,**kwargs: kwargs</span><br><span class="line">print(func(<span class="number">3</span>, <span class="number">4</span>,c=<span class="number">666</span>,name=<span class="string">'alex'</span>))  <span class="comment"># &#123;'name': 'alex'&#125;</span></span><br><span class="line"><span class="comment"># 所有类型的形参都可以加，但是一般使用匿名函数只是加位置参数，其他的用不到。</span></span><br></pre></td></tr></table></figure><p>  4）返回值在冒号之后设置，返回值和正常的函数一样,可以是任意数据类型。</p><p>  5）匿名函数不管多复杂.只能写一行.且逻辑结束后直接返回数据</p><h5 id="小题"><a href="#小题" class="headerlink" title="小题"></a>小题</h5><p>写匿名函数：接收一个可切片的数据，返回索引为0与2的对应的元素（元组形式）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func = lambda x:(x[0],x[2])</span><br><span class="line">print(func(&apos;afafasd&apos;))</span><br></pre></td></tr></table></figure><p>写匿名函数：接收两个int参数，将较大的数据返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func = lambda x,y: x if x &gt; y else y</span><br><span class="line">print(func(3,100))</span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    series = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = sum(series)</span><br><span class="line">        <span class="keyword">return</span> total/len(series)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line"></span><br><span class="line">avg = make_averager()</span><br><span class="line">print(avg(<span class="number">100000</span>))</span><br><span class="line">print(avg(<span class="number">110000</span>))</span><br><span class="line">print(avg(<span class="number">120000</span>))</span><br></pre></td></tr></table></figure><p><strong>大家仔细看一下这个代码，我是在函数中嵌套了一个函数。那么avg 这个变量接收的实际是averager函数名，也就是其对应的内存地址，我执行了三次avg 也就是执行了三次averager这个函数。那么此时你们有什么问题？</strong></p><p>肯定有学生就会问，那么我的make_averager这个函数只是执行了一次，为什么series这个列表没有消失？反而还可以被调用三次呢？这个就是最关键的地方，也是闭包的精华所在。我给大家说一下这个原理，以图为证：</p><p><img src="http://crm.pythonav.com/media/uploads/2019/04/12/IMAGE.PNG" alt="img"></p><p>  上面被红色方框框起来的区域就是闭包，被蓝色圈起来的那个变量应该是make_averager()函数的局部变量，它应该是随着make_averager()函数的执行结束之后而消失。但是他没有，是因为此区域形成了闭包，series变量就变成了一个叫<strong>自由变量</strong>的东西，averager函数的作用域会延伸到包含自由变量series的绑定。也就是说，每次我调用avg对应的averager函数 时，都可以引用到这个自用变量series，这个就是闭包。</p><h5 id="闭包的定义："><a href="#闭包的定义：" class="headerlink" title="闭包的定义："></a>闭包的定义：</h5><ol><li><p>闭包是嵌套在函数中的函数。</p></li><li><p>闭包必须是内层函数对外层函数的变量（非全局变量）的引用。</p></li></ol><h5 id="判断-2"><a href="#判断-2" class="headerlink" title="判断"></a>判断</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例一：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">ret = wrapper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例二：</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">ret = wrapper()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例三：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(a)</span><br><span class="line">        print(b)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">ret = wrapper(a,b)</span><br></pre></td></tr></table></figure><p>以上三个例子，最难判断的是第三个，其实第三个也是闭包，如果我们每次去研究代码判断其是不是闭包，有一些不科学，或者过于麻烦了，那么有一些函数的属性是可以获取到此函数是否拥有自由变量的，如果此函数拥有自由变量，那么就可以侧面证明其是否是闭包函数了（<strong>了解</strong>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    series = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = sum(series)</span><br><span class="line">        <span class="keyword">return</span> total/len(series)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line">avg = make_averager()</span><br><span class="line"><span class="comment"># 函数名.__code__.co_freevars 查看函数的自由变量</span></span><br><span class="line">print(avg.__code__.co_freevars)  <span class="comment"># ('series',)</span></span><br><span class="line">当然还有一些参数，仅供了解：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名.__code__.co_freevars 查看函数的自由变量</span></span><br><span class="line">print(avg.__code__.co_freevars)  <span class="comment"># ('series',)</span></span><br><span class="line"><span class="comment"># 函数名.__code__.co_varnames 查看函数的局部变量</span></span><br><span class="line">print(avg.__code__.co_varnames)  <span class="comment"># ('new_value', 'total')</span></span><br><span class="line"><span class="comment"># 函数名.__closure__ 获取具体的自由变量对象，也就是cell对象。</span></span><br><span class="line"><span class="comment"># (&lt;cell at 0x0000020070CB7618: int object at 0x000000005CA08090&gt;,)</span></span><br><span class="line"><span class="comment"># cell_contents 自由变量具体的值</span></span><br><span class="line">print(avg.__closure__[<span class="number">0</span>].cell_contents)  <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>保存局部信息不被销毁，保证数据的安全性。</p><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ol><li>可以保存一些非全局变量但是不易被销毁、改变的数据。</li><li>装饰器</li></ol><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><h5 id="开发封闭原则"><a href="#开发封闭原则" class="headerlink" title="开发封闭原则"></a>开发封闭原则</h5><p>  1.对扩展是开放的</p><p>​    我们说，任何一个程序，不可能在设计之初就已经想好了所有的功能并且未来不做任何更新和修改。所以我们必须允许代码扩展、添加新功能。</p><p>  2.对修改是封闭的</p><p>​    就像我们刚刚提到的，因为我们写的一个函数，很有可能已经交付给其他人使用了，如果这个时候我们对函数内部进行修改，或者修改了函数的调用方式，很有可能影响其他已经在使用该函数的用户。OK，理解了开封封闭原则之后，我们聊聊装饰器。</p><p><strong>所以装饰器最终最完美的定义就是：在不改变原被装饰的函数的源代码以及调用方式下，为其添加额外的功能。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常识&quot;&gt;&lt;a href=&quot;#常识&quot; class=&quot;headerlink&quot; title=&quot;常识&quot;&gt;&lt;/a&gt;常识&lt;/h3&gt;&lt;h4 id=&quot;计算机基本组件&quot;&gt;&lt;a href=&quot;#计算机基本组件&quot; class=&quot;headerlink&quot; title=&quot;计算机基本组件&quot;&gt;&lt;/a&gt;计算机基本组件&lt;/h4&gt;&lt;h5 id=&quot;cpu&quot;&gt;&lt;a href=&quot;#cpu&quot; class=&quot;headerlink&quot; title=&quot;cpu&quot;&gt;&lt;/a&gt;cpu&lt;/h5&gt;&lt;p&gt;计算机的运算和计算中心&lt;/p&gt;
&lt;p&gt;人类一秒，可以运行10亿条指令，比内存快百度，硬盘快百万倍&lt;/p&gt;
&lt;h5 id=&quot;内存&quot;&gt;&lt;a href=&quot;#内存&quot; class=&quot;headerlink&quot; title=&quot;内存&quot;&gt;&lt;/a&gt;内存&lt;/h5&gt;&lt;p&gt;暂时存储数据，临时加载数据应用程序，分为RAM，ROM&lt;/p&gt;
&lt;h5 id=&quot;硬盘&quot;&gt;&lt;a href=&quot;#硬盘&quot; class=&quot;headerlink&quot; title=&quot;硬盘&quot;&gt;&lt;/a&gt;硬盘&lt;/h5&gt;&lt;p&gt;长期存储数据&lt;/p&gt;
&lt;h5 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h5&gt;&lt;p&gt;一个软件，连接计算机的硬件与所有软件之间的一个软件&lt;/p&gt;
&lt;h4 id=&quot;python历史&quot;&gt;&lt;a href=&quot;#python历史&quot; class=&quot;headerlink&quot; title=&quot;python历史&quot;&gt;&lt;/a&gt;python历史&lt;/h4&gt;&lt;p&gt;python崇尚优雅，简洁&lt;/p&gt;
&lt;p&gt;2和3有较多区别&lt;/p&gt;
&lt;h4 id=&quot;python的种类&quot;&gt;&lt;a href=&quot;#python的种类&quot; class=&quot;headerlink&quot; title=&quot;python的种类&quot;&gt;&lt;/a&gt;python的种类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Cpython：官方推荐解释器。可以转化成C语言能识别的字节码。&lt;/li&gt;
&lt;li&gt;Jpython: 可以转化成Java语言能识别的字节码。&lt;/li&gt;
&lt;li&gt;Ironpython：可以转化成.net语言能识别的字节码&lt;/li&gt;
&lt;li&gt;pypy: 动态编译&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="老男孩" scheme="http://yoursite.com/tags/%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>requests</title>
    <link href="http://yoursite.com/2020/02/01/python/requests/"/>
    <id>http://yoursite.com/2020/02/01/python/requests/</id>
    <published>2020-01-31T21:04:33.000Z</published>
    <updated>2020-02-01T11:02:01.390Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫踩得坑</title>
    <link href="http://yoursite.com/2020/01/31/python/%E7%88%AC%E8%99%AB%E8%B8%A9%E5%BE%97%E5%9D%91/"/>
    <id>http://yoursite.com/2020/01/31/python/爬虫踩得坑/</id>
    <published>2020-01-31T09:35:10.000Z</published>
    <updated>2020-02-08T01:28:12.106Z</updated>
    
    <content type="html"><![CDATA[<h5 id="百度最近更新，需要过安检"><a href="#百度最近更新，需要过安检" class="headerlink" title="百度最近更新，需要过安检"></a>百度最近更新，需要过安检</h5><p>默认情况 下先请求一次百度获取这些参数，然后每次请求带上即可 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">item.Header.Add(&quot;Bdpagetype&quot;, &quot; 3&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Bdqid&quot;, &quot; 0xd30b86920004fb3f&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Cache-Control&quot;, &quot; private&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Ckpacknum&quot;, &quot; 2&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Ckrndstr&quot;, &quot; 20004fb3f&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Strict-Transport-Security&quot;, &quot; max-age=172800&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Traceid&quot;, &quot; 1574759518274850689015207396528370285375&quot;);//设置请求头信息（Header）</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="抓取简书登录cookie"><a href="#抓取简书登录cookie" class="headerlink" title="抓取简书登录cookie"></a>抓取简书登录cookie</h5><p>登录发现post需要包含参数</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/20200131201546.png" alt></p><p>检查页面，发现在这儿，但不知如何取值</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/20200131201659.png" alt></p><p>authenticity_token应该每个页面动态生成</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/20200131201905.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;百度最近更新，需要过安检&quot;&gt;&lt;a href=&quot;#百度最近更新，需要过安检&quot; class=&quot;headerlink&quot; title=&quot;百度最近更新，需要过安检&quot;&gt;&lt;/a&gt;百度最近更新，需要过安检&lt;/h5&gt;&lt;p&gt;默认情况 下先请求一次百度获取这些参数，然后每次请求带上即可 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Bdpagetype&amp;quot;, &amp;quot; 3&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Bdqid&amp;quot;, &amp;quot; 0xd30b86920004fb3f&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Cache-Control&amp;quot;, &amp;quot; private&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Ckpacknum&amp;quot;, &amp;quot; 2&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Ckrndstr&amp;quot;, &amp;quot; 20004fb3f&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Strict-Transport-Security&amp;quot;, &amp;quot; max-age=172800&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Traceid&amp;quot;, &amp;quot; 1574759518274850689015207396528370285375&amp;quot;);//设置请求头信息（Header）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="http://yoursite.com/2020/01/31/python/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/01/31/python/爬虫入门/</id>
    <published>2020-01-30T17:26:18.000Z</published>
    <updated>2020-02-01T11:01:40.954Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/http.png" alt></p><a id="more"></a><h3 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h3><h4 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E7%88%AC%E8%99%AB%E7%9A%84%E7%AE%80%E4%BB%8B1.png" alt></p><p>&lt;</p><h4 id="urllib-request"><a href="#urllib-request" class="headerlink" title="urllib.request"></a>urllib.request</h4><p>python3内置的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 用https时拿不到数据</span></span><br><span class="line">    url = <span class="string">"http://www.baidu.com/"</span></span><br><span class="line">    response = urllib.request.urlopen(url)</span><br><span class="line">    <span class="comment"># print(response)</span></span><br><span class="line">    data = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"baidu.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="comment"># python爬取到的多为str,bytes</span></span><br><span class="line">    <span class="comment"># str通过对应encode("编码")转为bytes，同理bytes通过decode转为str</span></span><br><span class="line">    <span class="comment"># 具体编码格式见html页面head头信息中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">load_data()</span><br></pre></td></tr></table></figure><p><strong>get传参要注意转成url编码</strong></p><p>由于百度更新，以下过不了安检，实际上拿不到数据了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_param</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"http://www.baidu.com/s?wd="</span></span><br><span class="line">    param = <span class="string">"美女"</span></span><br><span class="line">    final_url = url + param</span><br><span class="line">    <span class="comment"># python解释器只支持ASCII码，所以必须转码</span></span><br><span class="line">    final_url = urllib.parse.quote(final_url, safe=string.printable)</span><br><span class="line">    response = urllib.request.urlopen(final_url)</span><br><span class="line">    data_str = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"meinv.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_param()</span><br></pre></td></tr></table></figure><p>字典传参时,这样得到字符串参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">"wd"</span>: <span class="string">"中文"</span>,</span><br><span class="line">    <span class="string">"key"</span>: <span class="string">"zhang"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"san"</span></span><br><span class="line">&#125;</span><br><span class="line">params_str = urllib.parse.urlencode(params)</span><br></pre></td></tr></table></figure><p>绑定请求头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://www.baidu.com/s?wd=%E7%BE%8E%E5%A5%B3"</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="comment"># 浏览器版本</span></span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 创建时绑定请求头，也可以requset.add_header()来动态绑定</span></span><br><span class="line">request = urllib.request.Request(url, headers=header)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br></pre></td></tr></table></figure><p>获取随机的User-Agent(第三方包)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">    print(UserAgent().chrome)</span><br><span class="line">    print(UserAgent().ie)</span><br><span class="line">    print(UserAgent().firefox)</span><br><span class="line">    print(UserAgent().opera)</span><br><span class="line">    print(UserAgent().safari)</span><br><span class="line">    print(UserAgent().random)</span><br></pre></td></tr></table></figure><h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>对urlopen进行扩展</p><p>urlopen源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> _opener</span><br><span class="line"><span class="keyword">if</span> cafile <span class="keyword">or</span> capath <span class="keyword">or</span> cadefault:</span><br><span class="line">    <span class="keyword">import</span> warnings</span><br><span class="line">    warnings.warn(<span class="string">"cafile, capath and cadefault are deprecated, use a "</span></span><br><span class="line">                  <span class="string">"custom context instead."</span>, DeprecationWarning, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">"You can't pass both context and any of cafile, capath, and "</span></span><br><span class="line">            <span class="string">"cadefault"</span></span><br><span class="line">        )</span><br><span class="line">  <span class="comment"># 安全套阶层，第三方CA数字证书</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> _have_ssl:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'SSL support not available'</span>)</span><br><span class="line">    context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,</span><br><span class="line">                                         cafile=cafile,</span><br><span class="line">                                         capath=capath)</span><br><span class="line">    <span class="comment"># 默认用HTTPSHandler，可以用别的Handler来实现功能扩展</span></span><br><span class="line">    https_handler = HTTPSHandler(context=context)</span><br><span class="line">    opener = build_opener(https_handler)</span><br><span class="line"><span class="keyword">elif</span> context:</span><br><span class="line">    https_handler = HTTPSHandler(context=context)</span><br><span class="line">    opener = build_opener(https_handler)</span><br><span class="line"><span class="keyword">elif</span> _opener <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    _opener = opener = build_opener()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    opener = _opener</span><br><span class="line"><span class="keyword">return</span> opener.open(url, data, timeout)</span><br></pre></td></tr></table></figure><h6 id="HTTPHandler演示"><a href="#HTTPHandler演示" class="headerlink" title="HTTPHandler演示"></a>HTTPHandler演示</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://www.baidu.com/"</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="comment"># 浏览器版本</span></span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url, headers=header)</span><br><span class="line">handler = urllib.request.HTTPHandler()</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(request)</span><br><span class="line">data = response.read().decode(<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure><h6 id="ProxyHandler"><a href="#ProxyHandler" class="headerlink" title="ProxyHandler"></a>ProxyHandler</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_proxy_handler</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://blog.csdn.net/willsnowdev/article/details/90140266"</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="comment"># 浏览器版本</span></span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent().random</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 可以用多个IP，到时候随机选取</span></span><br><span class="line">    <span class="comment"># "http": "163.204.247.20:9999"也可</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">        <span class="string">"http"</span>: <span class="string">"http://163.204.247.20:9999"</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url, headers=header)</span><br><span class="line">    proxy_handler = urllib.request.ProxyHandler(proxy)</span><br><span class="line">    opener = urllib.request.build_opener(proxy_handler)</span><br><span class="line">    response = opener.open(request)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"requset_header.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.read().decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_proxy_handler()</span><br></pre></td></tr></table></figure><p>多个免费代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy_list = [</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"106.75.226.36:808"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"61.135.217.7:80"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"125.70.13.77:8080"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"118.190.95.35:9001"</span>&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>付费代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"username:pwd@163.204.247.20:9999"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">username = <span class="string">"xunzhao"</span></span><br><span class="line">pwd = <span class="string">"173hjgew8"</span></span><br><span class="line">money_proxy1 = <span class="string">"163.204.247.20:9999"</span></span><br><span class="line"><span class="comment"># 创建密码管理器</span></span><br><span class="line">password_manger = urllib.request.HTTPPasswordMgr()</span><br><span class="line">password_manger.add_password(<span class="literal">None</span>, money_proxy1, username, pwd)</span><br><span class="line">handle_auth = urllib.request.ProxyBasicAuthHandler(password_manger)</span><br><span class="line">opener_auth = urllib.request.build_opener(handle_auth)</span><br><span class="line">response = opener_auth.open(url)</span><br></pre></td></tr></table></figure><p>用公司内网爬数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_nei_wang</span><span class="params">()</span>:</span></span><br><span class="line">    nei_url = <span class="string">"https://www.jianshu.com/p/325bdc0ae92f"</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent().random</span><br><span class="line">    &#125;</span><br><span class="line">    username = <span class="string">"admin"</span></span><br><span class="line">    pwd = <span class="string">"admin007"</span></span><br><span class="line">    password_manger = urllib.request.HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">    password_manger.add_password(<span class="literal">None</span>, nei_url, username, pwd)</span><br><span class="line">    <span class="comment"># handle不同，其他和付费代理很像</span></span><br><span class="line">    handle_nei = urllib.request.HTTPBasicAuthHandler(password_manger)</span><br><span class="line">    opener_nei = urllib.request.build_opener(handle_nei)</span><br><span class="line">    response = opener_nei.open(nei_url)</span><br><span class="line">    print(response.read().decode(<span class="string">"utf-8"</span>))</span><br></pre></td></tr></table></figure><h5 id="cookie认证"><a href="#cookie认证" class="headerlink" title="cookie认证"></a>cookie认证</h5><p>手动获取cookie，添加到header中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent().random,</span><br><span class="line">    <span class="string">"Cookie"</span>: <span class="string">"__yadk_uid=e2gl8vcNK8DLVH2eQd6vHpvH1QvuStkO; web_login_version=MTU4MDA5MDc3OQ%3D%3D--366eb244926d0d504aa444afc85df5e80948cee6; remember_user_token=W1syMTAxNzY3NV0sIiQyYSQxMSRUVGNQenhyZjFtMzdiN3Mxc0xzT25lIiwiMTU4MDQ2MzkzNy42MjQ5NjA0Il0%3D--2fd8938f7291d2405e0c23b0f267c631fad3fd9b; read_mode=day; default_font=font2; locale=zh-CN; _m7e_session_core=ad86ea9fddf5bd5d6969bc414a322298; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%2221017675%22%2C%22%24device_id%22%3A%2216bea6ca2e9365-067bb910973608-e343166-1049088-16bea6ca2ea5c2%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E8%87%AA%E7%84%B6%E6%90%9C%E7%B4%A2%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22https%3A%2F%2Fwww.baidu.com%2Fs%22%2C%22%24latest_search_keyword%22%3A%22%E7%AE%80%E4%B9%A6%22%2C%22%24latest_utm_source%22%3A%22desktop%22%2C%22%24latest_utm_medium%22%3A%22not-signed-in-like-note-btn-in-bottom%22%2C%22%24latest_referrer_host%22%3A%22www.baidu.com%22%7D%2C%22first_id%22%3A%2216bea6ca2e9365-067bb910973608-e343166-1049088-16bea6ca2ea5c2%22%7D; Hm_lvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1580090858,1580277385,1580463938,1580466286; Hm_lpvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1580466310"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动获取，用cookiejar来保存cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获取 个人中心的页面</span><br><span class="line"></span><br><span class="line">1. 代码登录  登录成功 cookie(有效)</span><br><span class="line">2. 自动带着cookie 去请求个人中心</span><br><span class="line"></span><br><span class="line">cookiejar 自动保存这个cookie</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent().random,</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'https://www.yaozh.com/login'</span></span><br><span class="line">    <span class="comment"># 1.2 登录的参数</span></span><br><span class="line">    login_form_data = &#123;</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"xiaomaoera12"</span>,</span><br><span class="line">        <span class="string">"pwd"</span>: <span class="string">"lina081012"</span>,</span><br><span class="line">        <span class="string">"formhash"</span>: <span class="string">"CE3ADF28C5"</span>,</span><br><span class="line">        <span class="string">"backurl"</span>: <span class="string">"https%3A%2F%2Fwww.yaozh.com%2F"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    login_form_data_str = urllib.parse.urlencode(login_form_data).encode(<span class="string">"utf-8"</span>)</span><br><span class="line">    cookie_jar = cookiejar.CookieJar()</span><br><span class="line">    cookie_handle = urllib.request.HTTPCookieProcessor(cookie_jar)</span><br><span class="line">    cookie_opener = urllib.request.build_opener(cookie_handle)</span><br><span class="line">    requset = urllib.request.Request(url, headers=header, data=login_form_data_str)</span><br><span class="line">    cookie_opener.open(requset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 代码带着cooke去访问 个人中心</span></span><br><span class="line">    center_url = <span class="string">'https://www.yaozh.com/member/'</span></span><br><span class="line">    center_request = urllib.request.Request(center_url, headers=header)</span><br><span class="line">    response = cookie_opener.open(center_url)</span><br><span class="line">    data = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"jianshu.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br></pre></td></tr></table></figure><h6 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h6><p>cookiejar原理和urlencode中safe=string.printable作用</p><h5 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h5><h6 id="URLError"><a href="#URLError" class="headerlink" title="URLError"></a>URLError</h6><p>url不存在</p><h6 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h6><p>4××，5××，可通过catch到error后，error.code来打印状态码</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/python3(urlib.request).png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/handler%E5%A4%84%E7%90%86%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/http.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="http://yoursite.com/2020/01/31/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/01/31/前端/前端基础/</id>
    <published>2020-01-30T17:06:22.000Z</published>
    <updated>2020-03-28T01:31:07.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="B-S架构详解"><a href="#B-S架构详解" class="headerlink" title="B/S架构详解"></a>B/S架构详解</h1><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200320141023-487867.png" alt="image-20200320141021500"></p><h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>使用静态网页开发技术发布的资源。</p><p>特点：</p><p>所有用户访问，得到的结果是一样的。</p><p>如：文本，图片，音频、视频, HTML,CSS,JavaScript</p><p>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</p><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><p>使用动态网页及时发布的资源。</p><p>特点：</p><p>所有用户访问，得到的结果可能不一样。</p><p>如：jsp/servlet,php,asp…</p><p>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</p><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HyperText Markup Language    超文本标记语言</p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309195848-122250.png" alt="image-20200309195837136"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309195853-544655.png" alt="image-20200309195759708"></p><h3 id="超级链接"><a href="#超级链接" class="headerlink" title="超级链接"></a>超级链接</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309195948-548386.png" alt="image-20200309195947908"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309200042-33203.png" alt="image-20200309200041122"></p><p><strong>锚点链接</strong>，实现在各元素间跳转</p><ul><li>本地：通过想跳转到的元素的id属性，href设置为#对应id值来实现跳转</li><li>其他页面：<code>href=地址#id值</code></li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309200314-980123.png" alt="image-20200309200313632"></p><p><img src="/.com//C:%5CUsers%5Casus%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200309200428901.png" alt="image-20200309200428901"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309200612-832440.png" alt="image-20200309200512079"></p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><pre><code>* 属性：    * action:指定提交数据的URL    * method:指定提交方式</code></pre><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309200628-694359.png" alt="image-20200309200622818"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309200724-900830.png" alt="image-20200309200722477"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* input：可以通过type属性值，改变元素展示的样式</span><br><span class="line">* type属性：</span><br><span class="line">    * text：文本输入框，默认值</span><br><span class="line">        * placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息</span><br><span class="line">    * password：密码输入框</span><br><span class="line">    * radio:单选框</span><br><span class="line">        * 注意：</span><br><span class="line">        1. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。</span><br><span class="line">        2. 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line">        3. checked属性，可以指定默认值</span><br><span class="line">    * checkbox：复选框</span><br><span class="line">    * file：文件选择框</span><br><span class="line">    * hidden：隐藏域，用于提交一些信息。</span><br><span class="line">    * 按钮：</span><br><span class="line">        * submit：提交按钮。可以提交表单</span><br><span class="line">        * button：普通按钮</span><br><span class="line">        * image：图片提交按钮</span><br><span class="line">        * src属性指定图片的路径</span><br><span class="line">    * label：指定输入项的文字描述信息</span><br><span class="line">        * 注意：</span><br><span class="line">        * label的for属性一般会和 input的id属性值对应</span><br><span class="line">    * select: 下拉列表</span><br><span class="line">        * 子元素：option，指定列表项</span><br><span class="line">        * 指定size属性后变为普通列表框</span><br><span class="line">    * textarea：文本域</span><br><span class="line">        * cols：指定列数，每一行有多少个字符</span><br><span class="line">        * rows：默认多少行。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>再次输入密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>兴趣爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>游泳</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>看书</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>爬山</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>思考<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>生日：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1993<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1994<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1995<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1996<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1997<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1998<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>年</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>6<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>月</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>6<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>日<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>头像：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"5.jpg"</span> <span class="attr">alt</span>=<span class="string">"路径错误"</span> <span class="attr">width</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"ptbtn"</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"tjbtn"</span> <span class="attr">value</span>=<span class="string">"提交按钮"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"100"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你的想法"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">multiple</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>er<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>er<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"7"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309210816-142088.png" alt="image-20200309210814981"></p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Cascading Style Sheets            层叠<strong>(多次设置)</strong>样式列表</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将结构与样式分离，可以随意切换多套样式</p><p>使页面载入更快，降低服务器的成本</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>内部</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>外部</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" href="文件路径"&gt;</span><br></pre></td></tr></table></figure><p>行内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用样式"><a href="#常用样式" class="headerlink" title="常用样式"></a>常用样式</h2><h3 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h3><p><strong>块级元素</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308091631-337152.png" alt="image-20200308091347269"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308091628-938938.png" alt></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:yellow;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"路径"</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:top center;</span><br><span class="line">    <span class="attribute">background</span>: yellow <span class="built_in">url</span>(<span class="string">"路径"</span>) no-repeat fixed top center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色设置"><a href="#颜色设置" class="headerlink" title="颜色设置"></a>颜色设置</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308092412-875702.png" alt="image-20200308092411487"></p><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308092557-614447.png" alt="image-20200308092554209"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308093145-738229.png" alt="image-20200308093143434"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:rgb(238</span>,130,238);</span><br><span class="line"><span class="selector-tag">direction</span><span class="selector-pseudo">:ltr</span>;</span><br><span class="line"><span class="selector-tag">letter-spacing</span><span class="selector-pseudo">:5px</span>;</span><br><span class="line"><span class="selector-tag">line-height</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line"><span class="selector-tag">text-align</span><span class="selector-pseudo">:justify</span>;</span><br><span class="line"><span class="selector-tag">text-decoration</span><span class="selector-pseudo">:underline</span>;</span><br><span class="line"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:5px</span> 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">red</span>;</span><br><span class="line"><span class="selector-tag">text-transform</span><span class="selector-pseudo">:uppercase</span>;</span><br><span class="line"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:2em</span>;</span><br></pre></td></tr></table></figure><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308093546-693357.png" alt="image-20200308093545868"></p><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308093750-507429.png" alt="image-20200308093748923"></p><h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>设置层叠时的优先级</p><h2 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p><code>.类名</code></p><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><h4 id="状态伪类"><a href="#状态伪类" class="headerlink" title="状态伪类"></a>状态伪类</h4><p>所有具备这些状态的都可以使用，只是经常和<a>搭配</a></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308110413-372436.png" alt="image-20200308110411083"></p><h4 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308111411-370541.png" alt="image-20200308111411399"></p><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308111510-76995.png" alt="image-20200308111509732"></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308111825-168078.png" alt="image-20200308111825367"></p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200308112058-942257.png" alt="image-20200308112057229"></p><h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>层叠样式表中的定位技术，有时称之为图层，更多的时候称为块</p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="大小，背景，位置"><a href="#大小，背景，位置" class="headerlink" title="大小，背景，位置"></a>大小，背景，位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    &lt;!--背景--&gt;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-tag">yellow</span>;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>大小<span class="selector-tag">--</span>&gt;</span><br><span class="line">    <span class="selector-tag">width</span>: 400<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>位置，多为浮动，定位，内外边距<span class="selector-tag">--</span>&gt;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">left</span>: 60<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="溢出效果"><a href="#溢出效果" class="headerlink" title="溢出效果"></a>溢出效果</h4><p>通过<code>overflow</code>来设置</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309082852-482927.png" alt="image-20200309082848431"></p><h4 id="边框，轮廓"><a href="#边框，轮廓" class="headerlink" title="边框，轮廓"></a>边框，轮廓</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309083208-478576.png" alt="image-20200309083201950"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309083239-65590.png" alt="image-20200309083238731"></p><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309083938-317376.png" alt="image-20200309083936309"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309084013-660613.png" alt="image-20200309084013511"></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309084047-395427.png" alt="image-20200309084046876"></p><h2 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h2><h3 id="行级元素"><a href="#行级元素" class="headerlink" title="行级元素"></a>行级元素</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309084330-492114.png" alt="image-20200309084313544"></p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309084347-190176.png" alt="image-20200309084345369"></p><h2 id="定位机制"><a href="#定位机制" class="headerlink" title="定位机制"></a>定位机制</h2><h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>默认样式</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309084452-8205.png" alt="image-20200309084450620"></p><h3 id="脱标流"><a href="#脱标流" class="headerlink" title="脱标流"></a>脱标流</h3><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><p>脱离文档流，同级元素的float位于同一层</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309090820-859658.png" alt="image-20200309090820061"></p><p><strong>inherit    继承父元素的浮动</strong></p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><h6 id="崩溃"><a href="#崩溃" class="headerlink" title="崩溃"></a>崩溃</h6><p><strong>起因：</strong>元素默认宽度为父级元素宽度，高度默认为其内元素的高度</p><p>子一级元素float后，若父元素未设置高度，其高度会崩溃</p><h6 id="包裹"><a href="#包裹" class="headerlink" title="包裹"></a>包裹</h6><p>父元素设为float后，会将子元素包裹起来</p><p>当包裹的是行级元素时，会在下边沿留下一个基准线的宽度</p><p>对子元素设置<code>vertical-align: bottom</code>来取消基准线</p><h6 id="环绕"><a href="#环绕" class="headerlink" title="环绕"></a>环绕</h6><p>平级元素会环绕显示</p><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><h6 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h6><ul><li>为了父元素不会出现高度崩溃</li><li>如果强制规定父元素高度，就不灵活了，不能自适应高度</li><li>从某个元素开始，不需要浮动了</li></ul><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><p>法一：在不需要浮动的元素添加<code>clear: both</code></p><p>法二：专门在不需要的地方添加一个clearDiv，然后设置如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#clearDiv</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><h5 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309093153-149611.png" alt="image-20200309093152266"></p><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309093230-461607.png" alt="image-20200309093230352"></p><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309093900-467530.png" alt="image-20200309093403810"></p><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>​    <img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309095413-333311.png" alt="image-20200309095413151"></p><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul><li>没有定位时，top，left设置无效，因为无参照物</li><li>通常子绝父相</li><li>绝对定位与相对定位主要在于是否脱离文档流，以及参照物的不同</li><li>绝对定位和float都会脱离文档流，但float的文字会环绕，而绝对定位会覆盖</li><li>同时设置相对定位和浮动时，会既具有文字环绕，又可相对自身定位</li></ul><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>是一种脚本语言，无需安装，所有浏览器内置</p><p>JavaScript = ECMAScript(客户端脚本语言标准) + JavaScript特有的(BOM,DOM)</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>内置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">alert("hello js")</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"文件路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>弱类型语言，声明时自动推导，使用时区分类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x; x=<span class="number">1</span>; <span class="comment">// 用var声明为局部变量，不用则为全局变量</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>,name=<span class="string">"zhangsan"</span></span><br><span class="line"><span class="keyword">typeof</span>(变量)<span class="comment">//获取变量类型null运算后得到object</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>原始数据类型</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309114551-133031.png" alt="image-20200309114550099"></p><p>引用数据类型</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309114639-231030.png" alt="image-20200309114638130"></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转为数字类型</span></span><br><span class="line"><span class="built_in">parseInt</span>()</span><br><span class="line"><span class="built_in">parseFloat</span>()</span><br><span class="line"><span class="built_in">Number</span>()<span class="comment">//比前两个更安全，只要有非数字就返回NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>()</span><br><span class="line"><span class="number">1.</span> number：<span class="number">0</span>或<span class="literal">NaN</span>为假，其他为真</span><br><span class="line"><span class="number">2.</span> string：除了空字符串(<span class="string">""</span>)，其他都是<span class="literal">true</span></span><br><span class="line"><span class="number">3.</span> <span class="literal">null</span>&amp;<span class="literal">undefined</span>:都是<span class="literal">false</span></span><br><span class="line"><span class="number">4.</span> 对象：所有对象都为<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>全局变量和局部变量和java一致</p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>==仅比较内容，===为全比较，会先判断类型</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309115643-501346.png" alt="image-20200309115642416"></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p><code>alert</code>        弹窗调试</p><p><code>console.log</code>        输出到控制台</p><h3 id="程序控制语句"><a href="#程序控制语句" class="headerlink" title="程序控制语句"></a>程序控制语句</h3><p>if，else if ，else， switch， while， do … while，for，增强for循环</p><p>写法和java一致</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明，可以先使用后声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">代码片段</span><br><span class="line"><span class="keyword">return</span> ***</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式，必须先定义后使用</span></span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">代码片段</span><br><span class="line"><span class="keyword">return</span> ***</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性：</span></span><br><span class="line"><span class="comment">// length:代表形参的个数</span></span><br><span class="line"><span class="comment">// 特点：</span></span><br><span class="line"><span class="comment">// 方法定义是，形参的类型不用写,返回值类型也不写。</span></span><br><span class="line"><span class="comment">// 方法是一个对象，如果定义名称相同的方法，会覆盖</span></span><br><span class="line"><span class="comment">// 在JS中，方法的调用只与方法的名称有关，和参数列表无关</span></span><br><span class="line"><span class="comment">// 在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</span></span><br></pre></td></tr></table></figure><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200309121115-984267.png" alt="image-20200309121114714"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"124ttgegvqwa"</span>;</span><br><span class="line">str.substring(<span class="number">3</span>,<span class="number">3</span>);<span class="comment">//开始位置，个数</span></span><br><span class="line">str.substr(<span class="number">3</span>,<span class="number">6</span>);<span class="comment">//开始位置，结束位置</span></span><br><span class="line">str.indexOf(<span class="number">1</span>,<span class="number">4</span>)<span class="comment">//一出现的位置，从4开始找</span></span><br><span class="line">str.indexOf(<span class="number">1</span>)<span class="comment">//一出现的位置</span></span><br><span class="line"></span><br><span class="line">n.toFixed(<span class="number">3</span>) <span class="comment">//保留三位小数</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">3</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Date</span></span><br><span class="line"><span class="comment">// toLocaleString()：返回当前date对象对应的时间本地字符串格式</span></span><br><span class="line"><span class="comment">// getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</span></span><br><span class="line"><span class="comment">//时间格式化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format_date</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> yy,mo,dd,hh,mi,ss;</span><br><span class="line"><span class="keyword">var</span> time;</span><br><span class="line">yy = date.getFullYear();</span><br><span class="line">mo = date.getMonth()+<span class="number">1</span>;</span><br><span class="line">dd = date.getDate();</span><br><span class="line">hh = date.getHours();</span><br><span class="line">mi = date.getMinutes();</span><br><span class="line">ss = date.getSeconds();</span><br><span class="line">time = yy+<span class="string">"-"</span>+mo+<span class="string">"-"</span>+dd+<span class="string">"-"</span>+hh+<span class="string">"-"</span>+mi+<span class="string">"-"</span>+ss;</span><br><span class="line"><span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">453</span>,<span class="number">23</span>,<span class="number">67</span>);</span><br><span class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> [<span class="number">2</span>,<span class="number">46</span>,<span class="number">77</span>,<span class="number">532</span>,<span class="string">"df"</span>];</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> str <span class="keyword">in</span> arrayObj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(arrayObj[str])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="comment">// join(参数):将数组中的元素按照指定的分隔符拼接为字符串</span></span><br><span class="line"><span class="comment">// push()向数组的末尾添加一个或更多元素，并返回新的长度。</span></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="comment">// length:数组的长度</span></span><br><span class="line"><span class="comment">// 特点：</span></span><br><span class="line"><span class="comment">//  JS中，数组元素的类型可变的。</span></span><br><span class="line"><span class="comment">//  JS中，数组长度可变的。</span></span><br></pre></td></tr></table></figure><h3 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h3><p>全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">encodeURI():url编码</span><br><span class="line">decodeURI():url解码</span><br><span class="line"></span><br><span class="line">encodeURIComponent():url编码,编码的字符更多</span><br><span class="line">decodeURIComponent():url解码</span><br><span class="line"></span><br><span class="line">parseInt():将字符串转为数字</span><br><span class="line">* 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</span><br><span class="line">isNaN():判断一个值是否是NaN</span><br><span class="line">* NaN六亲不认，连自己都不认。NaN参与的==比较全部问false</span><br><span class="line"></span><br><span class="line">eval():将字符串作为脚本代码来执行。</span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ul><li>概念：Browser Object Model 浏览器对象模型<ul><li>将浏览器的各个组成部分封装成对象。</li></ul></li></ul><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>Window：窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>窗口对象</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 与弹出框有关的方法：</span><br><span class="line">    alert()显示带有一段消息和一个确认按钮的警告框。</span><br><span class="line">    confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。</span><br><span class="line">        * 如果用户点击确定按钮，则方法返回true</span><br><span class="line">        * 如果用户点击取消按钮，则方法返回false</span><br><span class="line">    prompt()显示可提示用户输入的对话框。</span><br><span class="line">        * 返回值：获取用户输入的值</span><br><span class="line">2. 与打开关闭有关的方法：</span><br><span class="line">    close()关闭浏览器窗口。</span><br><span class="line">        * 谁调用我 ，我关谁</span><br><span class="line">    open()打开一个新的浏览器窗口</span><br><span class="line">        * 返回新的Window对象</span><br><span class="line">3. 与定时器有关的方式</span><br><span class="line">    setTimeout()在指定的毫秒数后调用函数或计算表达式。</span><br><span class="line">        * 参数：</span><br><span class="line">        1. js代码或者方法对象</span><br><span class="line">        2. 毫秒值</span><br><span class="line">        * 返回值：唯一标识，用于取消定时器</span><br><span class="line">    clearTimeout()取消由 setTimeout() 方法设置的 timeout。</span><br><span class="line">    setInterval()按照指定的周期（以毫秒计）来调用函数或计算表达式。</span><br><span class="line">    clearInterval()取消由 setInterval() 设置的 timeout。</span><br></pre></td></tr></table></figure><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ol><li>获取其他BOM对象<br>history<br>location<br>Navigator<br>Screen</li><li>获取DOM对象<br>document</li></ol><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>Window对象不需要创建可以直接使用 window使用。 window.方法名();</li><li>window引用可以省略。  方法名();</li></ul><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><p>地址栏对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 创建(获取)：</span><br><span class="line">    1. window.location</span><br><span class="line">    2. location</span><br><span class="line"></span><br><span class="line">2. 方法：</span><br><span class="line">    * reload()重新加载当前文档。刷新</span><br><span class="line">3. 属性</span><br><span class="line">    * href设置或返回完整的 URL。</span><br></pre></td></tr></table></figure><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>历史记录对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 创建(获取)：</span><br><span class="line">    1. window.history</span><br><span class="line">    2. history</span><br><span class="line"></span><br><span class="line">2. 方法：</span><br><span class="line">    * back()加载 history 列表中的前一个 URL。</span><br><span class="line">    * forward()加载 history 列表中的下一个 URL。</span><br><span class="line">    * go(参数)加载 history 列表中的某个具体页面。</span><br><span class="line">        * 参数：</span><br><span class="line">            * 正数：前进几个历史记录</span><br><span class="line">            * 负数：后退几个历史记录</span><br><span class="line">3. 属性：</span><br><span class="line">    * length返回当前窗口历史列表中的 URL 数量。</span><br></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><ul><li>概念： Document Object Model 文档对象模型<ul><li>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318113442-283651.png" alt="image-20200318113442228"></p><h3 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h3><ul><li>核心 DOM - 针对任何结构化文档的标准模型<ul><li>Document：文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment:注释对象</li></ul></li><li>Node：节点对象，其他5个的父对象</li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul><h3 id="核心DOM"><a href="#核心DOM" class="headerlink" title="核心DOM"></a>核心DOM</h3><h4 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h4><ol><li>创建(获取)：在html dom模型中可以使用window对象来获取<ol><li>window.document</li><li>document</li></ol></li><li>方法<ol><li>获取Element对象：<ol><li>getElementById()    ： 根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组</li></ol></li><li>创建其他DOM对象：<br>createAttribute(name)<br>createComment()<br>createElement()<br>createTextNode()</li></ol></li></ol><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><ol><li>获取/创建：通过document来获取和创建</li><li>方法：<ol><li>removeAttribute()：删除属性</li><li>setAttribute()：设置属性</li></ol></li></ol><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p><strong>下拉列表框</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yy = <span class="built_in">document</span>.getElementById(<span class="string">"yyyy"</span>);</span><br><span class="line">yy.options.add(<span class="keyword">new</span> Option(<span class="number">1</span>,<span class="number">1</span>));<span class="comment">// 添加option</span></span><br><span class="line">yy.option.remove(<span class="number">1</span>);<span class="comment">// 删除指定索引的option靠遍历删除所有时要注意倒叙删</span></span><br></pre></td></tr></table></figure><p><strong>图片</strong></p><p><code>img.src = &quot;F:/aa.jpg&quot;</code></p><p><strong>复选框</strong></p><p><code>img.checked = True;</code></p><p><strong>value</strong></p><p><code>标签.value = &quot;haha&quot;;</code></p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>节点对象，其他5个的父对象</p><ul><li>特点：所有dom对象都可以被认为是一个节点</li><li>方法：</li><li>CRUD dom树：<ul><li>appendChild()：向节点的子节点列表的结尾添加新的子节点。</li><li>removeChild()    ：删除（并返回）当前节点的指定子节点。</li><li>replaceChild()：用新节点替换一个子节点。</li></ul></li><li>属性：<ul><li>parentNode 返回节点的父节点。</li></ul></li></ul><h3 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h3><pre><code>1. 标签体(标签内容)的设置和获取：innerHTML2. 使用html元素对象的属性3. 控制元素样式    明确获取的对象是哪一个？    查看API文档，找其中有哪些属性可以设置    1. 使用元素的style属性来设置        如：             //修改样式方式1            div1.style.border = &quot;1px solid red&quot;;            div1.style.width = &quot;200px&quot;;            //font-size--&gt; fontSize            div1.style.fontSize = &quot;20px&quot;;    2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。</code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>概念：某些组件被执行了某些操作后，触发某些代码的执行。    <ul><li>事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</li><li>事件源：组件。如： 按钮 文本输入框…</li><li>监听器：代码。</li><li>注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</li></ul></li></ul><h4 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h4><p>js事件都以on开头</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora20200318112943-859506.png" alt="image-20200318112943152"></p><pre><code>1. 点击事件：    1. onclick：单击事件    2. ondblclick：双击事件2. 焦点事件    1. onblur：失去焦点    2. onfocus:元素获得焦点。3. 加载事件：    1. onload：一张页面或一幅图像完成加载。4. 鼠标事件：    1. onmousedown    鼠标按钮被按下。    2. onmouseup    鼠标按键被松开。    3. onmousemove    鼠标被移动。    4. onmouseover    鼠标移到某元素之上。    5. onmouseout    鼠标从某元素移开。5. 键盘事件：    1. onkeydown    某个键盘按键被按下。        2. onkeyup        某个键盘按键被松开。    3. onkeypress    某个键盘按键被按下并松开。6. 选择和改变    1. onchange    域的内容被改变。    2. onselect    文本被选中。7. 表单事件：    1. onsubmit    确认按钮被点击。    2. onreset    重置按钮被点击。</code></pre><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ol><li>直接在html标签上，指定事件的属性(操作)，属性值就是js代码</li><li>通过js获取元素对象，指定事件属性，设置一个函数</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;B-S架构详解&quot;&gt;&lt;a href=&quot;#B-S架构详解&quot; class=&quot;headerlink&quot; title=&quot;B/S架构详解&quot;&gt;&lt;/a&gt;B/S架构详解&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardw
      
    
    </summary>
    
      <category term="heima57" scheme="http://yoursite.com/categories/heima57/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法</title>
    <link href="http://yoursite.com/2019/10/02/%E5%B7%A5%E5%85%B7/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    <id>http://yoursite.com/2019/10/02/工具/数据结构和算法之美/</id>
    <published>2019-10-01T21:20:26.000Z</published>
    <updated>2020-02-18T01:58:53.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提须知"><a href="#前提须知" class="headerlink" title="前提须知"></a>前提须知</h3><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>写出性能更高的程序</li><li>更快更深的掌握一门技术</li><li>数据结构+算法=程序</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li><p>定义<br> 数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p></li><li><p>链表适合插入、删除，时间复杂度O(1)；数组支持随机访问，根据下标随机访问的时间复杂度为O(1)</p></li><li><p>警惕数组的访问越界问题</p></li><li><p>我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p></li><li><p>如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第k个位置，为了避免大规模的数据搬移，直接将第k位的数据搬移到数组元素的最后，把新的元素直接放入第k个位置。</p></li><li><p>容器可否完全替代数组</p><ul><li>.Java ArrayList无法存储基本类型，比如int、long，需要封装为Integer、Long类，而Autoboxing、Unboxing则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</li><li>如果数据大小事先已知，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以直接使用数组。</li><li>.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如Object[][] array；而用容器的话则需要这样定义：ArrayList&lt;ArrayList &gt; array。</li><li>总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</li></ul></li><li><p>数组下标为何从零开始<br> 从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]就表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要用这个公式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[k]_address = base_address + k * type_size</span><br></pre></td></tr></table></figure></li></ol><pre><code>但是，如果数组从1开始计数，那我们计算数组元素a[k]的内存地址就会变为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[k]_address = base_address + (k-1)*type_size</span><br></pre></td></tr></table></figure>对比两个公式，我们不难发现，从1开始编号，每次随机访问数组元素都多了一次减法运算，对于CPU来说，就是多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从0开始编号，而不是从1开始。不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非0开始不可。所以我觉得最主要的原因可能是历史原因。</code></pre><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li>常见的缓存淘汰策略有三种：先进先出策略FIFO（First In，First Out）、最少使用策略LFU（Least Frequently Used）、最近最少使用策略LRU（Least Recently Used）。</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前提须知&quot;&gt;&lt;a href=&quot;#前提须知&quot; class=&quot;headerlink&quot; title=&quot;前提须知&quot;&gt;&lt;/a&gt;前提须知&lt;/h3&gt;&lt;h4 id=&quot;用处&quot;&gt;&lt;a href=&quot;#用处&quot; class=&quot;headerlink&quot; title=&quot;用处&quot;&gt;&lt;/a&gt;用处&lt;/h
      
    
    </summary>
    
      <category term="极客时间" scheme="http://yoursite.com/categories/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
