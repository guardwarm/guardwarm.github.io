<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guard warm</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-10T09:46:39.019Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>grandwarm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python例题</title>
    <link href="http://yoursite.com/2020/02/10/python%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/10/python例题/</id>
    <published>2020-02-10T09:46:38.000Z</published>
    <updated>2020-02-10T09:46:39.019Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://yoursite.com/2020/02/01/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/01/python基础/</id>
    <published>2020-02-01T12:07:42.000Z</published>
    <updated>2020-02-10T05:57:09.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><h4 id="计算机基本组件"><a href="#计算机基本组件" class="headerlink" title="计算机基本组件"></a>计算机基本组件</h4><h5 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h5><p>计算机的运算和计算中心</p><p>人类一秒，可以运行10亿条指令，比内存快百度，硬盘快百万倍</p><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>暂时存储数据，临时加载数据应用程序，分为RAM，ROM</p><h5 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h5><p>长期存储数据</p><h5 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h5><p>一个软件，连接计算机的硬件与所有软件之间的一个软件</p><h4 id="python历史"><a href="#python历史" class="headerlink" title="python历史"></a>python历史</h4><p>python崇尚优雅，简洁</p><p>2和3有较多区别</p><h4 id="python的种类"><a href="#python的种类" class="headerlink" title="python的种类"></a>python的种类</h4><ul><li>Cpython：官方推荐解释器。可以转化成C语言能识别的字节码。</li><li>Jpython: 可以转化成Java语言能识别的字节码。</li><li>Ironpython：可以转化成.net语言能识别的字节码</li><li>pypy: 动态编译</li></ul><a id="more"></a><h4 id="编程语言分类"><a href="#编程语言分类" class="headerlink" title="编程语言分类"></a>编程语言分类</h4><h5 id="编译型"><a href="#编译型" class="headerlink" title="编译型"></a>编译型</h5><p>​        将代码一次性全部编译成二进制，然后再执行。</p><p>​        优点：执行效率高。</p><p>​        缺点：开发效率低，不能跨平台。</p><p>​        代表语言：C</p><h5 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h5><p>​        逐行解释成二进制，逐行运行。</p><p>​        优点：开发效率高，可以跨平台。</p><p>​        缺点：执行效率低。</p><p>​        代表语言：python</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>相当于为对应内存空间起别名，不同类型变量为不同大小内存块或有不同作用</p><h5 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h5><ul><li>变量全部由数字，字母下划线任意组合。</li><li>不能以数字开头。 </li><li>不能是python的关键字。<ul><li>[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li></ul></li><li>要具有描述性。name= ‘太白金星’ sex</li><li>不能使用中文。</li><li>不能过长。</li><li>推荐<ul><li>驼峰体：AgeOfOldboy = 73</li><li>下划线：age_of_oldboy = 73</li></ul></li></ul><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>代指生活中一直不变的</p><p>python中<strong>没有真正的常量</strong>，为了应和其他语言的口味，全部大写的变量称之为常量。所以是一种约定俗成的东西，没有实际约束。<strong>将变量名全部大写，放在文件的最上面</strong></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>便于你理解对方的代码，自己的代码。</p><ul><li>单行注释： # </li><li>多行注释： ‘’’被注释内容’’’  “””被注释内容”””</li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><h5 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h5><p>以下假设变量：a=10，b=20</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208181809.png" alt></p><p> <strong>/ 是除法，例如：2/3 = 0.6666。而//是表示向下取整的除法，例如3//2=1，6.0//4 = 1。也就是说 / 返回的是浮点类型的结果， 而 // 返回的是整数结果(可以理解为/的整数部分)</strong></p><h5 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h5><p>以下假设变量：a=10，b=20</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208181841.png" alt></p><h5 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h5><p>以下假设变量：a=10，b=20</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208181910.png" alt></p><h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183226.png" alt></p><p><strong>断路与或</strong></p><p>x or y , x为真，值就是x，x为假，值是y</p><p>x and y, x为真，值是y,x为假，值是x。</p><h5 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h5><p>判断子元素是否在原字符串（字典，列表，集合）中</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183245.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'喜欢'</span> <span class="keyword">in</span> <span class="string">'dkfljadklf喜欢hfjdkas'</span>)</span><br><span class="line">print(<span class="string">'a'</span> <span class="keyword">in</span> <span class="string">'bcvd'</span>)</span><br><span class="line">print(<span class="string">'y'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'ofkjdslaf'</span>)</span><br></pre></td></tr></table></figure><h5 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">max = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="comment"># 两者等价</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">max = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = b</span><br></pre></td></tr></table></figure><h5 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h5><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += <em>= *</em>=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h4 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h4><p>Python pass 是空语句，是为了保持程序结构的完整性。</p><p><strong>pass</strong> 不做任何事情，一般用做占位语句。</p><h4 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h4><p>返回输入对象的内存地址</p><h4 id="is和"><a href="#is和" class="headerlink" title="is和=="></a>is和==</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">is</span> b<span class="comment"># 比较内存地址</span></span><br><span class="line">a == b<span class="comment"># 比较值</span></span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>不可变（可哈希）的数据类型：int，str，bool，tuple。</p><p>可变（不可哈希）的数据类型：list，dict，set。</p></li></ul><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><p>不同进制间转化</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>bit_length(self)</td><td>转为对应二进制后有效位的长度</td></tr></tbody></table><h4 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h4><p>常用于条件</p><p>while 1：比while True：更高效</p><h4 id="str"><a href="#str" class="headerlink" title="str"></a>str</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由单(双)引号引起</span></span><br><span class="line"><span class="comment"># 三引号：带换行的字符串</span></span><br><span class="line"> msg = <span class="string">'''</span></span><br><span class="line"><span class="string"> 今天我想写首小诗，</span></span><br><span class="line"><span class="string"> 歌颂我的同桌，</span></span><br><span class="line"><span class="string"> 你看他那乌黑的短发，</span></span><br><span class="line"><span class="string"> 好像一只炸毛鸡。</span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure><h5 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h5><ul><li>法一</li></ul><table><thead><tr><th align="center">符号</th><th align="center">指代</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">str</td></tr><tr><td align="center">%d</td><td align="center">digit</td></tr><tr><td align="center">%i</td><td align="center">int</td></tr><tr><td align="center">%r</td><td align="center">输出时对应字符串带引号</td></tr><tr><td align="center">%%</td><td align="center">普通%号</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"Name:"</span>)</span><br><span class="line">age = input(<span class="string">"Age:"</span>)</span><br><span class="line">job = input(<span class="string">"Job:"</span>)</span><br><span class="line">hobbie = input(<span class="string">"Hobbie:"</span>)</span><br><span class="line"></span><br><span class="line">info = <span class="string">'''</span></span><br><span class="line"><span class="string">------------ info of %s ----------- #这里的每个%s就是一个占位符，本行的代表 后面拓号里的 name </span></span><br><span class="line"><span class="string">Name  : %s  #代表 name </span></span><br><span class="line"><span class="string">Age   : %s  #代表 age  </span></span><br><span class="line"><span class="string">job   : %s  #代表 job </span></span><br><span class="line"><span class="string">Hobbie: %s  #代表 hobbie </span></span><br><span class="line"><span class="string">------------- end -----------------</span></span><br><span class="line"><span class="string">'''</span> %(name,name,age,job,hobbie)  <span class="comment"># 这行的 % 号就是 把前面的字符串 与拓号 后面的 变量 关联起来 </span></span><br><span class="line"><span class="comment"># %%来输出普通百分号</span></span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><ul><li>法二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res=<span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(<span class="string">'egon'</span>,<span class="number">18</span>,<span class="string">'male'</span>)</span><br><span class="line">res=<span class="string">'&#123;1&#125; &#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'egon'</span>,<span class="number">18</span>,<span class="string">'male'</span>)</span><br><span class="line">res=<span class="string">'&#123;name&#125; &#123;age&#125; &#123;sex&#125;'</span>.format(sex=<span class="string">'male'</span>,name=<span class="string">'egon'</span>,age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure><ul><li><p>法三</p><p>f-strings 是python3.6开始加入标准库的格式化输出新的写法，这个格式化输出比之前的%s 或者 format 效率高并且更加简化，非常的好用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任意表达式</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;<span class="number">3</span>*<span class="number">21</span>&#125;</span>'</span>)  <span class="comment"># 63</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">'barry'</span></span><br><span class="line">print(<span class="string">f"全部大写：<span class="subst">&#123;name.upper()&#125;</span>"</span>)  <span class="comment"># 全部大写：BARRY</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典也可以</span></span><br><span class="line">teacher = &#123;<span class="string">'name'</span>: <span class="string">'太白金星'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">msg = <span class="string">f"The teacher is <span class="subst">&#123;teacher[<span class="string">'name'</span>]&#125;</span>, aged <span class="subst">&#123;teacher[<span class="string">'age'</span>]&#125;</span>"</span></span><br><span class="line">print(msg)  <span class="comment"># The comedian is 太白金星, aged 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表也行</span></span><br><span class="line">l1 = [<span class="string">'太白金星'</span>, <span class="number">18</span>]</span><br><span class="line">msg = <span class="string">f'姓名：<span class="subst">&#123;l1[<span class="number">0</span>]&#125;</span>,年龄：<span class="subst">&#123;l1[<span class="number">1</span>]&#125;</span>.'</span></span><br><span class="line">print(msg)  <span class="comment"># 姓名：太白金星,年龄：18.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用函数完成相应的功能，然后将返回值返回到字符串相应的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_a_b</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(<span class="string">'求和的结果为'</span> + <span class="string">f'<span class="subst">&#123;sum_a_b(a,b)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行</span></span><br><span class="line">name = <span class="string">'barry'</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">ajd = <span class="string">'handsome'</span></span><br><span class="line"></span><br><span class="line">speaker = <span class="string">f'''Hi <span class="subst">&#123;name&#125;</span>.</span></span><br><span class="line"><span class="string">You are <span class="subst">&#123;age&#125;</span> years old.</span></span><br><span class="line"><span class="string">You are a <span class="subst">&#123;ajd&#125;</span> guy!'''</span></span><br><span class="line"></span><br><span class="line">speaker = <span class="string">f'Hi <span class="subst">&#123;name&#125;</span>.'</span>\</span><br><span class="line">          <span class="string">f'You are <span class="subst">&#123;age&#125;</span> years old.'</span>\</span><br><span class="line">          <span class="string">f'You are a <span class="subst">&#123;ajd&#125;</span> guy!'</span></span><br><span class="line">print(speaker)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些细节</span></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;&#123;<span class="number">73</span>&#125;</span>&#125;"</span>)  <span class="comment"># &#123;73&#125;</span></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;&#123;&#123;<span class="number">73</span>&#125;</span>&#125;&#125;"</span>)  <span class="comment"># &#123;73&#125;</span></span><br><span class="line">print(<span class="string">f"<span class="subst">&#123;&#123;&#123;&#123;<span class="number">73</span>&#125;</span>&#125;&#125;&#125;"</span>)  <span class="comment"># &#123;&#123;73&#125;&#125;</span></span><br><span class="line">m = <span class="number">21</span></span><br><span class="line"><span class="comment"># ! , : &#123; &#125; ;这些标点不能出现在&#123;&#125; 这里面。</span></span><br><span class="line"><span class="comment"># print(f'&#123;;12&#125;')  # 报错</span></span><br><span class="line"><span class="comment"># 所以使用lambda 表达式会出现一些问题。</span></span><br><span class="line"><span class="comment"># 解决方式：可将lambda嵌套在圆括号里面解决此问题。</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;(<span class="keyword">lambda</span> x: x*<span class="number">2</span>) (x)&#125;</span>'</span>)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>按下标取值，从零开始</p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>通过索引（索引：索引：步长）截取字符串的一段，形成新的字符串</p><p><strong>左闭右开</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABCDEFGHIJK'</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># print(a[:3]) 从开头开始取0可以默认不写</span></span><br><span class="line">print(a[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">print(a[:]) <span class="comment">#默认到最后</span></span><br><span class="line">print(a[:<span class="number">-1</span>]) <span class="comment"># -1 是列表中最后一个元素的索引，但是要满足顾头不顾腚的原则，所以取不到K元素</span></span><br><span class="line">print(a[:<span class="number">5</span>:<span class="number">2</span>]) <span class="comment">#加步长</span></span><br><span class="line">print(a[<span class="number">-1</span>:<span class="number">-5</span>:<span class="number">-2</span>]) <span class="comment">#反向加步长</span></span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>upper(self)</td><td>转为大写</td></tr><tr><td>lower(self)</td><td>转为小写</td></tr><tr><td>count(str,i,j)</td><td>从i到j的切片中str出现了几次</td></tr><tr><td>startswith(str,i,j)</td><td>从i到j，是不是str，不写i，j时从头匹配</td></tr><tr><td>endswith(str,i,j)</td><td>从i到j，是不是str，不写i，j时从尾匹配</td></tr><tr><td>replace(str,i)</td><td>默认全部替换，i可以指定替换个数</td></tr><tr><td>strip()</td><td>去除空拍字符(\t,\n,空格)，从左右两边开始删到都一个非空白为止</td></tr><tr><td>lstrip()</td><td>删左侧</td></tr><tr><td>rstrip()</td><td>删右侧</td></tr><tr><td>strip(str)</td><td>去除在str中的字符</td></tr><tr><td>isalnum()</td><td>字符串由字母或数字组成</td></tr><tr><td>isalpha()</td><td>字符串只由字母组成</td></tr><tr><td>isdecimal()</td><td>字符串只由十进制组成</td></tr></tbody></table><p>len(str)    获取数据的元素个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split 以什么分割，最终形成一个列表此列表不含有这个分割的元素。</span></span><br><span class="line">ret9 = <span class="string">'title,Tilte,atre,'</span>.split(<span class="string">'t'</span>)</span><br><span class="line">print(ret9)</span><br><span class="line">ret91 = <span class="string">'title,Tilte,atre,'</span>.rsplit(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">print(ret91)</span><br><span class="line"></span><br><span class="line"><span class="comment"># join与split相对，若是str则以每个元素都以指定字符连接，多是给链表使用</span></span><br><span class="line">s1 = <span class="string">"advewvbe"</span></span><br><span class="line">s2 = <span class="string">"+"</span>.join(s1)</span><br><span class="line"><span class="comment">#  a+d+v+e+w+v+b+e</span></span><br><span class="line">l1 = [<span class="string">"2"</span>,<span class="string">"chjs"</span>,<span class="string">"你好"</span>]</span><br><span class="line">l2 = <span class="string">":"</span>.join(l1)</span><br><span class="line"><span class="comment">#  2:chjs:你好</span></span><br><span class="line"><span class="comment">#  列表中元素必须全是字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#寻找字符串中的元素是否存在</span></span><br><span class="line">ret6 = a4.find(<span class="string">"fjdk"</span>,<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">print(ret6)  <span class="comment"># 返回的找到的元素的索引，如果找不到返回-1</span></span><br><span class="line"></span><br><span class="line">ret61 = a4.index(<span class="string">"fjdk"</span>,<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">print(ret61) <span class="comment"># 返回的找到的元素的索引，找不到报错。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#captalize,swapcase,title</span></span><br><span class="line">print(name.capitalize()) <span class="comment">#首字母大写</span></span><br><span class="line">print(name.swapcase()) <span class="comment">#大小写翻转</span></span><br><span class="line">msg=<span class="string">'taibai say hi'</span></span><br><span class="line">print(msg.title()) <span class="comment">#每个单词的首字母大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内同居中，总长度，空白处填充</span></span><br><span class="line">ret2 = a1.center(<span class="number">20</span>,<span class="string">"*"</span>)</span><br><span class="line">print(ret2)</span><br></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>l1 = [100, ‘alex’,True,[1, 2, 3]] </p><ul><li>承载任意数据类型，存储大量的数据</li><li>python常用的容器型数据类型。相当于其他语言的数组</li><li>列表是有序的，可索引，切片（步长）</li></ul><h5 id="切片，索引"><a href="#切片，索引" class="headerlink" title="切片，索引"></a>切片，索引</h5><p>同str</p><h5 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表的创建</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="comment"># l1 = [1, 2, 'Alex']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二  对可迭代的数据类型</span></span><br><span class="line"><span class="comment"># l1 = list()</span></span><br><span class="line"><span class="comment"># l1 = list('fhdsjkafsdafhsdfhsdaf')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"><span class="comment"># ['f', 'h', 'd', 's', 'j', 'k', 'h', 's', 'd', 'a', 'f']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三：列表推导式</span></span><br><span class="line"><span class="comment"># [i(对i的简单处理) 循环(可多层，但一般最多两到三层) 条件]</span></span><br><span class="line"><span class="comment"># 循环模式[变量(加工的变量) for 变量 in iterable]</span></span><br><span class="line"><span class="comment"># 多层循环[变量(加工的变量) for i in iterable for j in iterable]</span></span><br><span class="line">l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">print(l1)  <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">l2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>)] + list(<span class="string">"JQKA"</span>)<span class="comment">#扑克(不完整)</span></span><br><span class="line"><span class="comment"># 筛选模式[变量(加工的变量) for 变量 in iterable if 条件]</span></span><br></pre></td></tr></table></figure><h5 id="列表的增删改查"><a href="#列表的增删改查" class="headerlink" title="列表的增删改查"></a>列表的增删改查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增删改查</span></span><br><span class="line">l1 = [<span class="string">'太白'</span>, <span class="string">'女神'</span>, <span class="string">'xiao'</span>,<span class="string">'吴老师'</span>, <span class="string">'闫龙'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：</span></span><br><span class="line"><span class="comment"># append:追加</span></span><br><span class="line"><span class="comment"># l1.append('xx')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># insert 插入</span></span><br><span class="line"><span class="comment"># l1.insert(2,'wusir')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#extend 迭代着追加</span></span><br><span class="line"><span class="comment"># l1.extend('abcd')</span></span><br><span class="line"><span class="comment"># l1.extend(['alex',])</span></span><br><span class="line"><span class="comment"># l1.extend(['alex', 1, 3])</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># pop 按照索引位置删除，返回的是删除的元素</span></span><br><span class="line"><span class="comment"># l1.pop(-2)  # 按照索引删除</span></span><br><span class="line"><span class="comment"># print(l1.pop(-2))</span></span><br><span class="line"><span class="comment"># l1.pop()  # 默认删除最后一个</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove  指定元素删除,如果有重名元素，默认删除从左数第一个</span></span><br><span class="line"><span class="comment"># l1.remove('xiao')</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear(了解)</span></span><br><span class="line"><span class="comment"># l1.clear() # 清空</span></span><br><span class="line"><span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line">    <span class="comment"># 按照索引删除</span></span><br><span class="line">    <span class="comment"># del l1[-1]</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line">    <span class="comment"># 按照切片(步长)删除</span></span><br><span class="line">    <span class="comment"># del l1[::2]</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">    <span class="comment"># 按照索引改值</span></span><br><span class="line">    <span class="comment"># l1[0] = '男神'</span></span><br><span class="line">    <span class="comment"># 按照切片改（了解）整个切片替换</span></span><br><span class="line">    <span class="comment"># l1[2:] = 'fsdafsdafsdfdsfsadfdsfdsgsfdag'</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line">    <span class="comment"># 按照切片（步长）逐个替换，对应个数必须相同</span></span><br><span class="line">    <span class="comment"># l1[::2] = 'abc'</span></span><br><span class="line">    <span class="comment"># l1[::2] = 'abcd'</span></span><br><span class="line">    <span class="comment"># print(l1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：</span></span><br><span class="line"><span class="comment"># 索引，切片（步长）</span></span><br><span class="line"><span class="comment"># for i in l1:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br></pre></td></tr></table></figure><h5 id="列表相加或相乘"><a href="#列表相加或相乘" class="headerlink" title="列表相加或相乘"></a>列表相加或相乘</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># print(l1+l2)  # [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">print(l1*<span class="number">3</span>)  <span class="comment"># [1, 2, 3, 1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><p>count（数）（方法统计某个元素在列表中出现的次数）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"q"</span>,<span class="string">"w"</span>,<span class="string">"q"</span>,<span class="string">"r"</span>,<span class="string">"t"</span>,<span class="string">"y"</span>]</span><br><span class="line">print(a.count(<span class="string">"q"</span>))</span><br></pre></td></tr></table></figure><p>index（方法用于从列表中找出某个值第一个匹配项的索引位置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"q"</span>,<span class="string">"w"</span>,<span class="string">"r"</span>,<span class="string">"t"</span>,<span class="string">"y"</span>]</span><br><span class="line">print(a.index(<span class="string">"r"</span>))</span><br></pre></td></tr></table></figure><p>sort （方法用于在原位置对列表进行排序）</p><p> reverse （方法将列表中的元素反向存放）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.sort()<span class="comment"># 他没有返回值，所以只能打印a</span></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)<span class="comment"># 默认单增，这样可以单减</span></span><br><span class="line">print(a)</span><br><span class="line">a.reverse()<span class="comment">#他也没有返回值，所以只能打印a</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a>列表的嵌套</h5><p>相当于多维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'taibai'</span>, [<span class="number">1</span>, <span class="string">'alex'</span>, <span class="number">3</span>,]]</span><br><span class="line"><span class="comment"># 1, 将l1中的'taibai'变成大写并放回原处。</span></span><br><span class="line"><span class="comment"># 2，给小列表[1,'alex',3,]追加一个元素,'老男孩教育'。</span></span><br><span class="line">l1[<span class="number">3</span>] = l1[<span class="number">3</span>].append(<span class="string">"老男孩教育"</span>)</span><br><span class="line"><span class="comment"># 3，将列表中的'alex'通过字符串拼接的方式在列表中变成'alexsb'</span></span><br></pre></td></tr></table></figure><h5 id="循环列表，改变列表大小的问题"><a href="#循环列表，改变列表大小的问题" class="headerlink" title="循环列表，改变列表大小的问题"></a>循环列表，改变列表大小的问题</h5><p>用这个进行举例：当你循环到22时，你将列表中的22删除了，但是你带来的影响是：33,44,55都会往前进一位，他们的索引由原来的2,3,4变成了1,2,3 所以你在往下进行循环时，就会发现，额……..完全不对了</p><p>所以for循环遍历本质是在<strong>按索引遍历</strong>，正序遍历时删除元素会打乱原有顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> len(l1):</span><br><span class="line">    <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        l1.pop(index)</span><br><span class="line"><span class="comment"># [11,33,44]</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208200213.png" alt></p><ul><li>直接删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">del</span> l1[<span class="number">1</span>::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>倒序删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l1)<span class="number">-1</span>:<span class="number">-1</span>:<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">l1.pop(i)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208201450.png" alt></p><ul><li>思维转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">new_l1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> len(l1):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        new_l1.append(i)</span><br><span class="line">l1 = new_l1</span><br></pre></td></tr></table></figure><p>循环一个列表时<strong>最好不要改变</strong>列表的大小，容易出现错误</p><p>必须修改时可以用<strong>上诉三种方法</strong></p><h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><p>俗称不可变的列表,又被成为只读列表,也是python的基本数据类型之一,用小括号括起来,里面可以放任何数据类型的数据,查询可以,循环也可以,切片也可以.但就是不能改.</p><p>当元组中包含可变类型时，其仍可变，如包含链表时，该链表仍可修改</p><p>python中元组有一个特性，元组中如果只含有一个元素且没有逗号，则该元组不是元组，与改元素数据类型一致，如果有逗号，那么它是元组</p><p><strong>拆包专用</strong>，虽然链表也可以拆</p><h5 id="拆包-分别赋值"><a href="#拆包-分别赋值" class="headerlink" title="拆包(分别赋值)"></a>拆包(分别赋值)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">a,b = (<span class="string">'你好'</span>,<span class="string">'世界'</span>)  <span class="comment"># 这个用专业名词就叫做元组的拆包</span></span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line">你好 世界</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a,b = [<span class="string">'你好'</span>,<span class="string">'大飞哥'</span>]</span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line">你好 世界</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a,b = &#123;<span class="string">'汪峰'</span>:<span class="string">'北京北京'</span>,<span class="string">'王菲'</span>:<span class="string">'天后'</span>&#125;</span><br><span class="line">print(a,b)</span><br><span class="line">结果:</span><br><span class="line">汪峰 王菲</span><br></pre></td></tr></table></figure><h5 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tu1 = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'太白'</span>, <span class="number">3</span>, <span class="number">666</span>)</span><br><span class="line">print(tu1[<span class="number">0</span>])  <span class="comment"># 'a'</span></span><br><span class="line">print(tu1[<span class="number">-1</span>])  <span class="comment"># 666</span></span><br><span class="line">print(tu1[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># ('b', '太白')</span></span><br><span class="line">print(tu1[:<span class="number">-1</span>])  <span class="comment"># ('a', 'b', '太白', 3)</span></span><br><span class="line">print(tu1[::<span class="number">2</span>])  <span class="comment"># ('a', '太白', 666)</span></span><br><span class="line">print(tu1[::<span class="number">-1</span>])  <span class="comment"># (666, 3, '太白', 'b', 'a')</span></span><br></pre></td></tr></table></figure><h5 id="其他操作-1"><a href="#其他操作-1" class="headerlink" title="其他操作"></a>其他操作</h5><p>因为元组的特性，直接从属于元组的元素不能更改，所以元组只能查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以利用for循环查询</span></span><br><span class="line"></span><br><span class="line">tu1 = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'太白'</span>, <span class="number">3</span>, <span class="number">666</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tu1:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>index</strong>：通过元素找索引（可切片），找到第一个元素就返回，找不到该元素即报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="string">'太白'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ], <span class="string">'WuSir'</span>, <span class="string">'女神'</span>)</span><br><span class="line">print(tu.index(<span class="string">'太白'</span>)) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p><strong>count</strong>: 获取某元素在列表中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="string">'太白'</span>, <span class="string">'太白'</span>, <span class="string">'WuSir'</span>, <span class="string">'吴超'</span>)</span><br><span class="line">print(tu.count(<span class="string">'太白'</span>)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h4><p>字典是Python语言中的映射类型，他是以{}括起来，里面的内容是以键值对的形式储存的：</p><p> Key: 不可变（可哈希）的数据类型.并且键是唯一的，不重复的。</p><p> Value:任意数据(int，str，bool，tuple，list，dict，set)，包括后面要学的实例对象等。</p><p>在Python3.5版本（包括此版本）之前，字典是无序的。</p><p>在Python3.6版本之后，字典会按照初建字典时的顺序排列(即第一次插入数据的顺序排序)。</p><p>当然，字典也有缺点：他的缺点就是内存消耗巨大。</p><h5 id="为何查询快？"><a href="#为何查询快？" class="headerlink" title="为何查询快？"></a>为何查询快？</h5><p>底层用了散列表</p><p><img src="http://crm.pythonav.com/media/uploads/2019/03/28/IMAGE.PNG" alt></p><h5 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1:元组</span></span><br><span class="line">dic = dict(((<span class="string">'one'</span>, <span class="number">1</span>),(<span class="string">'two'</span>, <span class="number">2</span>),(<span class="string">'three'</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="comment"># dic = dict([('one', 1),('two', 2),('three', 3)])</span></span><br><span class="line">print(dic)  <span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:关键字</span></span><br><span class="line">dic = dict(one=<span class="number">1</span>,two=<span class="number">2</span>,three=<span class="number">3</span>)</span><br><span class="line">print(dic)  <span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式3:键值对</span></span><br><span class="line">dic = dict(&#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;)</span><br><span class="line">print(dic)  <span class="comment"># &#123;'one': 1, 'two': 2, 'three': 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式5:内置函数zip</span></span><br><span class="line">dic = dict(zip([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式6:字典推导式</span></span><br><span class="line">dic = &#123; k: v <span class="keyword">for</span> k,v <span class="keyword">in</span> [(<span class="string">'one'</span>, <span class="number">1</span>),(<span class="string">'two'</span>, <span class="number">2</span>),(<span class="string">'three'</span>, <span class="number">3</span>)]&#125;</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式7:利用fromkey("keys(可迭代类型)","所有键共用的值")</span></span><br><span class="line">dic = dict.fromkeys(<span class="string">'abcd'</span>,<span class="string">'太白'</span>)</span><br><span class="line">print(dic) <span class="comment"># &#123;'a': '太白', 'b': '太白', 'c': '太白', 'd': '太白'&#125;</span></span><br><span class="line"></span><br><span class="line">dic = dict.fromkeys([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],<span class="string">'太白'</span>)</span><br><span class="line">print(dic) <span class="comment"># &#123;1: '太白', 2: '太白', 3: '太白'&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里有一个坑，就是如果通过fromkeys得到的字典的值为可变的数据类型，那么你的小心了。</span></span><br><span class="line">dic = dict.fromkeys([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [])</span><br><span class="line">dic[<span class="number">1</span>].append(<span class="number">666</span>)</span><br><span class="line">print(id(dic[<span class="number">1</span>]),id(dic[<span class="number">2</span>]),id(dic[<span class="number">3</span>]))  <span class="comment"># &#123;1: [666], 2: [666], 3: [666]&#125;</span></span><br><span class="line">print(dic)  <span class="comment"># &#123;1: [666], 2: [666], 3: [666]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">lst1 = [<span class="string">'jay'</span>,<span class="string">'jj'</span>,<span class="string">'meet'</span>]</span><br><span class="line">lst2 = [<span class="string">'周杰伦'</span>,<span class="string">'林俊杰'</span>,<span class="string">'郭宝元'</span>]</span><br><span class="line">dic = &#123;lst1[i]:lst2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst1))&#125;</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># 通过键值对直接增加  有则改之，无则增加</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic[<span class="string">'weight'</span>] = <span class="number">75</span> <span class="comment"># 没有weight这个键，就增加键值对</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'weight': 75&#125;</span></span><br><span class="line">    dic[<span class="string">'name'</span>] = <span class="string">'barry'</span> <span class="comment"># 有name这个键，就成了字典的改值</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': 'barry', 'age': 18, 'weight': 75&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setdefault有则不变，无则加之</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic.setdefault(<span class="string">'height'</span>,<span class="number">175</span>) <span class="comment"># 没有height此键，则添加</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'height': 175&#125;</span></span><br><span class="line">    dic.setdefault(<span class="string">'name'</span>,<span class="string">'barry'</span>) <span class="comment"># 有此键则不变</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'height': 175&#125;</span></span><br><span class="line">    <span class="comment">#它有返回值可用于查看</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    ret = dic.setdefault(<span class="string">'name'</span>)</span><br><span class="line">    print(ret)  <span class="comment"># 太白</span></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># pop 通过key删除字典的键值对，有返回值，可设置返回值。</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    <span class="comment"># ret = dic.pop('name')</span></span><br><span class="line">    <span class="comment"># print(ret,dic) # 太白 &#123;'age': 18&#125;</span></span><br><span class="line">    ret1 = dic.pop(<span class="string">'n'</span>,<span class="literal">None</span>)</span><br><span class="line">    print(ret1,dic) <span class="comment"># None &#123;'name': '太白', 'age': 18&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#popitem 3.5版本之前，popitem为随机删除，3.6之后为删除最后一个，有返回值</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    ret = dic.popitem()</span><br><span class="line">    print(ret,dic) <span class="comment"># ('age', 18) &#123;'name': '太白'&#125;</span></span><br><span class="line"><span class="comment"># 值可以重复，所以不像其他有remove方法</span></span><br><span class="line">    <span class="comment"># clear 清空字典</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic.clear()</span><br><span class="line">    print(dic) <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># del</span></span><br><span class="line">    <span class="comment"># 通过键删除键值对</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    <span class="keyword">del</span> dic[<span class="string">'name'</span>]</span><br><span class="line">    print(dic) <span class="comment"># &#123;'age': 18&#125;</span></span><br><span class="line">    <span class="comment">#删除整个字典</span></span><br><span class="line">    <span class="keyword">del</span> dic</span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">    <span class="comment"># 通过键值对直接改</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic[<span class="string">'name'</span>] = <span class="string">'barry'</span></span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': 'barry', 'age': 18&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># update类似于创建字典</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    </span><br><span class="line">    dic.update(sex=<span class="string">'男'</span>, height=<span class="number">175</span>)</span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 'sex': '男', 'height': 175&#125;</span></span><br><span class="line"></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    dic.update([(<span class="number">1</span>, <span class="string">'a'</span>),(<span class="number">2</span>, <span class="string">'b'</span>),(<span class="number">3</span>, <span class="string">'c'</span>),(<span class="number">4</span>, <span class="string">'d'</span>)])</span><br><span class="line">    print(dic) <span class="comment"># &#123;'name': '太白', 'age': 18, 1: 'a', 2: 'b', 3: 'c', 4: 'd'&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 有则加之，无则不变</span></span><br><span class="line">    dic1 = &#123;<span class="string">"name"</span>:<span class="string">"jin"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">    dic2 = &#123;<span class="string">"name"</span>:<span class="string">"alex"</span>,<span class="string">"weight"</span>:<span class="number">75</span>&#125;</span><br><span class="line">    dic1.update(dic2)</span><br><span class="line">    print(dic1) <span class="comment"># &#123;'name': 'alex', 'age': 18, 'sex': 'male', 'weight': 75&#125;</span></span><br><span class="line">    print(dic2) <span class="comment"># &#123;'name': 'alex', 'weight': 75&#125; </span></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">    <span class="comment"># 通过键查询</span></span><br><span class="line">    <span class="comment"># 直接dic[key](没有此键会报错)</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic[<span class="string">'name'</span>]) <span class="comment"># 太白</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get</span></span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    v = dic.get(<span class="string">'name'</span>)</span><br><span class="line">    print(v) <span class="comment"># '太白'</span></span><br><span class="line">    v = dic.get(<span class="string">'name1'</span>)</span><br><span class="line">    print(v) <span class="comment"># None</span></span><br><span class="line">    v = dic.get(<span class="string">'name2'</span>,<span class="string">'没有此键'</span>)</span><br><span class="line">    print(v) <span class="comment"># 没有此键 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    keys()</span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic.keys()) <span class="comment"># dict_keys(['name', 'age']) </span></span><br><span class="line"></span><br><span class="line">    values()</span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic.values()) <span class="comment"># dict_values(['太白', 18])</span></span><br><span class="line"></span><br><span class="line">    items()</span><br><span class="line">    dic = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    print(dic.items()) <span class="comment"># dict_items([('name', '太白'), ('age', 18)])</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    dict_keys(['name', 'age'])  dict_values(['太白', 18]) dict_items([('name', '太白'), ('age', 18)])</span></span><br><span class="line"><span class="string">    这些高仿的列表可以用于for循环，亦可传入list()来转换为真正的列表</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><h5 id="字典的嵌套"><a href="#字典的嵌套" class="headerlink" title="字典的嵌套"></a>字典的嵌套</h5><h5 id="循环字典，改变字典大小的问题"><a href="#循环字典，改变字典大小的问题" class="headerlink" title="循环字典，改变字典大小的问题"></a>循环字典，改变字典大小的问题</h5><p>来，先来研究一个小题，有如下字典：</p><p>dic = {‘k1’:’太白’,’k2’:’barry’,’k3’: ‘白白’, ‘age’: 18} 请将字典中所有键带k元素的键值对删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'太白'</span>,<span class="string">'k2'</span>:<span class="string">'barry'</span>,<span class="string">'k3'</span>: <span class="string">'白白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'k'</span> <span class="keyword">in</span> i:</span><br><span class="line">        <span class="keyword">del</span> dic[i]</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你会发现，报错了。。。。。</span></span><br><span class="line"><span class="comment"># 错误原因：</span></span><br><span class="line"><span class="comment"># RuntimeError: dictionary changed size during iteration</span></span><br><span class="line"><span class="comment"># 翻译过来是：字典在循环迭代时，改变了大小。</span></span><br></pre></td></tr></table></figure><p>所以说，他和列表差不多，只不过比列表更暴力一些，对其进行总结就是：</p><p>在循环一个字典的过程中，<strong>不要改变字典的大小</strong>（增，删字典的元素），这样会直接报错。</p><ul><li>思维转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 = []</span><br><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'太白'</span>,<span class="string">'k2'</span>:<span class="string">'barry'</span>,<span class="string">'k3'</span>: <span class="string">'白白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'k'</span> <span class="keyword">in</span> key:</span><br><span class="line">        l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">    dic.pop(i)</span><br></pre></td></tr></table></figure><ul><li>简化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'太白'</span>,<span class="string">'k2'</span>:<span class="string">'barry'</span>,<span class="string">'k3'</span>: <span class="string">'白白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> list(dic.keys()):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'k'</span> <span class="keyword">in</span> key:</span><br><span class="line">        dic.pop(key)</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>集合是无序的，不重复的数据集合</p><p>它里面的元素是可哈希的(不可变类型)，但是集合本身不可哈希（所以集合做不了字典的键）</p><p>以下是集合最重要的两点：</p><p>　　<strong>去重</strong>，把一个列表变成集合，就自动去重了。</p><p>　　<strong>关系测试</strong>，测试两组数据之前的交集、差集、并集等关系。</p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一</span></span><br><span class="line">set1 = set(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">'barry'</span>&#125;)</span><br><span class="line"><span class="comment"># 二</span></span><br><span class="line">set2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">'barry'</span>&#125;</span><br><span class="line">print(set1,set2)  <span class="comment"># &#123;1, 2, 'barry'&#125; &#123;1, 2, 'barry'&#125;</span></span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">-7</span>,<span class="number">9</span>]</span><br><span class="line">s = &#123;abs(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst&#125;</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h5 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 增</span></span><br><span class="line">    set1 = &#123;<span class="string">'alex'</span>,<span class="string">'wusir'</span>,<span class="string">'ritian'</span>,<span class="string">'egon'</span>,<span class="string">'barry'</span>&#125;</span><br><span class="line">    set1.add(<span class="string">'景女神'</span>)</span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#update：迭代着增加</span></span><br><span class="line">    set1.update(<span class="string">'A'</span>)</span><br><span class="line">    print(set1)</span><br><span class="line">    set1.update(<span class="string">'老师'</span>)</span><br><span class="line">    print(set1)</span><br><span class="line">    set1.update([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">    print(set1)</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">    set1 = &#123;<span class="string">'alex'</span>,<span class="string">'wusir'</span>,<span class="string">'ritian'</span>,<span class="string">'egon'</span>,<span class="string">'barry'</span>&#125;</span><br><span class="line"><span class="comment"># 因为无序，所以没有按所以删除</span></span><br><span class="line">    set1.remove(<span class="string">'alex'</span>)  <span class="comment"># 按内容删</span></span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    set1.pop()  <span class="comment"># 随机删除一个元素</span></span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    set1.clear()  <span class="comment"># 清空集合</span></span><br><span class="line">    print(set1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> set1  <span class="comment"># 删除集合</span></span><br><span class="line">    print(set1)</span><br><span class="line"><span class="comment"># 无序，所以无法改查</span></span><br><span class="line"><span class="comment"># 但改可以通过先把要改元素删除，再把要改成的数据作为新值加入</span></span><br></pre></td></tr></table></figure><h5 id="集合的其他操作"><a href="#集合的其他操作" class="headerlink" title="集合的其他操作"></a>集合的其他操作</h5><p>4.1 交集。（&amp; 或者 intersection）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 &amp; set2)  <span class="comment"># &#123;4, 5&#125;</span></span><br><span class="line">print(set1.intersection(set2))  <span class="comment"># &#123;4, 5&#125;</span></span><br></pre></td></tr></table></figure><p>　　4.2 并集。（| 或者 union）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 | set2)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7,8&#125;print(set2.union(set1))  # &#123;1, 2, 3, 4, 5, 6, 7,8&#125;</span></span><br></pre></td></tr></table></figure><p>　　4.3 差集。（- 或者 difference）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 - set2)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line">print(set1.difference(set2))  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><p> 　4.4反交集。 （^ 或者 symmetric_difference）        排斥或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">print(set1 ^ set2)  <span class="comment"># &#123;1, 2, 3, 6, 7, 8&#125;</span></span><br><span class="line">print(set1.symmetric_difference(set2))  <span class="comment"># &#123;1, 2, 3, 6, 7, 8&#125;</span></span><br></pre></td></tr></table></figure><p>　　4.5子集与超集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">print(set1 &lt; set2)</span><br><span class="line">print(set1.issubset(set2))  <span class="comment"># 这两个相同，都是说明set1是set2子集。</span></span><br><span class="line"></span><br><span class="line">print(set2 &gt; set1)</span><br><span class="line">print(set2.issuperset(set1))  <span class="comment"># 这两个相同，都是说明set2是set1超集。</span></span><br></pre></td></tr></table></figure><p>5，frozenset不可变集合，让集合变成不可变类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = frozenset(<span class="string">'barry'</span>)</span><br><span class="line">print(s,type(s))  <span class="comment"># frozenset(&#123;'a', 'y', 'b', 'r'&#125;) &lt;class 'frozenset'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据类型转化"><a href="#数据类型转化" class="headerlink" title="数据类型转化"></a>数据类型转化</h3><h4 id="bool，int，str互化"><a href="#bool，int，str互化" class="headerlink" title="bool，int，str互化"></a>bool，int，str互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int ---&gt; bool</span></span><br><span class="line">i = <span class="number">100</span></span><br><span class="line">print(bool(i))  <span class="comment"># True  # 非零即True</span></span><br><span class="line">i1 = <span class="number">0</span></span><br><span class="line">print(bool(i1))  <span class="comment"># False 零即False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool ---&gt; int</span></span><br><span class="line">t = <span class="literal">True</span></span><br><span class="line">print(int(t))  <span class="comment"># 1  True --&gt; 1</span></span><br><span class="line">t = <span class="literal">False</span></span><br><span class="line">print(int(t))  <span class="comment"># 0  False --&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int ---&gt; str</span></span><br><span class="line">i1 = <span class="number">100</span></span><br><span class="line">print(str(i1))  <span class="comment"># '100'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str ---&gt; int  # 全部由数字组成的字符串才可以转化成数字</span></span><br><span class="line">s1 = <span class="string">'90'</span></span><br><span class="line">print(int(s1))  <span class="comment"># 90</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str ---&gt; bool</span></span><br><span class="line">s1 = <span class="string">'太白'</span></span><br><span class="line">s2 = <span class="string">''</span></span><br><span class="line">print(bool(s1))  <span class="comment"># True 非空即True</span></span><br><span class="line">print(bool(s2))  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># bool ---&gt; str</span></span><br><span class="line">t1 = <span class="literal">True</span></span><br><span class="line">print(str(<span class="literal">True</span>))  <span class="comment"># 'True'</span></span><br></pre></td></tr></table></figure><h4 id="str，list互化"><a href="#str，list互化" class="headerlink" title="str，list互化"></a>str，list互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str ---&gt; list</span></span><br><span class="line">s1 = <span class="string">'alex 太白 武大'</span></span><br><span class="line">print(s1.split())  <span class="comment"># ['alex', '太白', '武大']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list ---&gt; str  # 前提 list 里面所有的元素必须是字符串类型才可以</span></span><br><span class="line">l1 = [<span class="string">'alex'</span>, <span class="string">'太白'</span>, <span class="string">'武大'</span>]</span><br><span class="line">print(<span class="string">' '</span>.join(l1))  <span class="comment"># 'alex 太白 武大'</span></span><br></pre></td></tr></table></figure><h4 id="list-set互化"><a href="#list-set互化" class="headerlink" title="list set互化"></a>list set互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list ---&gt; set</span></span><br><span class="line">s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(set(s1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set ---&gt; list</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>,&#125;</span><br><span class="line">print(list(set1))  <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="str，bytes互化"><a href="#str，bytes互化" class="headerlink" title="str，bytes互化"></a>str，bytes互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str ---&gt; bytes</span></span><br><span class="line">s1 = <span class="string">'太白'</span></span><br><span class="line">print(s1.encode(<span class="string">'utf-8'</span>))  <span class="comment"># b'\xe5\xa4\xaa\xe7\x99\xbd'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bytes ---&gt; str</span></span><br><span class="line">b = <span class="string">b'\xe5\xa4\xaa\xe7\x99\xbd'</span></span><br><span class="line">print(b.decode(<span class="string">'utf-8'</span>))  <span class="comment"># '太白'</span></span><br></pre></td></tr></table></figure><h4 id="所有皆可转为bool"><a href="#所有皆可转为bool" class="headerlink" title="所有皆可转为bool"></a>所有皆可转为bool</h4><p>转化成bool值为False的数据类型有：<br>‘’, 0, (), {}, [], set(), None</p><h3 id="基础数据类型总结"><a href="#基础数据类型总结" class="headerlink" title="基础数据类型总结"></a>基础数据类型总结</h3><p><a href="https://www.processon.com/view/link/5c99fe1fe4b0353e3c62e606#map" target="_blank" rel="noopener">思维导图</a></p><h4 id="按存储空间的占用分（从低到高）"><a href="#按存储空间的占用分（从低到高）" class="headerlink" title="按存储空间的占用分（从低到高）"></a>按存储空间的占用分（从低到高）</h4><p>数字<br>字符串<br>集合：无序，即无序存索引相关信息<br>元组：有序，需要存索引相关信息，不可变<br>列表：有序，需要存索引相关信息，可变，需要处理数据的增删改<br>字典：有序，需要存key与value映射的相关信息，可变，需要处理数据的增删改（3.6之后有序）</p><h4 id="按存值个数区分"><a href="#按存值个数区分" class="headerlink" title="按存值个数区分"></a>按存值个数区分</h4><table><thead><tr><th>标量／原子类型</th><th>数字，字符串</th></tr></thead><tbody><tr><td>容器类型</td><td>列表，元组，字典</td></tr></tbody></table><h4 id="按可变不可变区分"><a href="#按可变不可变区分" class="headerlink" title="按可变不可变区分"></a>按可变不可变区分</h4><table><thead><tr><th>可变</th><th>列表，字典</th></tr></thead><tbody><tr><td>不可变</td><td>数字，字符串，元组，布尔值</td></tr></tbody></table><h4 id="按访问顺序区分"><a href="#按访问顺序区分" class="headerlink" title="按访问顺序区分"></a>按访问顺序区分</h4><table><thead><tr><th>直接访问</th><th>数字</th></tr></thead><tbody><tr><td>顺序访问（序列类型）</td><td>字符串，列表，元组</td></tr><tr><td>key值访问（映射类型）</td><td>字典</td></tr></tbody></table><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>相当于生活中的一次次决策</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本结构</span></span><br><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    结果</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> int(age) &gt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'恭喜你，成年了'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'小屁孩儿'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 多个条件，python中无switch...case...    </span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'晚上请你吃饭'</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'一起溜达'</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'请你大宝剑'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'太笨了....'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># if可以嵌套</span></span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>用于重复执行的代码，一般没有明确次数用while，有确定次数用for</p><p>一般得在循环体内改变条件，或使用break，否则会出现死循环</p><p><img src="http://crm.pythonav.com/media/uploads/2019/03/27/IMAGE.PNG" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">在循环正常结束时执行</span><br><span class="line">若通过<span class="keyword">break</span>跳出则不执行</span><br></pre></td></tr></table></figure><p>continue：跳过本次条件</p><p>break：跳出循环</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>for…else   同while用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'老男孩python是全国范围内最好的python培训机构'</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> msg:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line">li = [<span class="string">'alex'</span>,<span class="string">'银角'</span>,<span class="string">'女神'</span>,<span class="string">'egon'</span>,<span class="string">'太白'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">'name'</span>:<span class="string">'太白'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'sex'</span>:<span class="string">'man'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure><h4 id="与循环配合的方法"><a href="#与循环配合的方法" class="headerlink" title="与循环配合的方法"></a>与循环配合的方法</h4><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><p>指定范围，生成指定数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>):  <span class="comment"># 步长</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">1</span>,<span class="number">-2</span>): <span class="comment"># 反向步长</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h5 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h5><p>枚举，对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'alex'</span>,<span class="string">'银角'</span>,<span class="string">'女神'</span>,<span class="string">'egon'</span>,<span class="string">'太白'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(li):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">for</span> index,name <span class="keyword">in</span> enumerate(li,<span class="number">1</span>):</span><br><span class="line">    print(index,name)</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(li, <span class="number">100</span>):  <span class="comment"># 起始位置默认是0，可更改</span></span><br><span class="line">    print(index, name)</span><br></pre></td></tr></table></figure><h3 id="控制台输入输出"><a href="#控制台输入输出" class="headerlink" title="控制台输入输出"></a>控制台输入输出</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"请输入用户名"</span>)</span><br></pre></td></tr></table></figure><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"name"</span>)</span><br><span class="line"><span class="comment"># 默认输出自带换行</span></span><br><span class="line">print(name,end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h4><p>计算机存储，传输文件底层都是二进制码</p><p>解码：将二进制文件按对应编码还原为数据</p><p>编码：将数据按指定编码转为二进制数据</p><h4 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h4><h5 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h5><p>最早的编码，只包含英文字母，数字，特殊字符</p><table><thead><tr><th>Bin(二进制)</th><th>Oct(八进制)</th><th>Dec(十进制)</th><th>Hex(十六进制)</th><th>缩写/字符</th><th>解释</th></tr></thead><tbody><tr><td>0000 0000</td><td>0</td><td>0</td><td>00</td><td>NUL(null)</td><td>空字符</td></tr><tr><td>0000 0001</td><td>1</td><td>1</td><td>01</td><td>SOH(start of headline)</td><td>标题开始</td></tr><tr><td>0000 0010</td><td>2</td><td>2</td><td>02</td><td>STX (start of text)</td><td>正文开始</td></tr><tr><td>0000 0011</td><td>3</td><td>3</td><td>03</td><td>ETX (end of text)</td><td>正文结束</td></tr><tr><td>0000 0100</td><td>4</td><td>4</td><td>04</td><td>EOT (end of transmission)</td><td>传输结束</td></tr><tr><td>0000 0101</td><td>5</td><td>5</td><td>05</td><td>ENQ (enquiry)</td><td>请求</td></tr><tr><td>0000 0110</td><td>6</td><td>6</td><td>06</td><td>ACK (acknowledge)</td><td>收到通知</td></tr><tr><td>0000 0111</td><td>7</td><td>7</td><td>07</td><td>BEL (bell)</td><td>响铃</td></tr><tr><td>0000 1000</td><td>10</td><td>8</td><td>08</td><td>BS (backspace)</td><td>退格</td></tr><tr><td>0000 1001</td><td>11</td><td>9</td><td>09</td><td>HT (horizontal tab)</td><td>水平制表符</td></tr><tr><td>0000 1010</td><td>12</td><td>10</td><td>0A</td><td>LF (NL line feed, new line)</td><td>换行键</td></tr><tr><td>0000 1011</td><td>13</td><td>11</td><td>0B</td><td>VT (vertical tab)</td><td>垂直制表符</td></tr><tr><td>0000 1100</td><td>14</td><td>12</td><td>0C</td><td>FF (NP form feed, new page)</td><td>换页键</td></tr><tr><td>0000 1101</td><td>15</td><td>13</td><td>0D</td><td>CR (carriage return)</td><td>回车键</td></tr><tr><td>0000 1110</td><td>16</td><td>14</td><td>0E</td><td>SO (shift out)</td><td>不用切换</td></tr><tr><td>0000 1111</td><td>17</td><td>15</td><td>0F</td><td>SI (shift in)</td><td>启用切换</td></tr><tr><td>0001 0000</td><td>20</td><td>16</td><td>10</td><td>DLE (data link escape)</td><td>数据链路转义</td></tr><tr><td>0001 0001</td><td>21</td><td>17</td><td>11</td><td>DC1 (device control 1)</td><td>设备控制1</td></tr><tr><td>0001 0010</td><td>22</td><td>18</td><td>12</td><td>DC2 (device control 2)</td><td>设备控制2</td></tr><tr><td>0001 0011</td><td>23</td><td>19</td><td>13</td><td>DC3 (device control 3)</td><td>设备控制3</td></tr><tr><td>0001 0100</td><td>24</td><td>20</td><td>14</td><td>DC4 (device control 4)</td><td>设备控制4</td></tr><tr><td>0001 0101</td><td>25</td><td>21</td><td>15</td><td>NAK (negative acknowledge)</td><td>拒绝接收</td></tr><tr><td>0001 0110</td><td>26</td><td>22</td><td>16</td><td>SYN (synchronous idle)</td><td>同步空闲</td></tr><tr><td>0001 0111</td><td>27</td><td>23</td><td>17</td><td>ETB (end of trans. block)</td><td>结束传输块</td></tr><tr><td>0001 1000</td><td>30</td><td>24</td><td>18</td><td>CAN (cancel)</td><td>取消</td></tr><tr><td>0001 1001</td><td>31</td><td>25</td><td>19</td><td>EM (end of medium)</td><td>媒介结束</td></tr><tr><td>0001 1010</td><td>32</td><td>26</td><td>1A</td><td>SUB (substitute)</td><td>代替</td></tr><tr><td>0001 1011</td><td>33</td><td>27</td><td>1B</td><td>ESC (escape)</td><td>换码(溢出)</td></tr><tr><td>0001 1100</td><td>34</td><td>28</td><td>1C</td><td>FS (file separator)</td><td>文件分隔符</td></tr><tr><td>0001 1101</td><td>35</td><td>29</td><td>1D</td><td>GS (group separator)</td><td>分组符</td></tr><tr><td>0001 1110</td><td>36</td><td>30</td><td>1E</td><td>RS (record separator)</td><td>记录分隔符</td></tr><tr><td>0001 1111</td><td>37</td><td>31</td><td>1F</td><td>US (unit separator)</td><td>单元分隔符</td></tr><tr><td>0010 0000</td><td>40</td><td>32</td><td>20</td><td>(space)</td><td>空格</td></tr><tr><td>0010 0001</td><td>41</td><td>33</td><td>21</td><td>!</td><td>叹号</td></tr><tr><td>0010 0010</td><td>42</td><td>34</td><td>22</td><td>“</td><td>双引号</td></tr><tr><td>0010 0011</td><td>43</td><td>35</td><td>23</td><td>#</td><td>井号</td></tr><tr><td>0010 0100</td><td>44</td><td>36</td><td>24</td><td>$</td><td>美元符</td></tr><tr><td>0010 0101</td><td>45</td><td>37</td><td>25</td><td>%</td><td>百分号</td></tr><tr><td>0010 0110</td><td>46</td><td>38</td><td>26</td><td>&amp;</td><td>和号</td></tr><tr><td>0010 0111</td><td>47</td><td>39</td><td>27</td><td>‘</td><td>闭单引号</td></tr><tr><td>0010 1000</td><td>50</td><td>40</td><td>28</td><td>(</td><td>开括号</td></tr><tr><td>0010 1001</td><td>51</td><td>41</td><td>29</td><td>)</td><td>闭括号</td></tr><tr><td>0010 1010</td><td>52</td><td>42</td><td>2A</td><td>*</td><td>星号</td></tr><tr><td>0010 1011</td><td>53</td><td>43</td><td>2B</td><td>+</td><td>加号</td></tr><tr><td>0010 1100</td><td>54</td><td>44</td><td>2C</td><td>,</td><td>逗号</td></tr><tr><td>0010 1101</td><td>55</td><td>45</td><td>2D</td><td>-</td><td>减号/破折号</td></tr><tr><td>0010 1110</td><td>56</td><td>46</td><td>2E</td><td>.</td><td>句号</td></tr><tr><td>00101111</td><td>57</td><td>47</td><td>2F</td><td>/</td><td>斜杠</td></tr><tr><td>00110000</td><td>60</td><td>48</td><td>30</td><td>0</td><td>数字0</td></tr><tr><td>00110001</td><td>61</td><td>49</td><td>31</td><td>1</td><td>数字1</td></tr><tr><td>00110010</td><td>62</td><td>50</td><td>32</td><td>2</td><td>数字2</td></tr><tr><td>00110011</td><td>63</td><td>51</td><td>33</td><td>3</td><td>数字3</td></tr><tr><td>00110100</td><td>64</td><td>52</td><td>34</td><td>4</td><td>数字4</td></tr><tr><td>00110101</td><td>65</td><td>53</td><td>35</td><td>5</td><td>数字5</td></tr><tr><td>00110110</td><td>66</td><td>54</td><td>36</td><td>6</td><td>数字6</td></tr><tr><td>00110111</td><td>67</td><td>55</td><td>37</td><td>7</td><td>数字7</td></tr><tr><td>00111000</td><td>70</td><td>56</td><td>38</td><td>8</td><td>数字8</td></tr><tr><td>00111001</td><td>71</td><td>57</td><td>39</td><td>9</td><td>数字9</td></tr><tr><td>00111010</td><td>72</td><td>58</td><td>3A</td><td>:</td><td>冒号</td></tr><tr><td>00111011</td><td>73</td><td>59</td><td>3B</td><td>;</td><td>分号</td></tr><tr><td>00111100</td><td>74</td><td>60</td><td>3C</td><td>&lt;</td><td>小于</td></tr><tr><td>00111101</td><td>75</td><td>61</td><td>3D</td><td>=</td><td>等号</td></tr><tr><td>00111110</td><td>76</td><td>62</td><td>3E</td><td>&gt;</td><td>大于</td></tr><tr><td>00111111</td><td>77</td><td>63</td><td>3F</td><td>?</td><td>问号</td></tr><tr><td>01000000</td><td>100</td><td>64</td><td>40</td><td>@</td><td>电子邮件符号</td></tr><tr><td>01000001</td><td>101</td><td>65</td><td>41</td><td>A</td><td>大写字母A</td></tr><tr><td>01000010</td><td>102</td><td>66</td><td>42</td><td>B</td><td>大写字母B</td></tr><tr><td>01000011</td><td>103</td><td>67</td><td>43</td><td>C</td><td>大写字母C</td></tr><tr><td>01000100</td><td>104</td><td>68</td><td>44</td><td>D</td><td>大写字母D</td></tr><tr><td>01000101</td><td>105</td><td>69</td><td>45</td><td>E</td><td>大写字母E</td></tr><tr><td>01000110</td><td>106</td><td>70</td><td>46</td><td>F</td><td>大写字母F</td></tr><tr><td>01000111</td><td>107</td><td>71</td><td>47</td><td>G</td><td>大写字母G</td></tr><tr><td>01001000</td><td>110</td><td>72</td><td>48</td><td>H</td><td>大写字母H</td></tr><tr><td>01001001</td><td>111</td><td>73</td><td>49</td><td>I</td><td>大写字母I</td></tr><tr><td>01001010</td><td>112</td><td>74</td><td>4A</td><td>J</td><td>大写字母J</td></tr><tr><td>01001011</td><td>113</td><td>75</td><td>4B</td><td>K</td><td>大写字母K</td></tr><tr><td>01001100</td><td>114</td><td>76</td><td>4C</td><td>L</td><td>大写字母L</td></tr><tr><td>01001101</td><td>115</td><td>77</td><td>4D</td><td>M</td><td>大写字母M</td></tr><tr><td>01001110</td><td>116</td><td>78</td><td>4E</td><td>N</td><td>大写字母N</td></tr><tr><td>01001111</td><td>117</td><td>79</td><td>4F</td><td>O</td><td>大写字母O</td></tr><tr><td>01010000</td><td>120</td><td>80</td><td>50</td><td>P</td><td>大写字母P</td></tr><tr><td>01010001</td><td>121</td><td>81</td><td>51</td><td>Q</td><td>大写字母Q</td></tr><tr><td>01010010</td><td>122</td><td>82</td><td>52</td><td>R</td><td>大写字母R</td></tr><tr><td>01010011</td><td>123</td><td>83</td><td>53</td><td>S</td><td>大写字母S</td></tr><tr><td>01010100</td><td>124</td><td>84</td><td>54</td><td>T</td><td>大写字母T</td></tr><tr><td>01010101</td><td>125</td><td>85</td><td>55</td><td>U</td><td>大写字母U</td></tr><tr><td>01010110</td><td>126</td><td>86</td><td>56</td><td>V</td><td>大写字母V</td></tr><tr><td>01010111</td><td>127</td><td>87</td><td>57</td><td>W</td><td>大写字母W</td></tr><tr><td>01011000</td><td>130</td><td>88</td><td>58</td><td>X</td><td>大写字母X</td></tr><tr><td>01011001</td><td>131</td><td>89</td><td>59</td><td>Y</td><td>大写字母Y</td></tr><tr><td>01011010</td><td>132</td><td>90</td><td>5A</td><td>Z</td><td>大写字母Z</td></tr><tr><td>01011011</td><td>133</td><td>91</td><td>5B</td><td>[</td><td>开方括号</td></tr><tr><td>01011100</td><td>134</td><td>92</td><td>5C</td><td>\</td><td>反斜杠</td></tr><tr><td>01011101</td><td>135</td><td>93</td><td>5D</td><td>]</td><td>闭方括号</td></tr><tr><td>01011110</td><td>136</td><td>94</td><td>5E</td><td>^</td><td>脱字符</td></tr><tr><td>01011111</td><td>137</td><td>95</td><td>5F</td><td>_</td><td>下划线</td></tr><tr><td>01100000</td><td>140</td><td>96</td><td>60</td><td>`</td><td>开单引号</td></tr><tr><td>01100001</td><td>141</td><td>97</td><td>61</td><td>a</td><td>小写字母a</td></tr><tr><td>01100010</td><td>142</td><td>98</td><td>62</td><td>b</td><td>小写字母b</td></tr><tr><td>01100011</td><td>143</td><td>99</td><td>63</td><td>c</td><td>小写字母c</td></tr><tr><td>01100100</td><td>144</td><td>100</td><td>64</td><td>d</td><td>小写字母d</td></tr><tr><td>01100101</td><td>145</td><td>101</td><td>65</td><td>e</td><td>小写字母e</td></tr><tr><td>01100110</td><td>146</td><td>102</td><td>66</td><td>f</td><td>小写字母f</td></tr><tr><td>01100111</td><td>147</td><td>103</td><td>67</td><td>g</td><td>小写字母g</td></tr><tr><td>01101000</td><td>150</td><td>104</td><td>68</td><td>h</td><td>小写字母h</td></tr><tr><td>01101001</td><td>151</td><td>105</td><td>69</td><td>i</td><td>小写字母i</td></tr><tr><td>01101010</td><td>152</td><td>106</td><td>6A</td><td>j</td><td>小写字母j</td></tr><tr><td>01101011</td><td>153</td><td>107</td><td>6B</td><td>k</td><td>小写字母k</td></tr><tr><td>01101100</td><td>154</td><td>108</td><td>6C</td><td>l</td><td>小写字母l</td></tr><tr><td>01101101</td><td>155</td><td>109</td><td>6D</td><td>m</td><td>小写字母m</td></tr><tr><td>01101110</td><td>156</td><td>110</td><td>6E</td><td>n</td><td>小写字母n</td></tr><tr><td>01101111</td><td>157</td><td>111</td><td>6F</td><td>o</td><td>小写字母o</td></tr><tr><td>01110000</td><td>160</td><td>112</td><td>70</td><td>p</td><td>小写字母p</td></tr><tr><td>01110001</td><td>161</td><td>113</td><td>71</td><td>q</td><td>小写字母q</td></tr><tr><td>01110010</td><td>162</td><td>114</td><td>72</td><td>r</td><td>小写字母r</td></tr><tr><td>01110011</td><td>163</td><td>115</td><td>73</td><td>s</td><td>小写字母s</td></tr><tr><td>01110100</td><td>164</td><td>116</td><td>74</td><td>t</td><td>小写字母t</td></tr><tr><td>01110101</td><td>165</td><td>117</td><td>75</td><td>u</td><td>小写字母u</td></tr><tr><td>01110110</td><td>166</td><td>118</td><td>76</td><td>v</td><td>小写字母v</td></tr><tr><td>01110111</td><td>167</td><td>119</td><td>77</td><td>w</td><td>小写字母w</td></tr><tr><td>01111000</td><td>170</td><td>120</td><td>78</td><td>x</td><td>小写字母x</td></tr><tr><td>01111001</td><td>171</td><td>121</td><td>79</td><td>y</td><td>小写字母y</td></tr><tr><td>01111010</td><td>172</td><td>122</td><td>7A</td><td>z</td><td>小写字母z</td></tr><tr><td>01111011</td><td>173</td><td>123</td><td>7B</td><td>{</td><td>开花括号</td></tr><tr><td>01111100</td><td>174</td><td>124</td><td>7C</td><td>|</td><td>垂线</td></tr><tr><td>01111101</td><td>175</td><td>125</td><td>7D</td><td>}</td><td>闭花括号</td></tr><tr><td>01111110</td><td>176</td><td>126</td><td>7E</td><td>~</td><td>波浪号</td></tr><tr><td>01111111</td><td>177</td><td>127</td><td>7F</td><td>DEL (delete)</td><td></td></tr></tbody></table><p><strong>每个字符对应8bit</strong></p><h5 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h5><p>国标，包含英文字母，数字，特殊字符，中文</p><p><strong>一个英文字符占1byte</strong></p><p><strong>一个中文字符占2byte</strong></p><h5 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h5><p>万国码，把世界上所有的文字都记录</p><p>起初每个字符用2byte，后来为了记录所有，每个字符用4byte</p><p>虽然全面，但浪费资源</p><h5 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h5><p>Unicode升级版</p><table><thead><tr><th align="left">字符</th><th align="left">大小</th></tr></thead><tbody><tr><td align="left">英文</td><td align="left">1byte</td></tr><tr><td align="left">欧洲文字</td><td align="left">2byte</td></tr><tr><td align="left">中文，亚洲文字</td><td align="left">3byte</td></tr></tbody></table><h4 id="数据大小"><a href="#数据大小" class="headerlink" title="数据大小"></a>数据大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">8bit = 1byte</span><br><span class="line">1024byte = 1KB</span><br><span class="line">1024KB = 1MB</span><br><span class="line">1024MB = 1GB</span><br><span class="line">1024GB = 1TB</span><br><span class="line">1024TB = 1PB</span><br><span class="line">1024TB = 1EB</span><br><span class="line">1024EB = 1ZB</span><br><span class="line">1024ZB = 1YB</span><br><span class="line">1024YB = 1NB</span><br><span class="line">1024NB = 1DB</span><br></pre></td></tr></table></figure><h4 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h4><p>　　<strong>1. 在计算机内存中，统一使用Unicode编码，当需要将数据保存到硬盘或者需要网络传输的时候，就转换为非Unicode编码比如：UTF-8编码。</strong></p><p>　　其实这个不用深入理解，他就是规定，举个例子：用文件编辑器（word，wps,等）编辑文件的时候，从文件将你的数据（此时你的数据是非Unicode（可能是UTF-8，也可能是gbk，这个编码取决于你的编辑器设置））字符被转换为Unicode字符读到内存里，进行相应的编辑，编辑完成后，保存的时候再把Unicode转换为非Unicode（UTF-8，GBK 等）保存到文件。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208211253.png" alt></p><p>　　<strong>2. 不同编码之间，不能直接互相识别。</strong></p><p>　　比如你的一个数据：‘老铁没毛病’是以utf-8的编码方式编码并发送给一个朋友，那么你发送的肯定是通过utf-8的编码转化成的二进制01010101，那么你的朋友接收到你发的这个数据，他如果想查看这个数据必须将01010101转化成汉字，才可以查看，那么此时那也必须通过utf-8编码反转回去，如果要是通过gbk编码反转，那么这个内容可能会出现乱码或者报错</p><p><strong>前提条件</strong>：python3x版本（python2x版本与这个不同）。</p><p><strong>主要用途</strong>：数据的存储或者传输。</p><p>刚才咱们也说过了，在计算机内存中，统一使用Unicode编码，当需要将数据<strong>保存到硬盘或者需要网络传输</strong>的时候，就转换为非Unicode编码比如：UTF-8编码</p><h4 id="引例：网络传输"><a href="#引例：网络传输" class="headerlink" title="引例：网络传输"></a>引例：网络传输</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208211432.png" alt></p><p>解决方式：用bytes做中介</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208211510.png" alt></p><h4 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h4><table><thead><tr><th>类名</th><th>str类型</th><th>bytes类型</th><th>标注</th></tr></thead><tbody><tr><td>名称</td><td>str,字符串,文本文字</td><td>bytes,字节文字</td><td></td></tr><tr><td>组成单位</td><td>字符</td><td>字节</td><td></td></tr><tr><td>组成形式</td><td>‘’ 或者 “” 或者 ‘’’ ‘’’ 或者 “”” “””</td><td>b’’ 或者 b”” 或者 b’’’ ‘’’ 或者 b””” “””</td><td>不同，bytes类型就是在引号前面+b(B)大小写都可以</td></tr><tr><td>表现形式</td><td>英文： ‘alex’ 中文： ‘中国’</td><td>英文：b’alex’中文：b’\xe4\xb8\xad\xe5\x9b\xbd’</td><td>字节文字对于ascii中的元素是可以直接显示的。</td></tr><tr><td>编码方式</td><td>Unicode</td><td>可指定编码（除Unicode之外）比如UTF-8，GBK 等</td><td>非ascii码中的元素是以十六进制的形式表示的</td></tr><tr><td>相应功能</td><td>upper lower spllit 等等</td><td>upper lower spllit 等等</td><td>几乎相同</td></tr><tr><td>转译</td><td>可在最前面加r进行转译</td><td>可在最前面加r进行转译</td><td>相同</td></tr><tr><td>重要用途</td><td>python基础数据类型，用于存储少量的常用的数据</td><td>负责以二进制字节序列的形式记录所需记录的对象，至于该对象到底表示什么（比如到底是什么字符）则由相应的编码格式解码所决定。<br>Python3中，bytes通常用于网络数据传输、二进制图片和文件的保存等等<br>bytes是唯一可以指定编码化为非unicode编码的</td><td>bytes就是用于数据存储和网络传输数据</td></tr></tbody></table><p>bytes类型也称作字节文本，他的主要用途就是网络的数据传输，与数据存储。那么有些同学肯定问，bytes类型既然与str差不多，而且操作方法也很相似，就是在字符串前面加个b不就行了，python为什么还要这两个数据类型呢？我只用bytes不行么？</p><p>如果你只用bytes开发，不方便。因为对于非ascii码里面的文字来说，bytes只是显示的是16进制。很不方便。</p><h4 id="str-bytes互化"><a href="#str-bytes互化" class="headerlink" title="str bytes互化"></a>str bytes互化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过编码将str转为对应bytes</span></span><br><span class="line"><span class="comment"># encode称作编码:将 str 转化成 bytes类型</span></span><br><span class="line">s1 = <span class="string">'中国'</span></span><br><span class="line">b1 = s1.encode(<span class="string">'utf-8'</span>)  <span class="comment"># 转化成utf-8的bytes类型</span></span><br><span class="line">print(s1)  <span class="comment"># 中国</span></span><br><span class="line">print(b1)  <span class="comment"># b'\xe4\xb8\xad\xe5\x9b\xbd'</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">'中国'</span></span><br><span class="line">b1 = s1.encode(<span class="string">'gbk'</span>)  <span class="comment"># 转化成gbk的bytes类型</span></span><br><span class="line">print(s1)  <span class="comment"># 中国</span></span><br><span class="line">print(b1)  <span class="comment"># b'\xd6\xd0\xb9\xfa'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过解码将bytes还原为对应字符串</span></span><br><span class="line"><span class="comment"># decode称作解码, 将 bytes 转化成 str类型</span></span><br><span class="line">b1 = <span class="string">b'\xe4\xb8\xad\xe5\x9b\xbd'</span></span><br><span class="line">s1 = b1.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(s1)  <span class="comment"># 中国</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209135539.png" alt></p><h4 id="不同编码间转换"><a href="#不同编码间转换" class="headerlink" title="不同编码间转换"></a>不同编码间转换</h4><p>本质为不同编码形成的bytes，故以str为中介</p><p>示例：将gbk转为utf-8</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208215158.png" alt></p><h3 id="代码块和缓存机制"><a href="#代码块和缓存机制" class="headerlink" title="代码块和缓存机制"></a>代码块和缓存机制</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>Python程序是由代码块构造的。块是一个python程序的文本，他是作为一个单元执行的。</p><p>代码块：一个模块，一个函数，一个类，一个文件等都是一个代码块。</p><p>而作为交互方式输入的每个命令都是一个代码块</p><h4 id="代码块的缓存机制"><a href="#代码块的缓存机制" class="headerlink" title="代码块的缓存机制"></a>代码块的缓存机制</h4><ul><li><p><strong>前提条件</strong>：在同一个代码块内。</p></li><li><p><strong>机制内容：</strong>Python在执行同一个代码块的初始化对象的命令时，会检查是否其值是否已经存在，如果存在，会将其重用。换句话说：执行同一个代码块时，遇到初始化对象的命令时，他会将初始化的这个变量与值存储在一个字典中，在遇到新的变量时，会先在字典中查询记录，如果有同样的记录那么它会重复使用这个字典中的之前的这个值。所以在你给出的例子中，文件执行时（同一个代码块）会把i1、i2两个变量指向同一个对象，满足缓存机制则他们在内存中只存在一个，即：id相同。</p></li><li><p><strong>适用对象</strong>： int（float），str，bool。</p></li><li><p>变量之间相互赋值时都是直接指向了这些对象，而不是相互指向</p></li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183914.png" alt></p><ul><li><strong>对象的具体细则：（了解）</strong></li></ul><p>int(float):任何数字在同一代码块下都会复用。</p><p>bool:True和False在字典中会以1，0方式存在，并且复用。</p><p>str：几乎所有的字符串都会符合缓存机制，具体规定如下（<strong>了解即可！</strong>）：</p><blockquote><p>1，非乘法得到的字符串都满足代码块的缓存机制：</p><p>2,乘法得到的字符串分两种情况：</p><blockquote><p>2.1 乘数为1时，任何字符串满足代码块的缓存机制：</p><p>2.2 乘数&gt;=2时：仅含大小写字母，数字，下划线，总长度&lt;=20，满足代码块的缓存机制：</p></blockquote></blockquote><ul><li>优点</li></ul><p>能够提高一些字符串，整数处理人物在时间和空间上的性能；需要值相同的字符串，整数的时候，直接从‘字典’中取出复用，避免频繁的创建和销毁，提升效率，节约内存。</p><h4 id="小数据池"><a href="#小数据池" class="headerlink" title="小数据池"></a>小数据池</h4><p>小数据池，不同代码块的缓存机制，也称为小整数缓存机制，或者称为驻留机制等等，</p><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a><strong>前提条件</strong></h5><p>在不同代码块内。</p><h5 id="机制内容"><a href="#机制内容" class="headerlink" title="*机制内容*"></a>*机制内容*</h5><p>Python自动将-5~256的整数进行了<strong>缓存</strong>，当你将这些整数赋值给变量时，并不会重新创建对象，而是使用已经创建好的缓存对象。</p><p>python会将一定规则的字符串在<strong>字符串驻留池</strong>中，创建一份，当你将这些字符串赋值给变量时，并不会重新创建对象， 而是使用在字符串驻留池中创建好的对象。</p><p>　　其实，无论是缓存还是字符串驻留池，都是python做的一个优化，就是将~5-256的整数，和一定规则的字符串，放在一个‘池’（容器，或者字典）中，无论程序中那些变量指向这些范围内的整数或者字符串，那么他直接在这个‘池’中引用，言外之意，就是内存中之创建一个。</p><h5 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a><strong>适用对象</strong></h5><p> <strong>int（float），str，bool</strong> </p><h5 id="对象的具体细则：（了解即可）"><a href="#对象的具体细则：（了解即可）" class="headerlink" title="\对象的具体细则：（了解即可）**"></a><strong><em>\</em>对象的具体细则：（了解即可）**</strong></h5><p><strong>int：</strong>那么大家都知道对于整数来说，小数据池的范围是-5~256 ，如果多个变量都是指向同一个（在这个范围内的）数字，他们在内存中指向的都是一个内存地址。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183354.png" alt></p><p><strong>str:</strong>字符串要从下面这几个大方向讨论（<strong>了解即可！</strong>）：</p><p><strong>1,字符串的长度为0或者1，默认都采用了驻留机制（小数据池）。</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183432.png" alt><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183447.png" alt></p><p><strong>2,字符串的长度&gt;1,且只含有大小写字母，数字，下划线时，才会默认驻留。</strong></p><p> <img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183511.png" alt></p><p><strong>3,用乘法得到的字符串，分两种情况。</strong></p><p>　　<strong>3.1 乘数为1时：</strong></p><p>仅含大小写字母，数字，下划线，默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183530.png" alt></p><p>含其他字符，长度&lt;=1,默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183551.png" alt></p><p>含其他字符，长度&gt;1,默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183615.png" alt></p><p>　　<strong>3.2 乘数&gt;=2时：</strong></p><p>仅含大小写字母，数字，下划线，总长度&lt;=20,默认驻留。</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183631.png" alt></p><p><strong>4，指定驻留。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> intern</span><br><span class="line">a = intern(<span class="string">'hello!@'</span>*<span class="number">20</span>)</span><br><span class="line">b = intern(<span class="string">'hello!@'</span>*<span class="number">20</span>)</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment"># 指定驻留是你可以指定任意的字符串加入到小数据池中，让其只在内存中创建一个对象，多个变量都是指向这一个字符串</span></span><br></pre></td></tr></table></figure><p><strong>bool</strong>：值就是True，False，无论你创建多少个变量指向True，False，那么他在内存中只存在一个。</p><h5 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h5><p>显而易见，节省大量内存在字符串比较时，非驻留比较效率o(n)，驻留时比较效率o(1)</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183651.png" alt></p><h3 id="深浅copy"><a href="#深浅copy" class="headerlink" title="深浅copy"></a>深浅copy</h3><h4 id="浅copy"><a href="#浅copy" class="headerlink" title="浅copy"></a>浅copy</h4><p>对于浅copy来说，只是在内存中重新创建了开辟了一个空间存放一个新列表，但是新列表中的元素与原列表中的元素是公用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同一代码块下：</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="string">'太白'</span>, <span class="literal">True</span>, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line">l2 = l1.copy()</span><br><span class="line">print(id(l1), id(l2))  <span class="comment"># 2713214468360 2713214524680</span></span><br><span class="line">print(id(l1[<span class="number">-2</span>]), id(l2[<span class="number">-2</span>]))  <span class="comment"># 2547618888008 2547618888008</span></span><br><span class="line">print(id(l1[<span class="number">-1</span>]),id(l2[<span class="number">-1</span>]))  <span class="comment"># 2547620322952 2547620322952</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同代码块下：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">1</span>, <span class="string">'太白'</span>, <span class="literal">True</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = l1.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1), id(l2))</span><br><span class="line"><span class="number">1477183162696</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1[<span class="number">-2</span>]), id(l2[<span class="number">-2</span>]))</span><br><span class="line"><span class="number">1477181814032</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1[<span class="number">-1</span>]), id(l2[<span class="number">-1</span>]))</span><br><span class="line"><span class="number">1477183162504</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183717.png" alt></p><h4 id="深copy"><a href="#深copy" class="headerlink" title="深copy"></a>深copy</h4><p>对于深copy来说，列表是在内存中重新创建的，列表中可变的数据类型是重新创建的，列表中的不可变的数据类型是公用的</p><p><strong>切片相当于浅copy</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同一代码块下</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">l1 = [<span class="number">1</span>, <span class="string">'alex'</span>, <span class="literal">True</span>, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line">l2 = copy.deepcopy(l1)</span><br><span class="line">print(id(l1), id(l2))  <span class="comment"># 2788324482440 2788324483016</span></span><br><span class="line">print(id(l1[<span class="number">0</span>]),id(l2[<span class="number">0</span>]))  <span class="comment"># 1470562768 1470562768</span></span><br><span class="line">print(id(l1[<span class="number">-1</span>]),id(l2[<span class="number">-1</span>]))  <span class="comment"># 2788324482632 2788324482696</span></span><br><span class="line">print(id(l1[<span class="number">-2</span>]),id(l2[<span class="number">-2</span>]))  <span class="comment"># 2788323047752 2788323047752</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同代码块下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">1</span>, <span class="string">'太白'</span>, <span class="literal">True</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), [<span class="number">22</span>, <span class="number">33</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = copy.deepcopy(l1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1), id(l2))</span><br><span class="line"><span class="number">1477183162632</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(<span class="number">0</span>), id(<span class="number">0</span>))</span><br><span class="line"><span class="number">1470562736</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(<span class="number">-2</span>), id(<span class="number">-2</span>))</span><br><span class="line"><span class="number">1470562672</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(l1[<span class="number">-1</span>]), id(l2[<span class="number">-1</span>]))</span><br><span class="line"><span class="number">1477183162312</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208183827.png" alt></p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>计算机系统分为：计算机硬件，操作系统，应用程序三部分。</p><p>我们用python或其他语言编写的应用程序若想要把数据永久保存下来，必须要保存于硬盘中，这就涉及到应用程序要操作硬件，众所周知，应用程序是无法直接操作硬件的，这就用到了操作系统。操作系统把复杂的硬件操作封装成简单的接口给用户/应用程序使用，其中文件就是操作系统提供给应用程序来操作硬盘虚拟概念，用户或应用程序通过操作文件，可以将自己的数据永久保存下来。</p><p>有了文件的概念，我们无需再去考虑操作硬盘的细节，只需要关注操作文件的流程</p><p>文件操作的内容流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 打开文件，得到文件句柄并赋值给一个变量</span></span><br><span class="line">f=open(<span class="string">'a.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="comment">#默认打开模式就为r</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 通过句柄对文件进行操作</span></span><br><span class="line">data=f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="常出的错"><a href="#常出的错" class="headerlink" title="常出的错"></a>常出的错</h4><h5 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208223321.png" alt></p><p>这个是没有找到该文件，很可能是你的文件路径错了</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208223256.png" alt></p><p>你的的路径里面的\与后面的字符产生了特殊意义类似于\t，\n，换行符一样</p><ul><li><p>C:\Users\金鑫\Desktop\111.txt’ 凡是路径会产生特殊意义的地方，多加一个\ 这样就是前面\对后面的\进行转译，告诉计算机这个只是想单纯的表示\路径而已。即用\\代替\</p></li><li><p>r’C:\Users\金鑫\Desktop\111.txt’ 在路径的整体前面加一个r。（<strong>推荐</strong>）</p></li></ul><p>相对路径与绝对路径：</p><ul><li><p>绝对路径:从磁盘根目录开始一直到文件名</p></li><li><p>相对路径:用一个文件夹下的文件,相对于当前这个程序所在的文件而言.如果在同一个文件中,则相对路劲就是这个文件名.如果再上一层文件夹则要使用../相对路径下，你就可以直接写文件名即可。</p></li></ul><h5 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200208223511.png" alt></p><p>用了错误的编码来打开文件</p><h4 id="读"><a href="#读" class="headerlink" title="读"></a>读</h4><h5 id="r模式"><a href="#r模式" class="headerlink" title="r模式"></a>r模式</h5><p>以只读方式打开文件，文件的指针将会放在文件的开头。是文件操作最常用的模式，也是<strong>默认模式</strong></p><h5 id="rb模式"><a href="#rb模式" class="headerlink" title="rb模式"></a>rb模式</h5><p>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。记住下面讲的也是一样，带b的都是以二进制的格式操作文件，他们主要是操作非文字文件：图片，音频，视频等,<strong>并且如果你要是带有b的模式操作文件，那么不用声明编码方式</strong></p><h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><h5 id="w模式"><a href="#w模式" class="headerlink" title="w模式"></a>w模式</h5><ul><li><p>如果文件不存在，利用w模式操作文件，那么它会先创建文件，然后写入内容.</p></li><li><p>如果文件存在，利用w模式操作文件，先清空原文件内容，在写入新内容。</p></li></ul><h5 id="wb模式"><a href="#wb模式" class="headerlink" title="wb模式"></a>wb模式</h5><p>wb模式：以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如：图片，音频，视频等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先以rb的模式将一个图片的内容以bytes类型全部读取出来，</span></span><br><span class="line"><span class="comment"># 然后在以wb将全部读取出来的数据写入一个新文件，这样就完成了类似于一个图片复制的流程</span></span><br><span class="line">f = open(<span class="string">"a.jpg"</span>,mode = <span class="string">"rb"</span>)</span><br><span class="line">content = f.read()</span><br><span class="line">f.close()</span><br><span class="line">f1 = open(<span class="string">"b.jpg"</span>, mode = <span class="string">"wb"</span>)</span><br><span class="line">f1.write(content)</span><br><span class="line">f1.close</span><br></pre></td></tr></table></figure><h4 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h4><h5 id="a模式"><a href="#a模式" class="headerlink" title="a模式"></a>a模式</h5><p>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h5 id="各种模式"><a href="#各种模式" class="headerlink" title="各种模式"></a>各种模式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件的模式有(默认为文本模式)：</span></span><br><span class="line">r，只读模式【默认模式，文件必须存在，不存在则抛出异常】</span><br><span class="line">w，只写模式【不可读；不存在则创建；存在则清空内容】</span><br><span class="line">a， 只追加写模式【不可读；不存在则创建；存在则只追加内容】</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 对于非文本文件，我们只能使用b模式，"b"表示以字节的方式操作</span></span><br><span class="line"><span class="comment">#（而所有文件也都是以字节的形式存储的，使用这种模式无需考虑文本文件的字符编码、</span></span><br><span class="line"><span class="comment"># 图片文件的jgp格式、视频文件的avi格式）</span></span><br><span class="line">rb </span><br><span class="line">wb</span><br><span class="line">ab</span><br><span class="line">注：以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型，不能指定编码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,‘+’模式（就是增加了一个功能）</span></span><br><span class="line">r+， 读写【可读，可写】</span><br><span class="line">w+，写读【可写，可读】</span><br><span class="line">a+， 写读【可写，可读】</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4，以bytes类型操作的读写，写读，写读模式</span></span><br><span class="line">r+b， 读写【可读，可写】</span><br><span class="line">w+b，写读【可写，可读】</span><br><span class="line">a+b， 写读【可写，可读】</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果你在读写模式下，先写后读，那么文件就会出问题，因为默认光标是在文件的最开始，你要是先写，则写入的内容会讲原内容覆盖掉，直到覆盖到你写完的内容，然后在后面开始读取。</p><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f.read()一次性读取所有内容</span></span><br><span class="line">f = open(<span class="string">'path1/小娃娃.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">msg = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># f.read(n)以字符为单位，读取n个字符  光标亦随之移动了n个字符</span></span><br><span class="line"><span class="comment"># 1. 文件打开方式为文本模式时，代表读取n个字符</span></span><br><span class="line"><span class="comment"># 2. 文件打开方式为b模式时，代表读取n个字节</span></span><br><span class="line">f = open(<span class="string">'path1/小娃娃.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">msg = f.read(<span class="number">3</span>)</span><br><span class="line">msg1 = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># readline()读取每次只读取一行,注意点:readline()读取出来的数据在后面都有一个\n，</span></span><br><span class="line"><span class="comment"># 加上print本身自动换行所以一般会加strip</span></span><br><span class="line">f = open(<span class="string">'path1/小娃娃.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">msg1 = f.readline().strip()</span><br><span class="line">msg2 = f.readline().strip()</span><br><span class="line">msg3 = f.readline().strip()</span><br><span class="line">msg4 = f.readline().strip()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># readlines() 返回一个列表，列表里面每个元素是原文件的每一行，如果文件很大，占内存，容易崩盘</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过for循环去读取，文件句柄是一个迭代器，他的特点就是每次循环只在内存中占一行的数据，非常节省内存</span></span><br><span class="line">f = open(<span class="string">'../path1/弟子规'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)      <span class="comment">#这种方式就是在一行一行的进行读取,它就执行了下边的功能</span></span><br><span class="line"></span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.readline())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意:读完的文件句柄一定要关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># seek(n)光标移动到n位置,注意: 移动单位是byte,所有如果是utf-8的中文部分要是3的倍数</span></span><br><span class="line"><span class="comment"># 通常我们使用seek都是移动到开头或者结尾</span></span><br><span class="line"><span class="comment"># 移动到开头:seek(0)</span></span><br><span class="line"><span class="comment"># 移动到结尾:seek(0,2) </span></span><br><span class="line"><span class="comment"># seek的第二个参数表示的是从哪个位置进行偏移,默认是0,表示开头,1表示当前位置,2表示结尾</span></span><br><span class="line">f = open(<span class="string">"小娃娃"</span>, mode=<span class="string">"r+"</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 光标移动到开头</span></span><br><span class="line">content = f.read() <span class="comment"># 读取内容, 此时光标移动到结尾</span></span><br><span class="line">print(content)</span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 再次将光标移动到开头</span></span><br><span class="line">f.seek(<span class="number">0</span>, <span class="number">2</span>) <span class="comment"># 将光标移动到结尾</span></span><br><span class="line">content2 = f.read() <span class="comment"># 读取内容. 什么都没有</span></span><br><span class="line">print(content2)</span><br><span class="line">f.seek(<span class="number">0</span>) <span class="comment"># 移动到开头</span></span><br><span class="line">f.write(<span class="string">"张国荣"</span>) <span class="comment"># 写入信息. 此时光标在9 中文3 * 3个 = 9</span></span><br><span class="line">f.flush()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用tell()可以帮我们获取当前光标在什么位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  readable(),writeable()</span></span><br><span class="line">f = open(<span class="string">'Test'</span>,encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'r'</span>)</span><br><span class="line">print(f.readable())  <span class="comment"># True</span></span><br><span class="line">print(f.writable())  <span class="comment"># False</span></span><br><span class="line">content = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flush()刷新文件内部缓冲区</span></span><br></pre></td></tr></table></figure><h5 id="另一种打开方式"><a href="#另一种打开方式" class="headerlink" title="另一种打开方式"></a>另一种打开方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1,利用with上下文管理这种方式，它会自动在一段时间后哦关闭文件句柄。</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t1'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    f1.read()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2，一个with 语句可以操作多个文件，产生多个文件句柄。</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t1'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1,\</span><br><span class="line">        open(<span class="string">'Test'</span>, encoding=<span class="string">'utf-8'</span>, mode = <span class="string">'w'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f1.read()</span><br><span class="line">    f2.write(<span class="string">'老男孩老男孩'</span>)</span><br></pre></td></tr></table></figure><h4 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h4><p>文件的数据是存放于硬盘上的，因而只存在覆盖、不存在修改这么一说，我们平时看到的修改文件，都是模拟出来的效果</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209140134.png" alt></p><p>具体的说有两种实现方式：</p><p>方式一：将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘（word，vim，nodpad++等编辑器）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  <span class="comment"># 调用系统模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>) <span class="keyword">as</span> read_f,open(<span class="string">'.a.txt.swap'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    data=read_f.read() <span class="comment">#全部读入内存,如果文件很大,会很卡</span></span><br><span class="line">    data=data.replace(<span class="string">'alex'</span>,<span class="string">'SB'</span>) <span class="comment">#在内存中完成修改</span></span><br><span class="line"></span><br><span class="line">    write_f.write(data) <span class="comment">#一次性写入新文件</span></span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">'a.txt'</span>)  <span class="comment">#删除原文件</span></span><br><span class="line">os.rename(<span class="string">'.a.txt.swap'</span>,<span class="string">'a.txt'</span>)   <span class="comment">#将新建的文件重命名为原文件</span></span><br></pre></td></tr></table></figure><p>方式二：将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件</p><p>(当文件过大无法全部加载入内存中时用此法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>) <span class="keyword">as</span> read_f,open(<span class="string">'.a.txt.swap'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        line=line.replace(<span class="string">'alex'</span>,<span class="string">'SB'</span>)</span><br><span class="line">        write_f.write(line)</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">'a.txt'</span>)</span><br><span class="line">os.rename(<span class="string">'.a.txt.swap'</span>,<span class="string">'a.txt'</span>)</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p> 1，对一些功能就行封装，减少代码的重复性。</p><p> 2，使代码可读性更好</p><h4 id="函数结构"><a href="#函数结构" class="headerlink" title="函数结构"></a>函数结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure><p>def 关键词开头，空格之后接函数名称和圆括号()，最后还有一个”:”。</p><p>def 是固定的，不能变，他就是定义函数的关键字。</p><p>空格 为了将def关键字和函数名分开</p><p>函数名：函数名只能包含字符串、下划线和数字且不能以数字开头。虽然函数名可以随便起，但我们给函数起名字还是要尽量简短，并且要具有可描述性</p><p>括号：是必须加的，用于写形参</p><p>下面的函数体一定全部都要缩进，这代表是这个函数的代码</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>使用函数名加小括号就可以调用了 写法:函数名() 这个时候函数的函数体会被执行</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>1.遇到return,函数结束,return下面的（函数内）的代码不会执行。</p><p>2.return 会给函数的执行者返回值。</p><p>​    如果return后面什么都不写，或者函数中没有return,则返回的结果是None</p><p>​    如果return后面写了一个值,返回给调用者这个值</p><p>​    如果return后面写了多个结果,,返回给调用者一个tuple(元组),调用者可以直接使用元组的解构获取多个变量。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>将函数盘活，使函数能应对更多情况</p><h5 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h5><p>写在函数声明的位置的变量叫形参,形式上的一个完整.表示这个函数需要xxx</p><p>位置参数，args，默认参数，仅限关键字参数，**kwargs</p><h5 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h5><p>在函数调用的时候给函数传递的值</p><p>函数的传参就是函数将实际参数交给形式参数的过程.</p><p>按需传入</p><h5 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h5><h6 id="动态接收位置参数：-args"><a href="#动态接收位置参数：-args" class="headerlink" title="动态接收位置参数：*args"></a>动态接收位置参数：*args</h6><p>*args实参所有的位置参数接收，放置在一个元组中，并将这个元组赋值给args这个形参，PEP8规范中规定就使用args，约定俗成的</p><h6 id="动态接收关键字参数-kwargs"><a href="#动态接收关键字参数-kwargs" class="headerlink" title="动态接收关键字参数: kwargs"></a>动态接收关键字参数: kwargs</h6><p>**kwargs接受所有的关键字参数然后将其转换成一个字典赋值给kwargs这个形参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(args) <span class="comment"># ('蒸羊羔儿', '蒸熊掌', '蒸鹿尾儿')</span></span><br><span class="line">    print(kwargs) <span class="comment"># &#123;'name': '太白金星', 'sex': '男'&#125;</span></span><br><span class="line">func(<span class="string">'蒸羊羔儿'</span>, <span class="string">'蒸熊掌'</span>, <span class="string">'蒸鹿尾儿'</span>,name=<span class="string">'太白金星'</span>,sex=<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure><h5 id="的用法"><a href="#的用法" class="headerlink" title="*的用法"></a>*的用法</h5><h6 id="函数中"><a href="#函数中" class="headerlink" title="函数中"></a>函数中</h6><p> <strong>聚合</strong></p><p>在函数的定义时： *起到的是聚合的作用，将多个参数聚合为一个元组(字典)</p><p> <strong>打散</strong></p><p>出一个小题：你如何将三个数据（这三个数据都是可迭代对象类型的每一元素传给动态参数*args？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'alex'</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">tu1 = (<span class="string">'武sir'</span>, <span class="string">'太白'</span>, <span class="string">'女神'</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args) <span class="comment"># ('alex', [1, 2, 3, 4], ('武sir', '太白', '女神'))</span></span><br><span class="line">func(s1,l1,tu1)</span><br></pre></td></tr></table></figure><p>这样肯定是不行，他会将这个三个数据类型当成三个位置参数传给args，没有实现我的要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'alex'</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">tu1 = (<span class="string">'武sir'</span>, <span class="string">'太白'</span>, <span class="string">'女神'</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args) <span class="comment"># ('a', 'l', 'e', 'x', 1, 2, 3, 4, '武sir', '太白', '女神')</span></span><br><span class="line">func(*s1,*l1,*tu1)</span><br></pre></td></tr></table></figure><p>将位置参数的实参（可迭代类型）前面加上<em>，相当于将这些实参给拆解成一个一个的组成元素当成位置参数，然后传给args，所以在函数的执行时：\</em>，**起到的是打散的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">dic2 = &#123;<span class="string">'hobby'</span>: <span class="string">'喝茶'</span>, <span class="string">'sex'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(kwargs) <span class="comment"># &#123;'name': '太白', 'age': 18, 'hobby': '喝茶', 'sex': '男'&#125;</span></span><br><span class="line">func(**dic1,**dic2)</span><br></pre></td></tr></table></figure><h6 id="函数外"><a href="#函数外" class="headerlink" title="函数外"></a>函数外</h6><p>接收时聚合，传值时打散</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 之前讲过的分别赋值</span><br><span class="line">a,b = (1,2)</span><br><span class="line">print(a, b) # 1 2</span><br><span class="line"># 其实还可以这么用：</span><br><span class="line">a,*b = (1, 2, 3, 4,)</span><br><span class="line">print(a, b) # 1 [2, 3, 4]</span><br><span class="line">*rest,a,b = range(5)</span><br><span class="line">print(rest, a, b) # [0, 1, 2] 3 4</span><br><span class="line">print([1, 2, *[3, 4, 5]]) # [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><h5 id="仅限关键字参数"><a href="#仅限关键字参数" class="headerlink" title="仅限关键字参数"></a>仅限关键字参数</h5><p>他的位置要放在<em>args后面，*</em>kwargs前面（如果有**kwargs），也就是默认参数的位置，它与默认参数的前后顺序无所谓，它只接受关键字传的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,*args,c)</span>:</span></span><br><span class="line">print(a,b) <span class="comment"># 1 2</span></span><br><span class="line">print(args) <span class="comment"># (4, 5)</span></span><br><span class="line"><span class="comment"># 这样传参是错误的，因为仅限关键字参数c只接受关键字参数</span></span><br><span class="line"><span class="comment"># func(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,*args,c)</span>:</span></span><br><span class="line">print(a,b) <span class="comment"># 1 2</span></span><br><span class="line">print(args) <span class="comment"># (3, 4)</span></span><br><span class="line">print(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 这样就正确了：</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, c=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p> 这个仅限关键字参数从名字定义就可以看出他只能通过关键字参数传参，其实可以把它当成不设置默认值的默认参数而且必须要传参数，不传就报错。</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>内置命名空间–&gt; 存放python解释器为我们提供的名字, list, tuple, str, int这些都是内置命名空间</p><p>全局命名空间–&gt; 我们直接在py文件中, 函数外声明的变量都属于全局命名空间</p><p>局部命名空间–&gt; 在函数中声明的变量会放在局部命名空间</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209133542.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209133620.png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200209140957.png" alt></p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>全局作用域: 包含内置命名空间和全局命名空间. 在整个文件的任何位置都可以使用(遵循 从上到下逐⾏执行).</p><p>局部作用域: 在函数内部可以使用.</p><h5 id="两个内置函数"><a href="#两个内置函数" class="headerlink" title="两个内置函数"></a>两个内置函数</h5><p>globals(): 以字典的形式返回<strong>全局作用域</strong>所有的变量对应关系。</p><p>locals(): 以字典的形式返回<strong>当前作用域</strong>的变量的对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在全局作用域下打印，则他们获取的都是全局作用域的所有的内容。</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(globals())</span><br><span class="line">print(locals())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&#123;'__name__': '__main__', '__doc__': None, '__package__': None,</span></span><br><span class="line"><span class="string">'__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x000001806E50C0B8&gt;, </span></span><br><span class="line"><span class="string">'__spec__': None, '__annotations__': &#123;&#125;,</span></span><br><span class="line"><span class="string">'__builtins__': &lt;module 'builtins' (built-in)&gt;, </span></span><br><span class="line"><span class="string">'__file__': 'D:/lnh.python/py project/teaching_show/day09~day15/function.py',</span></span><br><span class="line"><span class="string">'__cached__': None, 'a': 2, 'b': 3&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在局部作用域中打印。</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    c = <span class="number">3</span></span><br><span class="line">    print(globals()) <span class="comment"># 和上面一样，还是全局作用域的内容</span></span><br><span class="line">    print(locals()) <span class="comment"># &#123;'c': 3&#125;</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h4 id="高阶函数-函数嵌套"><a href="#高阶函数-函数嵌套" class="headerlink" title="高阶函数(函数嵌套)"></a>高阶函数(函数嵌套)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例1：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    print(<span class="number">4</span>)</span><br><span class="line">func1()</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line">func2()</span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例2：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    func1()</span><br><span class="line">    print(<span class="number">4</span>)</span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line">func2()</span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 例3：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span> </span><br><span class="line">    print(<span class="number">2</span>) </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">()</span>:</span> </span><br><span class="line">        print(<span class="number">6</span>) </span><br><span class="line">    print(<span class="number">4</span>) </span><br><span class="line">    fun3() </span><br><span class="line">    print(<span class="number">8</span>)</span><br><span class="line">print(<span class="number">3</span>)</span><br><span class="line">fun2()</span><br><span class="line">print(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="global"><a href="#global" class="headerlink" title="global"></a>global</h5><p>global关键字有两个作用：</p><p>1，声明一个全局变量。</p><p>2，在局部作用域想要对全局作用域的全局变量进行修改时，需要用到 global(限于字符串，数字)</p><h5 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h5><p>nonlocal的总结：</p><p>1，不能更改全局变量。</p><p>2，在局部作用域中，对父级作用域（或者更外层作用域非全局作用域）的变量进行引用和修改，并且引用的哪层，从那层及以下此变量全部发生改变</p><h4 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h4><p>函数名指向的是这个函数的内存地址，其实深一步理解可得知，与其说函数名()可以执行这个函数，不如说是函数的内存地址()才是执行这个函数的关键</p><ul><li>函数名可以赋值给其他变量</li><li>函数名可以当做容器类的元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func1: 嘻嘻"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func2: 哈哈"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func3: 咯咯"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"in func4: 吱吱"</span>)</span><br><span class="line">lst = [func1, func2, func3, func4]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    i()</span><br></pre></td></tr></table></figure><ul><li>函数名可以当做函数的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(f)</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">func2(func1)</span><br></pre></td></tr></table></figure><ul><li>函数名可以当做函数的返回值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(f)</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">ret = func2(func1)</span><br><span class="line">ret()  <span class="comment"># ret, f, func1 都是指向的func1这个函数的内存地址</span></span><br></pre></td></tr></table></figure><p>函数名是一个特殊的变量，他除了具有变量的功能，还有最主要一个特点就是加上() 就执行，其实他还有一个学名叫<strong>第一类对象</strong></p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><h5 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h5><p>  从字面意思来说：可迭代对象就是一个可以重复取值的实实在在的东西。</p><p>  从专业角度来说：但凡内部含有<strong>iter</strong>方法的对象，都是可迭代对象。</p><p>  可迭代对象可以通过判断该对象是否有’<strong>iter</strong>’方法来判断。</p><h6 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h6><p>  可迭代对象的<strong>优点</strong>：</p><ul><li><p>可以直观的查看里面的数据。</p><p>可迭代对象的<strong>缺点</strong>：</p></li><li><p>占用内存。</p></li><li><p>可迭代对象不能迭代取值（除去索引，key以外</p></li></ul><p>即使抛去索引,key以外，这些我可以通过for循环进行取值呀！对，他们都可以通过for循环进行取值，其实for循环在底层做了一个转化，就是<strong>先将可迭代对象转化成迭代器</strong>，然后在进行取值的</p><h6 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h6><p><strong>dir()</strong>会返回一个列表，这个列表中含有该对象的以字符串的形式所有方法名。这样我们就可以判断python中的一个对象是不是可迭代对象了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'alex'</span></span><br><span class="line">i = <span class="number">100</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(i))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(s1))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h5 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h5><p>  从字面意思来说迭代器，是一个可以迭代取值的工具，器：在这里当做工具比较合适。</p><p>  从专业角度来说：迭代器是这样的对象：实现了无参数的<strong>next</strong>方法，返回序列中的下一个元素，如果没有元素了，那么抛出StopIteration异常.python中的迭代器还实现了<strong>iter</strong>方法，因此迭代器也可以迭代。 出自《流畅的python》</p><p> 简单来说：<strong>在python中，内部含有’<strong>Iter</strong>‘方法并且含有’<strong>next</strong>‘方法的对象就是迭代器。</strong></p><h6 id="判断-1"><a href="#判断-1" class="headerlink" title="判断"></a>判断</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">o1 = <span class="string">'alex'</span></span><br><span class="line">o2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">o3 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">o4 = &#123;<span class="string">'name'</span>: <span class="string">'太白'</span>,<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">o5 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">f = open(<span class="string">'file'</span>,encoding=<span class="string">'utf-8'</span>, mode=<span class="string">'w'</span>)</span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o1))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o2))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o3))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o4))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(o5))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'__iter__'</span> <span class="keyword">in</span> dir(f))  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># hsagn</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o1))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o2))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o3))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o4))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(o5))  <span class="comment"># False</span></span><br><span class="line">print(<span class="string">'__next__'</span> <span class="keyword">in</span> dir(f))  <span class="comment"># True</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>之前我们学过的这些对象，只有文件句柄是迭代器，剩下的那些数据类型都是可迭代对象。</p><h6 id="迭代器取值"><a href="#迭代器取值" class="headerlink" title="迭代器取值"></a>迭代器取值</h6><p>取值之前仅是保存了那些地址</p><p>  可迭代对象是不可以一直迭代取值的（除去用索引，切片以及Key），但是转化成迭代器就可以了，迭代器是利用<strong>next</strong>()进行取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,]</span><br><span class="line">obj = l1.__iter__()  <span class="comment"># 或者 iter(l1)</span></span><br><span class="line"><span class="comment"># print(obj)  # &lt;list_iterator object at 0x000002057FE1A3C8&gt;</span></span><br><span class="line">ret = obj.__next__()</span><br><span class="line">print(ret)</span><br><span class="line">ret = obj.__next__()</span><br><span class="line">print(ret)</span><br><span class="line">ret = obj.__next__()</span><br><span class="line">print(ret)</span><br><span class="line">ret = obj.__next__()  <span class="comment"># StopIteration</span></span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 迭代器利用next取值：一个next取对应的一个值，如果迭代器里面的值取完了，还要next，</span></span><br><span class="line"><span class="comment"># 那么就报StopIteration的错误。</span></span><br></pre></td></tr></table></figure><h6 id="while模拟for"><a href="#while模拟for" class="headerlink" title="while模拟for"></a>while模拟for</h6><p>for循环的内部机制是：将可迭代对象转换成迭代器，然后利用next进行取值，最后利用异常处理处理StopIteration抛出的异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 1 将可迭代对象转化成迭代器</span></span><br><span class="line">obj = iter(l1)</span><br><span class="line"><span class="comment"># 2,利用while循环，next进行取值</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 3,利用异常处理终止循环</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(obj))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h6 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h6><p>​    迭代器的<strong>优点</strong>：</p><p>​        节省内存。<br>​          迭代器在内存中相当于只占一个数据的空间：因为每次取值都上一条数据会在内存释放，加载当前的此条数据。</p><p>​        惰性机制。<br>​          next一次，取一个值，绝不过多取值。​</p><p>​    迭代器的<strong>缺点</strong>：</p><p>​      不能直观的查看里面的数据。</p><p>​      取值时不走回头路，只能一直向下取值。</p><h5 id="可迭代对象转化成迭代器"><a href="#可迭代对象转化成迭代器" class="headerlink" title="可迭代对象转化成迭代器"></a>可迭代对象转化成迭代器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">obj = l1.__iter__() </span><br><span class="line"><span class="comment"># 或者 iter(l1)</span></span><br><span class="line"><span class="comment"># &lt;list_iterator object at 0x000002057FE1A3C8&gt;</span></span><br></pre></td></tr></table></figure><h5 id="迭代器与可迭代对象对比"><a href="#迭代器与可迭代对象对比" class="headerlink" title="迭代器与可迭代对象对比"></a>迭代器与可迭代对象对比</h5><p> <strong>可迭代对象：</strong></p><p>  是一个私有的方法比较多，操作灵活（比如列表，字典的增删改查，字符串的常用操作方法等）,比较直观，但是占用内存，而且不能直接通过循环迭代取值的这么一个数据集。</p><p>  <strong>应用</strong>：当你侧重于对于数据可以灵活处理，并且内存空间足够，将数据集设置为可迭代对象是明确的选择。</p><p>  <strong>迭代器：</strong></p><p>  是一个非常节省内存，可以记录取值位置，可以直接通过循环+next方法取值，但是不直观，操作方法比较单一的数据集。</p><p>  <strong>应用</strong>：当你的数据量过大，大到足以撑爆你的内存或者你以节省内存为首选因素时，将数据集设置为迭代器是一个不错的选择。（可参考为什么python把文件句柄设置成迭代器）。</p><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>什么是生成器？各种文献都有不同的理解，但是核心基本相同。生成器的本质就是迭代器，在python社区中，大多数时候都把迭代器和生成器是做同一个概念。生成器和迭代器也有不同，唯一的不同就是：迭代器都是Python给你提供的已经写好的工具或者通过数据转化得来的，（比如文件句柄，iter([1,2,3])。<strong>生成器是需要我们自己用python代码构建的工具</strong>。最大的区别也就如此了</p><h5 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h5><p>通过生成器函数</p><p>通过生成器推导式</p><p>python内置函数或者模块提供</p><p>（其实1,3两种本质上差不多，只不过1是自己写的生成器函数，3是python提供的生成器函数而已）</p><h5 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span></span><br><span class="line">ret = func()</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 运行结果:</span></span><br><span class="line">&lt;generator object func at <span class="number">0x000001A575163888</span>&gt;</span><br></pre></td></tr></table></figure><p>由于函数中存在yield,那么这个函数就是一个生成器函数.</p><p>我们在执行这个函数的时候.就不再是函数的执行了.而是获取这个生成器对象，那么生成器对象如何取值呢？</p><p>生成器的本质就是迭代器。所以我们可以直接执行<strong>next</strong>()来执行以下生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">     print(<span class="string">"111"</span>)</span><br><span class="line">     <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">gener = func() <span class="comment"># 这个时候函数不会执⾏. ⽽是获取到⽣成器</span></span><br><span class="line">ret = gener.__next__() <span class="comment"># 这个时候函数才会执⾏</span></span><br><span class="line">print(ret)  <span class="comment"># 并且yield会将func生产出来的数据 222 给了 ret</span></span><br></pre></td></tr></table></figure><p>当程序运行完最后一个yield,那么后面继续运行<strong>next</strong>()程序会报错，一个yield对应一个next，next超过yield数量，就会报错，与迭代器一样。</p><h5 id="yield与return的区别"><a href="#yield与return的区别" class="headerlink" title="yield与return的区别"></a>yield与return的区别</h5><p>​    return一般在函数中只设置一个，他的作用是终止函数，并且给函数的执行者返回值。</p><p>​    yield在生成器函数中可设置多个，他并不会终止函数，next会获取对应yield生成的元素。</p><p><strong>举例：</strong></p><p>我们来看一下这个需求：老男孩向楼下卖包子的老板订购了10000个包子.包子铺老板非常实在，一下就全部都做出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span>:</span></span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        lst.append(<span class="string">'包子'</span>+str(i))</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line">e = eat()</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>这样做没有问题，但是我们由于学生没有那么多，只吃了2000个左右，剩下的8000个，就只能占着一定的空间，放在一边了。如果包子铺老板效率够高，我吃一个包子，你做一个包子，那么这就不会占用太多空间存储了，完美。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'包子'</span>+str(i)</span><br><span class="line">e = eat()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    next(e)</span><br></pre></td></tr></table></figure><p><strong>这两者的区别:</strong></p><p>  第一种是直接把包子全部做出来，占用内存。</p><p>  第二种是吃一个生产一个，非常的节省内存，而且还可以保留上次的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'包子'</span>+str(i)</span><br><span class="line">e = eat()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    next(e)    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</span><br><span class="line">    next(e)</span><br><span class="line"><span class="comment"># 多次next包子的号码是按照顺序记录的。</span></span><br></pre></td></tr></table></figure><h5 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h5><p>可以直接把可迭代对象中的每一个数据作为生成器的结果进行返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对比yield 与 yield from </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    lst = [<span class="string">'卫龙'</span>,<span class="string">'老冰棍'</span>,<span class="string">'北冰洋'</span>,<span class="string">'牛羊配'</span>]</span><br><span class="line">    <span class="keyword">yield</span> lst</span><br><span class="line">g = func()</span><br><span class="line">print(g)</span><br><span class="line">print(next(g))  <span class="comment"># 只是返回一个列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    lst = [<span class="string">'卫龙'</span>,<span class="string">'老冰棍'</span>,<span class="string">'北冰洋'</span>,<span class="string">'牛羊配'</span>]</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> lst</span><br><span class="line">g = func()</span><br><span class="line">print(g)</span><br><span class="line"><span class="comment"># 他会将这个可迭代对象(列表)的每个元素当成迭代器的每个结果进行返回。</span></span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">yield from ['卫龙','老冰棍','北冰洋','牛羊配'] </span></span><br><span class="line"><span class="string">等同于：</span></span><br><span class="line"><span class="string">    yield '卫龙'</span></span><br><span class="line"><span class="string">    yield '老冰棍'</span></span><br><span class="line"><span class="string">    yield '北冰洋'</span></span><br><span class="line"><span class="string">    yield '牛羊配'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>两个yield from不会交替输出，而会先打印完第一个，在打印第二个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    lst1 = [<span class="string">'卫龙'</span>,<span class="string">'老冰棍'</span>,<span class="string">'北冰洋'</span>,<span class="string">'牛羊配'</span>]</span><br><span class="line">    lst2 = [<span class="string">'馒头'</span>,<span class="string">'花卷'</span>,<span class="string">'豆包'</span>,<span class="string">'大饼'</span>]</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> lst1</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> lst2</span><br><span class="line">    </span><br><span class="line">g = func()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h5 id="send方法-补充"><a href="#send方法-补充" class="headerlink" title="send方法(补充)"></a>send方法(补充)</h5><p><strong>send和next()区别:</strong></p><p>​    相同点：</p><p>​      send 和 next()都可以让生成器对应的yield向下执行一次。</p><p>​      都可以获取到yield生成的值。</p><p>​    不同点：</p><p>​      第一次获取yield值只能用next不能用send（可以用send(None)）。</p><p>​      send可以给上一个yield置传递值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># next只能获取yield生成的值，但是不能传递值。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> ready to eat'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;name&#125;</span> start to eat <span class="subst">&#123;food&#125;</span>'</span>)</span><br><span class="line">dog = gen(<span class="string">'alex'</span>)</span><br><span class="line">next(dog)</span><br><span class="line">next(dog)</span><br><span class="line">next(dog)</span><br><span class="line"><span class="comment"># 而使用send这个方法是可以的。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> ready to eat'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;name&#125;</span> start to eat <span class="subst">&#123;food&#125;</span>'</span>)</span><br><span class="line">dog = gen(<span class="string">'alex'</span>)</span><br><span class="line">next(dog)  <span class="comment"># 第一次必须用next让指针停留在第一个yield后面</span></span><br><span class="line"><span class="comment"># 与next一样，可以获取到yield的值</span></span><br><span class="line">ret = dog.send(<span class="string">'骨头'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> ready to eat'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;name&#125;</span> start to eat <span class="subst">&#123;food&#125;</span>'</span>)</span><br><span class="line">dog = gen(<span class="string">'alex'</span>)</span><br><span class="line">next(dog)</span><br><span class="line"><span class="comment"># 还可以给上一个yield发送值</span></span><br><span class="line">dog.send(<span class="string">'骨头'</span>)</span><br><span class="line">dog.send(<span class="string">'狗粮'</span>)</span><br><span class="line">dog.send(<span class="string">'香肠'</span>)</span><br></pre></td></tr></table></figure><h5 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h5><p>形式上仅是将列表生成式的[]改为()</p><p>生成器表达式和列表推导式的区别:</p><ul><li>列表推导式比较耗内存,所有数据一次性加载到内存。而.生成器表达式遵循迭代器协议，逐个产生元素。</li><li>得到的值不一样,列表推导式得到的是一个列表.生成器表达式获取的是一个生成器</li><li>列表推导式一目了然，生成器表达式只是一个内存地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> gen:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p><a href="https://www.processon.com/view/link/5b4ee15be4b0edb750de96ac#map" target="_blank" rel="noopener">思维导图</a></p><p>函数就是以功能为导向，一个函数封装一个功能，那么Python将一些常用的功能（比如len）给我们封装成了一个一个的函数，供我们使用，他们不仅效率高（底层都是用C语言写的），而且是拿来即用，避免重复早轮子，那么这些函数就称为内置函数，到目前为止python给我们提供的内置函数一共是68个</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/pythonBasic/20200210104550.png" alt></p><h5 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h5><p>all：可迭代对象中，全都是True才是True</p><p>any：可迭代对象中，有一个True 就是True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># all  可迭代对象中，全都是True才是True</span></span><br><span class="line"><span class="comment"># any  可迭代对象中，有一个True 就是True</span></span><br><span class="line">print(all([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">True</span>,<span class="number">0</span>]))</span><br><span class="line">print(any([<span class="number">1</span>,<span class="string">''</span>,<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>bytes：用于不同编码之间的转化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'你好'</span></span><br><span class="line">bs = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line">s1 = bs.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(s1)</span><br><span class="line">bs = bytes(s,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line">b = <span class="string">'你好'</span>.encode(<span class="string">'gbk'</span>)</span><br><span class="line">b1 = b.decode(<span class="string">'gbk'</span>)</span><br><span class="line">print(b1.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>ord:输入字符找该字符编码的位置</p><p>chr:输入位置数字找出其对应的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ord 输入字符找该字符编码的位置</span></span><br><span class="line">print(ord(<span class="string">'a'</span>))</span><br><span class="line">print(ord(<span class="string">'中'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># chr 输入位置数字找出其对应的字符</span></span><br><span class="line">print(chr(<span class="number">97</span>))</span><br><span class="line">print(chr(<span class="number">20013</span>))</span><br></pre></td></tr></table></figure><p>repr:返回一个对象的string形式（原形毕露）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %r  原封不动的写出来</span></span><br><span class="line">name = <span class="string">'taibai'</span></span><br><span class="line">print(<span class="string">'我叫%r'</span>%name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># repr 原形毕露</span></span><br><span class="line">print(repr(<span class="string">'&#123;"name":"alex"&#125;'</span>))</span><br><span class="line">print(<span class="string">'&#123;"name":"alex"&#125;'</span>)</span><br></pre></td></tr></table></figure><p>eval：执行字符串类型的代码，并返回最终结果。</p><p>exec:执行字符串类型的代码。</p><p>用于网络上数据处理时易出现安全分险</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">'2 + 2'</span>)  <span class="comment"># 4</span></span><br><span class="line">n=<span class="number">81</span></span><br><span class="line">eval(<span class="string">"n + 4"</span>)  <span class="comment"># 85</span></span><br><span class="line">eval(<span class="string">'print(666)'</span>)  <span class="comment"># 666</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'''</span></span><br><span class="line"><span class="string">for i in [1,2,3]:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">exec(s)</span><br></pre></td></tr></table></figure><p>hash：获取一个对象（可哈希对象：int，str，Bool，tuple）的哈希值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">print(hash(<span class="number">12322</span>))</span><br><span class="line">print(hash(<span class="string">'123'</span>))</span><br><span class="line">print(hash(<span class="string">'arg'</span>))</span><br><span class="line">print(hash(<span class="string">'alex'</span>))</span><br><span class="line">print(hash(<span class="literal">True</span>))</span><br><span class="line">print(hash(<span class="literal">False</span>))</span><br><span class="line">print(hash((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">-2996001552409009098</span></span><br><span class="line"><span class="string">-4637515981888139739</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2528502973977326415</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>help：函数用于查看函数或模块用途的详细说明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(help(list))</span><br><span class="line">print(help(str.split))</span><br></pre></td></tr></table></figure><p><strong>callable</strong>：函数用于检查一个对象是否是可调用的。如果返回True，object仍然可能调用失败；但如果返回False，调用对象ojbect绝对不会成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'alex'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(callable(name))  <span class="comment"># False</span></span><br><span class="line">print(callable(func))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>int：函数用于将一个字符串或数字(取整)转换为整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(int())  <span class="comment"># 0</span></span><br><span class="line">print(int(<span class="string">'12'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(int(<span class="number">3.6</span>))  <span class="comment"># 3</span></span><br><span class="line">print(int(<span class="string">'0100'</span>,base=<span class="number">2</span>))  <span class="comment"># 将2进制的 0100 转化成十进制。结果为 4</span></span><br></pre></td></tr></table></figure><p>float：函数用于将整数和字符串转换成浮点数。</p><p>complex：函数用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(float(<span class="number">3</span>))  <span class="comment"># 3.0</span></span><br><span class="line">print(complex(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment"># (1+2j)</span></span><br></pre></td></tr></table></figure><p>bin：将十进制转换成二进制并返回。</p><p>oct：将十进制转化成八进制字符串并返回。</p><p>hex：将十进制转化成十六进制字符串并返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(bin(<span class="number">10</span>),type(bin(<span class="number">10</span>)))  <span class="comment"># 0b1010 &lt;class 'str'&gt;</span></span><br><span class="line">print(oct(<span class="number">10</span>),type(oct(<span class="number">10</span>)))  <span class="comment"># 0o12 &lt;class 'str'&gt;</span></span><br><span class="line">print(hex(<span class="number">10</span>),type(hex(<span class="number">10</span>)))  <span class="comment"># 0xa &lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure><p>divmod：计算除数与被除数的结果，返回一个包含商和余数的元组(a // b, a % b)。</p><p>round：保留浮点数的小数位数，默认保留整数。</p><p>pow：求x<strong>y次幂。（三个参数为x</strong>y的结果对z取余）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(divmod(<span class="number">7</span>,<span class="number">2</span>))  <span class="comment"># (3, 1)</span></span><br><span class="line">print(round(<span class="number">7</span>/<span class="number">3</span>,<span class="number">2</span>))  <span class="comment"># 2.33</span></span><br><span class="line">print(round(<span class="number">7</span>/<span class="number">3</span>))  <span class="comment"># 2</span></span><br><span class="line">print(round(<span class="number">3.32567</span>,<span class="number">3</span>))  <span class="comment"># 3.326</span></span><br><span class="line">print(pow(<span class="number">2</span>,<span class="number">3</span>))  <span class="comment"># 两个参数为2**3次幂</span></span><br><span class="line">print(pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>))  <span class="comment"># 三个参数为2**3次幂，对3取余。</span></span><br></pre></td></tr></table></figure><h5 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h5><p><strong>print() 屏幕输出。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''' 源码分析</span></span><br><span class="line"><span class="string">def print(self, *args, sep=' ', end='\n', file=None): # known special case of print</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="string">    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)</span></span><br><span class="line"><span class="string">    file:  默认是输出到屏幕，如果设置为文件句柄，输出到文件</span></span><br><span class="line"><span class="string">    sep:   打印多个值之间的分隔符，默认为空格</span></span><br><span class="line"><span class="string">    end:   每一次打印的结尾，默认为换行符</span></span><br><span class="line"><span class="string">    flush: 立即把内容输出到流文件，不作缓存</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,sep=<span class="string">'*'</span>)  <span class="comment"># 111*222*333</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">111</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="number">222</span>)  <span class="comment">#两行的结果 111222</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'log'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(<span class="string">'写入文件'</span>,fle=f,flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>int():pass</strong></p><p><strong>str():pass</strong></p><p><strong>bool():pass</strong></p><p><strong>set(): pass</strong></p><p><strong>list() 将一个可迭代对象转换成列表</strong></p><p><strong>tuple() 将一个可迭代对象转换成元组</strong></p><p><strong>dict() 通过相应的方式创建字典。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list</span><br><span class="line">l1 = list(<span class="string">'abcd'</span>)</span><br><span class="line">print(l1)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br><span class="line">tu1 = tuple(<span class="string">'abcd'</span>)</span><br><span class="line">print(tu1)  <span class="comment"># ('a', 'b', 'c', 'd')</span></span><br></pre></td></tr></table></figure><p><strong>abs() 返回绝对值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">-5</span></span><br><span class="line">print(abs(i))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p><strong>sum() 求和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">print(sum((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><strong>min() 求最小值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(min([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))  <span class="comment"># 返回此序列最小值</span></span><br><span class="line">ret = min([<span class="number">1</span>,<span class="number">2</span>,<span class="number">-5</span>,],key=abs)  <span class="comment"># 按照绝对值的大小，返回此序列最小值</span></span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 加key是可以加函数名，min自动会获取传入函数中的参数的每个元素，然后通过你设定的返回值比较大小，</span></span><br><span class="line"><span class="comment"># 返回最小的传入的那个参数。</span></span><br><span class="line">print(min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">-5</span>,<span class="number">6</span>,<span class="number">-3</span>,key=<span class="keyword">lambda</span> x:abs(x)))  <span class="comment"># 可以设置很多参数比较大小</span></span><br><span class="line">dic = &#123;<span class="string">'a'</span>:<span class="number">3</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">1</span>&#125;</span><br><span class="line">print(min(dic,key=<span class="keyword">lambda</span> x:dic[x]))</span><br><span class="line"><span class="comment"># x为dic的key，lambda的返回值（即dic的值进行比较）返回最小的值对应的键</span></span><br></pre></td></tr></table></figure><p><strong>max() 最大值与最小值用法相同。</strong></p><p><strong>reversed() 将一个序列翻转, 返回翻转序列的迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = reversed(<span class="string">'你好'</span>)  <span class="comment"># l 获取到的是一个生成器</span></span><br><span class="line">print(list(l))</span><br><span class="line">ret = reversed([<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line">print(list(ret))  <span class="comment"># [9, 7, 3, 4, 1]</span></span><br></pre></td></tr></table></figure><p><strong>bytes() 把字符串转换成bytes类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'你好太白'</span></span><br><span class="line">bs = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line"><span class="comment"># 结果:b'\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7'</span></span><br><span class="line">s1 = bs.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># 结果: 你好太白</span></span><br><span class="line">s = <span class="string">'你好'</span></span><br><span class="line">bs = bytes(s,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs)</span><br><span class="line"><span class="comment"># 将字符串转换成字节</span></span><br><span class="line">bs1 = str(bs,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(bs1)</span><br><span class="line"><span class="comment"># 将字节转换成字符串</span></span><br></pre></td></tr></table></figure><p><strong>zip() 拉链方法。</strong>函数用于将可迭代的对象作为参数,将对象中对应的元素打包成一个个元组,</p><p>然后返回由这些元祖组成的内容,如果各个迭代器的元素个数不一致,则按照长度最短的返回，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line">lst3 = (<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(lst1,lst2,lst3):</span><br><span class="line">    print(i)</span><br><span class="line">结果:</span><br><span class="line">(<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">11</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'b'</span>, <span class="number">12</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'c'</span>, <span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><strong>sorted</strong>排序函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:sorted(iterable,key=None,reverse=False)</span></span><br><span class="line"><span class="comment"># iterable : 可迭代对象</span></span><br><span class="line"><span class="comment"># key: 排序规则(排序函数),在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数.</span></span><br><span class="line"><span class="comment">#      根据函数运算的结果进行排序</span></span><br><span class="line"><span class="comment"># reverse :是否是倒叙,True 倒叙 False 正序</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">lst2 = sorted(lst)</span><br><span class="line">print(lst)    <span class="comment">#原列表不会改变</span></span><br><span class="line">print(lst2)   <span class="comment">#返回的新列表是经过排序的  </span></span><br><span class="line">lst3 = sorted(lst,reverse=<span class="literal">True</span>)</span><br><span class="line">print(lst3)   <span class="comment">#倒叙 </span></span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 字典使用sorted排序</span></span><br><span class="line">dic = &#123;<span class="number">1</span>:<span class="string">'a'</span>,<span class="number">3</span>:<span class="string">'c'</span>,<span class="number">2</span>:<span class="string">'b'</span>&#125;</span><br><span class="line">print(sorted(dic))   <span class="comment"># 字典排序返回的就是排序后的key </span></span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 和函数组合使用</span></span><br><span class="line"><span class="comment"># 定义一个列表,然后根据一元素的长度排序</span></span><br><span class="line">lst = [<span class="string">'天龙八部'</span>,<span class="string">'西游记'</span>,<span class="string">'红楼梦'</span>,<span class="string">'三国演义'</span>] </span><br><span class="line"><span class="comment"># 计算字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(s)</span><br><span class="line">print(sorted(lst,key=func)) </span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line"><span class="comment"># ['西游记', '红楼梦', '天龙八部', '三国演义']</span></span><br><span class="line">和<span class="keyword">lambda</span>组合使用</span><br><span class="line">lst = [<span class="string">'天龙八部'</span>,<span class="string">'西游记'</span>,<span class="string">'红楼梦'</span>,<span class="string">'三国演义'</span>] </span><br><span class="line">print(sorted(lst,key=<span class="keyword">lambda</span> s:len(s))) </span><br><span class="line">结果:</span><br><span class="line">[<span class="string">'西游记'</span>, <span class="string">'红楼梦'</span>, <span class="string">'天龙八部'</span>, <span class="string">'三国演义'</span>]  </span><br><span class="line">lst = [&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'alex'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'id'</span>:<span class="number">2</span>,<span class="string">'name'</span>:<span class="string">'wusir'</span>,<span class="string">'age'</span>:<span class="number">17</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'id'</span>:<span class="number">3</span>,<span class="string">'name'</span>:<span class="string">'taibai'</span>,<span class="string">'age'</span>:<span class="number">16</span>&#125;,] </span><br><span class="line"><span class="comment"># 按照年龄对学生信息进行排序 </span></span><br><span class="line">print(sorted(lst,key=<span class="keyword">lambda</span> e:e[<span class="string">'age'</span>])) </span><br><span class="line">结果:</span><br><span class="line">[&#123;<span class="string">'id'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'taibai'</span>, <span class="string">'age'</span>: <span class="number">16</span>&#125;, \</span><br><span class="line">&#123;<span class="string">'id'</span>: <span class="number">2</span>, <span class="string">'name'</span>: <span class="string">'wusir'</span>, <span class="string">'age'</span>: <span class="number">17</span>&#125;, &#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;]</span><br></pre></td></tr></table></figure><p><strong>filter</strong>筛选过滤</p><p>类似于各种推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: filter(function,iterable)</span></span><br><span class="line"><span class="comment"># function: 用来筛选的函数,在filter中会自动的把iterable中的元素传递给function,</span></span><br><span class="line"><span class="comment"># 然后根据function返回的True或者False来判断是否保留此项数据</span></span><br><span class="line">iterable:可迭代对象</span><br><span class="line">lst = [&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'alex'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'wusir'</span>,<span class="string">'age'</span>:<span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'name'</span>:<span class="string">'taibai'</span>,<span class="string">'age'</span>:<span class="number">16</span>&#125;,] </span><br><span class="line">ls = filter(<span class="keyword">lambda</span> e:e[<span class="string">'age'</span>] &gt; <span class="number">16</span>,lst) </span><br><span class="line">print(list(ls)) </span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;,</span><br><span class="line"> &#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'wusir'</span>, <span class="string">'age'</span>: <span class="number">17</span>&#125;]</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 映射函数</span></span><br><span class="line"><span class="comment"># 语法: map(function,iterable) 可以对可迭代对象中的每一个元素进映射,分别取执行function,返回一个迭代器</span></span><br><span class="line"><span class="comment"># 计算列表中每个元素的平方,返回新列表</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  s*s</span><br><span class="line">mp = map(func,lst)</span><br><span class="line">print(mp)</span><br><span class="line">print(list(mp))</span><br><span class="line"><span class="comment"># 改写成lambda</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> s:s*s,lst)))</span><br><span class="line"><span class="comment"># 计算两个列表中相同位置的数据的和</span></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">lst2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line">print(list(map(<span class="keyword">lambda</span> x, y: x+y, lst1, lst2)))</span><br><span class="line"><span class="comment"># 结果:</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure><p><img src="http://crm.pythonav.com/media/uploads/2019/04/12/IMAGE-20190412120136-9.GIF" alt="img"><strong>reduce</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="comment"># reduce 的使用方式:</span></span><br><span class="line"><span class="comment"># reduce(函数名,可迭代对象)  # 这两个参数必须都要有,缺一个不行</span></span><br><span class="line">ret = reduce(func,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line">print(ret)  <span class="comment"># 结果 25</span></span><br><span class="line"><span class="comment"># reduce的作用是先把列表中的前俩个元素取出计算出一个值然后临时保存着,</span></span><br><span class="line"><span class="comment"># 接下来用这个临时保存的值和列表中第三个元素进行计算,求出一个新的值将最开始</span></span><br><span class="line"><span class="comment"># 临时保存的值覆盖掉,然后在用这个新的临时值和列表中第四个元素计算.依次类推</span></span><br><span class="line"><span class="comment"># 注意:我们放进去的可迭代对象没有更改</span></span><br><span class="line"><span class="comment"># 以上这个例子我们使用sum就可以完全的实现了.我现在有[1,2,3,4]想让列表中的数变成1234,就要用到reduce了.</span></span><br><span class="line"><span class="comment"># 普通函数版</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">l = reduce(func,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 匿名函数版</span></span><br><span class="line">l = reduce(<span class="keyword">lambda</span> x,y:x*<span class="number">10</span>+y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 在Python2.x版本中recude是直接 import就可以的, Python3.x版本中需要从functools这个包中导入</span></span><br><span class="line"><span class="comment"># 龟叔本打算将 lambda 和 reduce 都从全局名字空间都移除, 舆论说龟叔不喜欢lambda 和 reduce</span></span><br><span class="line"><span class="comment"># 最后lambda没删除是因为和一个人写信写了好多封,进行交流然后把lambda保住了.</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>匿名函数 lambda，顾名思义就是没有名字的函数，也叫一句话函数。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>　　<strong>函数名 = lambda 参数:返回值(对参数的简单处理)</strong></p><p>  1）此函数不是没有名字，他是有名字的，他的名字就是你给其设置的变量，比如func.</p><p>  2）lambda 是定义匿名函数的关键字，相当于函数的def.</p><p>  3）lambda 后面直接加形参，形参加多少都可以，只要用逗号隔开就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> a,b,*args,sex= <span class="string">'alex'</span>,c,**kwargs: kwargs</span><br><span class="line">print(func(<span class="number">3</span>, <span class="number">4</span>,c=<span class="number">666</span>,name=<span class="string">'alex'</span>))  <span class="comment"># &#123;'name': 'alex'&#125;</span></span><br><span class="line"><span class="comment"># 所有类型的形参都可以加，但是一般使用匿名函数只是加位置参数，其他的用不到。</span></span><br></pre></td></tr></table></figure><p>  4）返回值在冒号之后设置，返回值和正常的函数一样,可以是任意数据类型。</p><p>  5）匿名函数不管多复杂.只能写一行.且逻辑结束后直接返回数据</p><h5 id="小题"><a href="#小题" class="headerlink" title="小题"></a>小题</h5><p>写匿名函数：接收一个可切片的数据，返回索引为0与2的对应的元素（元组形式）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func = lambda x:(x[0],x[2])</span><br><span class="line">print(func(&apos;afafasd&apos;))</span><br></pre></td></tr></table></figure><p>写匿名函数：接收两个int参数，将较大的数据返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func = lambda x,y: x if x &gt; y else y</span><br><span class="line">print(func(3,100))</span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    series = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = sum(series)</span><br><span class="line">        <span class="keyword">return</span> total/len(series)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line"></span><br><span class="line">avg = make_averager()</span><br><span class="line">print(avg(<span class="number">100000</span>))</span><br><span class="line">print(avg(<span class="number">110000</span>))</span><br><span class="line">print(avg(<span class="number">120000</span>))</span><br></pre></td></tr></table></figure><p><strong>大家仔细看一下这个代码，我是在函数中嵌套了一个函数。那么avg 这个变量接收的实际是averager函数名，也就是其对应的内存地址，我执行了三次avg 也就是执行了三次averager这个函数。那么此时你们有什么问题？</strong></p><p>肯定有学生就会问，那么我的make_averager这个函数只是执行了一次，为什么series这个列表没有消失？反而还可以被调用三次呢？这个就是最关键的地方，也是闭包的精华所在。我给大家说一下这个原理，以图为证：</p><p><img src="http://crm.pythonav.com/media/uploads/2019/04/12/IMAGE.PNG" alt="img"></p><p>  上面被红色方框框起来的区域就是闭包，被蓝色圈起来的那个变量应该是make_averager()函数的局部变量，它应该是随着make_averager()函数的执行结束之后而消失。但是他没有，是因为此区域形成了闭包，series变量就变成了一个叫<strong>自由变量</strong>的东西，averager函数的作用域会延伸到包含自由变量series的绑定。也就是说，每次我调用avg对应的averager函数 时，都可以引用到这个自用变量series，这个就是闭包。</p><h5 id="闭包的定义："><a href="#闭包的定义：" class="headerlink" title="闭包的定义："></a>闭包的定义：</h5><ol><li><p>闭包是嵌套在函数中的函数。</p></li><li><p>闭包必须是内层函数对外层函数的变量（非全局变量）的引用。</p></li></ol><h5 id="判断-2"><a href="#判断-2" class="headerlink" title="判断"></a>判断</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例一：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">ret = wrapper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例二：</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">ret = wrapper()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例三：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(a)</span><br><span class="line">        print(b)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">ret = wrapper(a,b)</span><br></pre></td></tr></table></figure><p>以上三个例子，最难判断的是第三个，其实第三个也是闭包，如果我们每次去研究代码判断其是不是闭包，有一些不科学，或者过于麻烦了，那么有一些函数的属性是可以获取到此函数是否拥有自由变量的，如果此函数拥有自由变量，那么就可以侧面证明其是否是闭包函数了（<strong>了解</strong>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    series = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = sum(series)</span><br><span class="line">        <span class="keyword">return</span> total/len(series)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line">avg = make_averager()</span><br><span class="line"><span class="comment"># 函数名.__code__.co_freevars 查看函数的自由变量</span></span><br><span class="line">print(avg.__code__.co_freevars)  <span class="comment"># ('series',)</span></span><br><span class="line">当然还有一些参数，仅供了解：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名.__code__.co_freevars 查看函数的自由变量</span></span><br><span class="line">print(avg.__code__.co_freevars)  <span class="comment"># ('series',)</span></span><br><span class="line"><span class="comment"># 函数名.__code__.co_varnames 查看函数的局部变量</span></span><br><span class="line">print(avg.__code__.co_varnames)  <span class="comment"># ('new_value', 'total')</span></span><br><span class="line"><span class="comment"># 函数名.__closure__ 获取具体的自由变量对象，也就是cell对象。</span></span><br><span class="line"><span class="comment"># (&lt;cell at 0x0000020070CB7618: int object at 0x000000005CA08090&gt;,)</span></span><br><span class="line"><span class="comment"># cell_contents 自由变量具体的值</span></span><br><span class="line">print(avg.__closure__[<span class="number">0</span>].cell_contents)  <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>保存局部信息不被销毁，保证数据的安全性。</p><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ol><li>可以保存一些非全局变量但是不易被销毁、改变的数据。</li><li>装饰器</li></ol><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><h5 id="开发封闭原则"><a href="#开发封闭原则" class="headerlink" title="开发封闭原则"></a>开发封闭原则</h5><p>  1.对扩展是开放的</p><p>​    我们说，任何一个程序，不可能在设计之初就已经想好了所有的功能并且未来不做任何更新和修改。所以我们必须允许代码扩展、添加新功能。</p><p>  2.对修改是封闭的</p><p>​    就像我们刚刚提到的，因为我们写的一个函数，很有可能已经交付给其他人使用了，如果这个时候我们对函数内部进行修改，或者修改了函数的调用方式，很有可能影响其他已经在使用该函数的用户。OK，理解了开封封闭原则之后，我们聊聊装饰器。</p><p><strong>所以装饰器最终最完美的定义就是：在不改变原被装饰的函数的源代码以及调用方式下，为其添加额外的功能。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常识&quot;&gt;&lt;a href=&quot;#常识&quot; class=&quot;headerlink&quot; title=&quot;常识&quot;&gt;&lt;/a&gt;常识&lt;/h3&gt;&lt;h4 id=&quot;计算机基本组件&quot;&gt;&lt;a href=&quot;#计算机基本组件&quot; class=&quot;headerlink&quot; title=&quot;计算机基本组件&quot;&gt;&lt;/a&gt;计算机基本组件&lt;/h4&gt;&lt;h5 id=&quot;cpu&quot;&gt;&lt;a href=&quot;#cpu&quot; class=&quot;headerlink&quot; title=&quot;cpu&quot;&gt;&lt;/a&gt;cpu&lt;/h5&gt;&lt;p&gt;计算机的运算和计算中心&lt;/p&gt;
&lt;p&gt;人类一秒，可以运行10亿条指令，比内存快百度，硬盘快百万倍&lt;/p&gt;
&lt;h5 id=&quot;内存&quot;&gt;&lt;a href=&quot;#内存&quot; class=&quot;headerlink&quot; title=&quot;内存&quot;&gt;&lt;/a&gt;内存&lt;/h5&gt;&lt;p&gt;暂时存储数据，临时加载数据应用程序，分为RAM，ROM&lt;/p&gt;
&lt;h5 id=&quot;硬盘&quot;&gt;&lt;a href=&quot;#硬盘&quot; class=&quot;headerlink&quot; title=&quot;硬盘&quot;&gt;&lt;/a&gt;硬盘&lt;/h5&gt;&lt;p&gt;长期存储数据&lt;/p&gt;
&lt;h5 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h5&gt;&lt;p&gt;一个软件，连接计算机的硬件与所有软件之间的一个软件&lt;/p&gt;
&lt;h4 id=&quot;python历史&quot;&gt;&lt;a href=&quot;#python历史&quot; class=&quot;headerlink&quot; title=&quot;python历史&quot;&gt;&lt;/a&gt;python历史&lt;/h4&gt;&lt;p&gt;python崇尚优雅，简洁&lt;/p&gt;
&lt;p&gt;2和3有较多区别&lt;/p&gt;
&lt;h4 id=&quot;python的种类&quot;&gt;&lt;a href=&quot;#python的种类&quot; class=&quot;headerlink&quot; title=&quot;python的种类&quot;&gt;&lt;/a&gt;python的种类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Cpython：官方推荐解释器。可以转化成C语言能识别的字节码。&lt;/li&gt;
&lt;li&gt;Jpython: 可以转化成Java语言能识别的字节码。&lt;/li&gt;
&lt;li&gt;Ironpython：可以转化成.net语言能识别的字节码&lt;/li&gt;
&lt;li&gt;pypy: 动态编译&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="老男孩" scheme="http://yoursite.com/tags/%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>requests</title>
    <link href="http://yoursite.com/2020/01/31/requests/"/>
    <id>http://yoursite.com/2020/01/31/requests/</id>
    <published>2020-01-31T13:04:33.000Z</published>
    <updated>2020-02-01T11:02:01.390Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫踩得坑</title>
    <link href="http://yoursite.com/2020/01/31/%E7%88%AC%E8%99%AB%E8%B8%A9%E5%BE%97%E5%9D%91/"/>
    <id>http://yoursite.com/2020/01/31/爬虫踩得坑/</id>
    <published>2020-01-31T01:35:10.000Z</published>
    <updated>2020-02-08T01:28:12.106Z</updated>
    
    <content type="html"><![CDATA[<h5 id="百度最近更新，需要过安检"><a href="#百度最近更新，需要过安检" class="headerlink" title="百度最近更新，需要过安检"></a>百度最近更新，需要过安检</h5><p>默认情况 下先请求一次百度获取这些参数，然后每次请求带上即可 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">item.Header.Add(&quot;Bdpagetype&quot;, &quot; 3&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Bdqid&quot;, &quot; 0xd30b86920004fb3f&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Cache-Control&quot;, &quot; private&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Ckpacknum&quot;, &quot; 2&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Ckrndstr&quot;, &quot; 20004fb3f&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Strict-Transport-Security&quot;, &quot; max-age=172800&quot;);//设置请求头信息（Header） </span><br><span class="line">item.Header.Add(&quot;Traceid&quot;, &quot; 1574759518274850689015207396528370285375&quot;);//设置请求头信息（Header）</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="抓取简书登录cookie"><a href="#抓取简书登录cookie" class="headerlink" title="抓取简书登录cookie"></a>抓取简书登录cookie</h5><p>登录发现post需要包含参数</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/20200131201546.png" alt></p><p>检查页面，发现在这儿，但不知如何取值</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/20200131201659.png" alt></p><p>authenticity_token应该每个页面动态生成</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/20200131201905.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;百度最近更新，需要过安检&quot;&gt;&lt;a href=&quot;#百度最近更新，需要过安检&quot; class=&quot;headerlink&quot; title=&quot;百度最近更新，需要过安检&quot;&gt;&lt;/a&gt;百度最近更新，需要过安检&lt;/h5&gt;&lt;p&gt;默认情况 下先请求一次百度获取这些参数，然后每次请求带上即可 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Bdpagetype&amp;quot;, &amp;quot; 3&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Bdqid&amp;quot;, &amp;quot; 0xd30b86920004fb3f&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Cache-Control&amp;quot;, &amp;quot; private&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Ckpacknum&amp;quot;, &amp;quot; 2&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Ckrndstr&amp;quot;, &amp;quot; 20004fb3f&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Strict-Transport-Security&amp;quot;, &amp;quot; max-age=172800&amp;quot;);//设置请求头信息（Header） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.Header.Add(&amp;quot;Traceid&amp;quot;, &amp;quot; 1574759518274850689015207396528370285375&amp;quot;);//设置请求头信息（Header）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="http://yoursite.com/2020/01/30/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/01/30/爬虫入门/</id>
    <published>2020-01-30T09:26:18.000Z</published>
    <updated>2020-02-01T11:01:40.954Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/http.png" alt></p><a id="more"></a><h3 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h3><h4 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E7%88%AC%E8%99%AB%E7%9A%84%E7%AE%80%E4%BB%8B1.png" alt></p><p>&lt;</p><h4 id="urllib-request"><a href="#urllib-request" class="headerlink" title="urllib.request"></a>urllib.request</h4><p>python3内置的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 用https时拿不到数据</span></span><br><span class="line">    url = <span class="string">"http://www.baidu.com/"</span></span><br><span class="line">    response = urllib.request.urlopen(url)</span><br><span class="line">    <span class="comment"># print(response)</span></span><br><span class="line">    data = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"baidu.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="comment"># python爬取到的多为str,bytes</span></span><br><span class="line">    <span class="comment"># str通过对应encode("编码")转为bytes，同理bytes通过decode转为str</span></span><br><span class="line">    <span class="comment"># 具体编码格式见html页面head头信息中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">load_data()</span><br></pre></td></tr></table></figure><p><strong>get传参要注意转成url编码</strong></p><p>由于百度更新，以下过不了安检，实际上拿不到数据了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_param</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"http://www.baidu.com/s?wd="</span></span><br><span class="line">    param = <span class="string">"美女"</span></span><br><span class="line">    final_url = url + param</span><br><span class="line">    <span class="comment"># python解释器只支持ASCII码，所以必须转码</span></span><br><span class="line">    final_url = urllib.parse.quote(final_url, safe=string.printable)</span><br><span class="line">    response = urllib.request.urlopen(final_url)</span><br><span class="line">    data_str = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"meinv.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_param()</span><br></pre></td></tr></table></figure><p>字典传参时,这样得到字符串参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">"wd"</span>: <span class="string">"中文"</span>,</span><br><span class="line">    <span class="string">"key"</span>: <span class="string">"zhang"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"san"</span></span><br><span class="line">&#125;</span><br><span class="line">params_str = urllib.parse.urlencode(params)</span><br></pre></td></tr></table></figure><p>绑定请求头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://www.baidu.com/s?wd=%E7%BE%8E%E5%A5%B3"</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="comment"># 浏览器版本</span></span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 创建时绑定请求头，也可以requset.add_header()来动态绑定</span></span><br><span class="line">request = urllib.request.Request(url, headers=header)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br></pre></td></tr></table></figure><p>获取随机的User-Agent(第三方包)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">    print(UserAgent().chrome)</span><br><span class="line">    print(UserAgent().ie)</span><br><span class="line">    print(UserAgent().firefox)</span><br><span class="line">    print(UserAgent().opera)</span><br><span class="line">    print(UserAgent().safari)</span><br><span class="line">    print(UserAgent().random)</span><br></pre></td></tr></table></figure><h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>对urlopen进行扩展</p><p>urlopen源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> _opener</span><br><span class="line"><span class="keyword">if</span> cafile <span class="keyword">or</span> capath <span class="keyword">or</span> cadefault:</span><br><span class="line">    <span class="keyword">import</span> warnings</span><br><span class="line">    warnings.warn(<span class="string">"cafile, capath and cadefault are deprecated, use a "</span></span><br><span class="line">                  <span class="string">"custom context instead."</span>, DeprecationWarning, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">"You can't pass both context and any of cafile, capath, and "</span></span><br><span class="line">            <span class="string">"cadefault"</span></span><br><span class="line">        )</span><br><span class="line">  <span class="comment"># 安全套阶层，第三方CA数字证书</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> _have_ssl:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'SSL support not available'</span>)</span><br><span class="line">    context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,</span><br><span class="line">                                         cafile=cafile,</span><br><span class="line">                                         capath=capath)</span><br><span class="line">    <span class="comment"># 默认用HTTPSHandler，可以用别的Handler来实现功能扩展</span></span><br><span class="line">    https_handler = HTTPSHandler(context=context)</span><br><span class="line">    opener = build_opener(https_handler)</span><br><span class="line"><span class="keyword">elif</span> context:</span><br><span class="line">    https_handler = HTTPSHandler(context=context)</span><br><span class="line">    opener = build_opener(https_handler)</span><br><span class="line"><span class="keyword">elif</span> _opener <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    _opener = opener = build_opener()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    opener = _opener</span><br><span class="line"><span class="keyword">return</span> opener.open(url, data, timeout)</span><br></pre></td></tr></table></figure><h6 id="HTTPHandler演示"><a href="#HTTPHandler演示" class="headerlink" title="HTTPHandler演示"></a>HTTPHandler演示</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://www.baidu.com/"</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="comment"># 浏览器版本</span></span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url, headers=header)</span><br><span class="line">handler = urllib.request.HTTPHandler()</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(request)</span><br><span class="line">data = response.read().decode(<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure><h6 id="ProxyHandler"><a href="#ProxyHandler" class="headerlink" title="ProxyHandler"></a>ProxyHandler</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_proxy_handler</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://blog.csdn.net/willsnowdev/article/details/90140266"</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="comment"># 浏览器版本</span></span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent().random</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 可以用多个IP，到时候随机选取</span></span><br><span class="line">    <span class="comment"># "http": "163.204.247.20:9999"也可</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">        <span class="string">"http"</span>: <span class="string">"http://163.204.247.20:9999"</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url, headers=header)</span><br><span class="line">    proxy_handler = urllib.request.ProxyHandler(proxy)</span><br><span class="line">    opener = urllib.request.build_opener(proxy_handler)</span><br><span class="line">    response = opener.open(request)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"requset_header.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.read().decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_proxy_handler()</span><br></pre></td></tr></table></figure><p>多个免费代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy_list = [</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"106.75.226.36:808"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"61.135.217.7:80"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"125.70.13.77:8080"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"https"</span>:<span class="string">"118.190.95.35:9001"</span>&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>付费代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"username:pwd@163.204.247.20:9999"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">username = <span class="string">"xunzhao"</span></span><br><span class="line">pwd = <span class="string">"173hjgew8"</span></span><br><span class="line">money_proxy1 = <span class="string">"163.204.247.20:9999"</span></span><br><span class="line"><span class="comment"># 创建密码管理器</span></span><br><span class="line">password_manger = urllib.request.HTTPPasswordMgr()</span><br><span class="line">password_manger.add_password(<span class="literal">None</span>, money_proxy1, username, pwd)</span><br><span class="line">handle_auth = urllib.request.ProxyBasicAuthHandler(password_manger)</span><br><span class="line">opener_auth = urllib.request.build_opener(handle_auth)</span><br><span class="line">response = opener_auth.open(url)</span><br></pre></td></tr></table></figure><p>用公司内网爬数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_nei_wang</span><span class="params">()</span>:</span></span><br><span class="line">    nei_url = <span class="string">"https://www.jianshu.com/p/325bdc0ae92f"</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent().random</span><br><span class="line">    &#125;</span><br><span class="line">    username = <span class="string">"admin"</span></span><br><span class="line">    pwd = <span class="string">"admin007"</span></span><br><span class="line">    password_manger = urllib.request.HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">    password_manger.add_password(<span class="literal">None</span>, nei_url, username, pwd)</span><br><span class="line">    <span class="comment"># handle不同，其他和付费代理很像</span></span><br><span class="line">    handle_nei = urllib.request.HTTPBasicAuthHandler(password_manger)</span><br><span class="line">    opener_nei = urllib.request.build_opener(handle_nei)</span><br><span class="line">    response = opener_nei.open(nei_url)</span><br><span class="line">    print(response.read().decode(<span class="string">"utf-8"</span>))</span><br></pre></td></tr></table></figure><h5 id="cookie认证"><a href="#cookie认证" class="headerlink" title="cookie认证"></a>cookie认证</h5><p>手动获取cookie，添加到header中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: UserAgent().random,</span><br><span class="line">    <span class="string">"Cookie"</span>: <span class="string">"__yadk_uid=e2gl8vcNK8DLVH2eQd6vHpvH1QvuStkO; web_login_version=MTU4MDA5MDc3OQ%3D%3D--366eb244926d0d504aa444afc85df5e80948cee6; remember_user_token=W1syMTAxNzY3NV0sIiQyYSQxMSRUVGNQenhyZjFtMzdiN3Mxc0xzT25lIiwiMTU4MDQ2MzkzNy42MjQ5NjA0Il0%3D--2fd8938f7291d2405e0c23b0f267c631fad3fd9b; read_mode=day; default_font=font2; locale=zh-CN; _m7e_session_core=ad86ea9fddf5bd5d6969bc414a322298; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%2221017675%22%2C%22%24device_id%22%3A%2216bea6ca2e9365-067bb910973608-e343166-1049088-16bea6ca2ea5c2%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E8%87%AA%E7%84%B6%E6%90%9C%E7%B4%A2%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22https%3A%2F%2Fwww.baidu.com%2Fs%22%2C%22%24latest_search_keyword%22%3A%22%E7%AE%80%E4%B9%A6%22%2C%22%24latest_utm_source%22%3A%22desktop%22%2C%22%24latest_utm_medium%22%3A%22not-signed-in-like-note-btn-in-bottom%22%2C%22%24latest_referrer_host%22%3A%22www.baidu.com%22%7D%2C%22first_id%22%3A%2216bea6ca2e9365-067bb910973608-e343166-1049088-16bea6ca2ea5c2%22%7D; Hm_lvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1580090858,1580277385,1580463938,1580466286; Hm_lpvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1580466310"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动获取，用cookiejar来保存cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获取 个人中心的页面</span><br><span class="line"></span><br><span class="line">1. 代码登录  登录成功 cookie(有效)</span><br><span class="line">2. 自动带着cookie 去请求个人中心</span><br><span class="line"></span><br><span class="line">cookiejar 自动保存这个cookie</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: UserAgent().random,</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'https://www.yaozh.com/login'</span></span><br><span class="line">    <span class="comment"># 1.2 登录的参数</span></span><br><span class="line">    login_form_data = &#123;</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"xiaomaoera12"</span>,</span><br><span class="line">        <span class="string">"pwd"</span>: <span class="string">"lina081012"</span>,</span><br><span class="line">        <span class="string">"formhash"</span>: <span class="string">"CE3ADF28C5"</span>,</span><br><span class="line">        <span class="string">"backurl"</span>: <span class="string">"https%3A%2F%2Fwww.yaozh.com%2F"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    login_form_data_str = urllib.parse.urlencode(login_form_data).encode(<span class="string">"utf-8"</span>)</span><br><span class="line">    cookie_jar = cookiejar.CookieJar()</span><br><span class="line">    cookie_handle = urllib.request.HTTPCookieProcessor(cookie_jar)</span><br><span class="line">    cookie_opener = urllib.request.build_opener(cookie_handle)</span><br><span class="line">    requset = urllib.request.Request(url, headers=header, data=login_form_data_str)</span><br><span class="line">    cookie_opener.open(requset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 代码带着cooke去访问 个人中心</span></span><br><span class="line">    center_url = <span class="string">'https://www.yaozh.com/member/'</span></span><br><span class="line">    center_request = urllib.request.Request(center_url, headers=header)</span><br><span class="line">    response = cookie_opener.open(center_url)</span><br><span class="line">    data = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"jianshu.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br></pre></td></tr></table></figure><h6 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h6><p>cookiejar原理和urlencode中safe=string.printable作用</p><h5 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h5><h6 id="URLError"><a href="#URLError" class="headerlink" title="URLError"></a>URLError</h6><p>url不存在</p><h6 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h6><p>4××，5××，可通过catch到error后，error.code来打印状态码</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/python3(urlib.request).png" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/handler%E5%A4%84%E7%90%86%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/http.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="http://yoursite.com/2020/01/30/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/01/30/前端基础/</id>
    <published>2020-01-30T09:06:22.000Z</published>
    <updated>2020-01-30T09:21:09.495Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%89%8D%E7%AB%AF.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%89%8D%E7%AB%AF.png&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法之美</title>
    <link href="http://yoursite.com/2019/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    <id>http://yoursite.com/2019/10/01/数据结构和算法之美/</id>
    <published>2019-10-01T13:20:26.000Z</published>
    <updated>2020-01-30T03:30:49.383Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li><p>定义<br> 数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p></li><li><p>链表适合插入、删除，时间复杂度O(1)；数组支持随机访问，根据下标随机访问的时间复杂度为O(1)</p></li><li><p>警惕数组的访问越界问题</p></li><li><p>我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p></li><li><p>如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第k个位置，为了避免大规模的数据搬移，直接将第k位的数据搬移到数组元素的最后，把新的元素直接放入第k个位置。</p></li><li><p>容器可否完全替代数组</p><ul><li>.Java ArrayList无法存储基本类型，比如int、long，需要封装为Integer、Long类，而Autoboxing、Unboxing则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</li><li>如果数据大小事先已知，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以直接使用数组。</li><li>.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如Object[][] array；而用容器的话则需要这样定义：ArrayList&lt;ArrayList &gt; array。</li><li>总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</li></ul></li><li><p>数组下标为何从零开始<br> 从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。前面也讲到，如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[k]就表示偏移k个type_size的位置，所以计算a[k]的内存地址只需要用这个公式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[k]_address = base_address + k * type_size</span><br></pre></td></tr></table></figure></li></ol><pre><code>但是，如果数组从1开始计数，那我们计算数组元素a[k]的内存地址就会变为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[k]_address = base_address + (k-1)*type_size</span><br></pre></td></tr></table></figure>对比两个公式，我们不难发现，从1开始编号，每次随机访问数组元素都多了一次减法运算，对于CPU来说，就是多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从0开始编号，而不是从1开始。不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非0开始不可。所以我觉得最主要的原因可能是历史原因。</code></pre><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li>常见的缓存淘汰策略有三种：先进先出策略FIFO（First In，First Out）、最少使用策略LFU（Least Frequently Used）、最近最少使用策略LRU（Least Recently Used）。</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义&lt;br&gt; 数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="极客时间" scheme="http://yoursite.com/categories/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://yoursite.com/2019/09/22/JDBC/"/>
    <id>http://yoursite.com/2019/09/22/JDBC/</id>
    <published>2019-09-22T07:38:45.000Z</published>
    <updated>2020-02-01T05:12:38.017Z</updated>
    
    <content type="html"><![CDATA[<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>JDBC主要是有 java的类和接口组成</p><p>在JDBC中核心的三个接口和一个类</p><blockquote><p>DriverManager: 驱动管理类,帮助我们加载各种驱动</p><p>Connection: 数据库连接接口,实现类在驱动中</p><p>Statement: 执行SQL语句的接口,实现类在驱动中</p><p>ResultSet: 结果集接口,实现类在驱动中</p></blockquote><p>驱动：每个厂商提供自己操作数据库的实现类</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/JDBC1.JPG" alt></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作步骤</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用JDBC操作数据库步骤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.必须先把对应的数据库驱动 添加到工程的构建路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 代码步骤:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.注册驱动:使用DriverManger来注册</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.获取和数据库的连接对象: 是Connection接口的实现类对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.获取SQL语句的执行者对象: 是Statement接口的实现类对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.结果集对象:是ResultSet接口的实现类对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5.处理结果集(打印,保存)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 6.释放资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// * 1.注册驱动:使用DriverManger来注册发现实现类在静态代码块里会注册，所以用反射直接加载字节码文件更好</span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">// * 2.获取和数据库的连接对象: 是Connection接口的实现类对象</span></span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/day04"</span>;</span><br><span class="line"><span class="comment">//jdbc:固定语法数据库厂商名 IP地址     端口号   要连接的数据库</span></span><br><span class="line">Connection conn = DriverManager.getConnection(url, <span class="string">"root"</span>, <span class="string">"123"</span>);</span><br><span class="line"><span class="comment">// * 3.获取SQL语句的执行者对象: 是Statement接口的实现类对象</span></span><br><span class="line">Statement st =  conn.createStatement();</span><br><span class="line"><span class="comment">// * 4.结果集对象:是ResultSet接口的实现类对象</span></span><br><span class="line">ResultSet rs = st.executeQuery(<span class="string">"select * from category"</span>);<span class="comment">//执行查询,返回值是结果集</span></span><br><span class="line"><span class="comment">//int rows = st.executeUpdate("insert into category values (6,'饮料')");</span></span><br><span class="line"><span class="comment">//int rows = st.executeUpdate("delete from category");</span></span><br><span class="line"><span class="comment">//执行增,删除,改,返回值是被影响的行数</span></span><br><span class="line"><span class="comment">// * 5.处理结果集(打印,保存),迭代器 hasNext next </span></span><br><span class="line"><span class="comment">//System.out.println(rows);</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//判断有没有下一条记录</span></span><br><span class="line"><span class="comment">//取出对应字段的值</span></span><br><span class="line"><span class="comment">// getInt  getString getDouble  getObject</span></span><br><span class="line"> <span class="comment">//getObject(1)  getObject(列名);</span></span><br><span class="line">Object cid = rs.getObject(<span class="string">"cid"</span>);</span><br><span class="line">Object cname = rs.getObject(<span class="string">"cname"</span>);</span><br><span class="line">System.out.println(cid+<span class="string">"\t"</span>+cname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// * 6.释放资源</span></span><br><span class="line">rs.close();<span class="comment">//只有执行查询,才有结果集对象,如果执行增删改,只有int类型行数</span></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDBCUtils 工具类</span></span><br><span class="line"><span class="keyword">package</span> com.guardwarm.JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/****"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String root = <span class="string">"***"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String passward = <span class="string">"********"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driverName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//抛出运行时异常，及时停止且错误明确</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"驱动加载失败，请检查驱动包"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,root,passward);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以传空值，也可以写函数重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Utils是实现增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//        query();</span></span><br><span class="line"><span class="comment">//        insert();</span></span><br><span class="line"><span class="comment">//        delete();</span></span><br><span class="line"><span class="comment">//        update();</span></span><br><span class="line"><span class="comment">//        alter("insert into norvals  values ('我欲封天',888)");</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            <span class="comment">//将“转义，或者使用单引号</span></span><br><span class="line">            <span class="keyword">int</span> row = st.executeUpdate(<span class="string">"insert into norvals (fname,fprice) values (\"同桌凶猛\",77)"</span>);</span><br><span class="line">            System.out.println(<span class="string">"成功修改"</span>+row+<span class="string">"行"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            <span class="keyword">int</span> row = st.executeUpdate(<span class="string">"delete from norvals where fname = '同桌凶猛'"</span>);</span><br><span class="line">            System.out.println(<span class="string">"成功修改"</span>+row+<span class="string">"行"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            <span class="keyword">int</span> row = st.executeUpdate(<span class="string">"update norvals set fprice = 66 where fname = '终极'"</span>);</span><br><span class="line">            System.out.println(<span class="string">"成功修改"</span>+row+<span class="string">"行"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alter</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            <span class="keyword">int</span> row = st.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">"成功修改"</span>+row+<span class="string">"行"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = JDBCUtils.getConnection();</span><br><span class="line">        Statement st = conn.createStatement();</span><br><span class="line">        ResultSet rs = st.executeQuery(<span class="string">"select * from norvals"</span>);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            Object fname = rs.getObject(<span class="string">"fname"</span>);</span><br><span class="line">            Object fprice = rs.getObject(<span class="string">"fprice"</span>);</span><br><span class="line">            System.out.println(fname+<span class="string">"\t"</span>+fprice);</span><br><span class="line">        &#125;</span><br><span class="line">        JDBCUtils.close(conn,st,rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/JDBC.JPG" alt></p><p>通过特殊字符，可以强行加入命令来登录成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入用户名"</span>);</span><br><span class="line">        String user = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码"</span>);</span><br><span class="line">        String passwd = scan.nextLine();</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            String sql = <span class="string">"select * from usersInfo where user = '"</span>+user+<span class="string">"' and password = '"</span>+passwd+<span class="string">"'"</span>;</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"登录失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PrepareedStatement"><a href="#PrepareedStatement" class="headerlink" title="PrepareedStatement"></a>PrepareedStatement</h5><p>Statement的子类，用于对齐内sql转义，防止SQL注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PreparedStatement pst = conn.PrepareStatement(sql语句);//注意 sql语句中不要写具体的参数</span></span><br><span class="line"><span class="comment"> * 通过set方法为pst中的sql语句设置具体的值</span></span><br><span class="line"><span class="comment"> * pst.setXxxx(第几个?号,具体的值);//?号从1开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">//st = conn.createStatement();</span></span><br><span class="line">String sql = <span class="string">"select * from users where username = ? and password = ?"</span>;</span><br><span class="line">pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">pst.setObject(<span class="number">1</span>,username);</span><br><span class="line">pst.setObject(<span class="number">2</span>, password);</span><br><span class="line">rs = st.executeQuery();</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/Statement%E5%92%8CPreparedStatement%E7%9A%84%E5%8C%BA%E5%88%AB.bmp" alt></p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.JDBC: java语言操作各种数据库的技术</span></span><br><span class="line"><span class="comment"> * JDBC由一堆接口和类组成</span></span><br><span class="line"><span class="comment"> * 类: DriverManger,用于注册驱动</span></span><br><span class="line"><span class="comment"> * 接口:</span></span><br><span class="line"><span class="comment"> * Connection:数据库连接类的根接口</span></span><br><span class="line"><span class="comment"> * Statement:数据库语句执行类的根接口</span></span><br><span class="line"><span class="comment"> * ResultSet:结果集类的根接口</span></span><br><span class="line"><span class="comment"> * 以上接口的实现类,在驱动包中</span></span><br><span class="line"><span class="comment"> * 2.JDBC和具体数据库的驱动,他们是接口和实现类的关系</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.[重点]原生JDBC开发的步骤</span></span><br><span class="line"><span class="comment"> * 0.向工程中导入具体的数据库驱动包</span></span><br><span class="line"><span class="comment"> * 1.注册驱动</span></span><br><span class="line"><span class="comment"> * DriverManger.register(new com.mysql.jdbc.Driver());//注册两次</span></span><br><span class="line"><span class="comment"> * Class.forName("com.mysql.jdbc.Driver");</span></span><br><span class="line"><span class="comment"> * 2.获取连接(四大要素:驱动,连接串,用户名,密码)</span></span><br><span class="line"><span class="comment"> * 前提:必须有驱动</span></span><br><span class="line"><span class="comment"> * Connection conn = DriverManager.getConnection(</span></span><br><span class="line"><span class="comment"> * "jdbc:mysql://ip地址:3306/数据库名","用户名","密码"</span></span><br><span class="line"><span class="comment"> * );</span></span><br><span class="line"><span class="comment"> * 3.获取sql语句执行对象</span></span><br><span class="line"><span class="comment"> * Statement st = conn.createStatement();</span></span><br><span class="line"><span class="comment"> * PreparedStatement pst = conn.prepareStatement(String sql);</span></span><br><span class="line"><span class="comment"> * pst.setObject("占位符序号","具体的参数值");</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.使用执行对象执行sql语句,获取到结果集</span></span><br><span class="line"><span class="comment"> * ResultSet rs = st.excuteQuery(sql);</span></span><br><span class="line"><span class="comment"> * ResultSet rs = pst.excuteQuery();</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.处理结果集</span></span><br><span class="line"><span class="comment"> * rs.next();//判断有没有下一条记录</span></span><br><span class="line"><span class="comment"> * rs.getObject("字段名");//rs.getObject(字段对应的序号);</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6.释放资源</span></span><br><span class="line"><span class="comment"> * rs.close(),st.close,conn.close()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.[重点]</span></span><br><span class="line"><span class="comment"> * JDBCUtils.java工具类</span></span><br><span class="line"><span class="comment"> *//先定义4个字符串,数据库操作中的四大要素</span></span><br><span class="line"><span class="comment"> *//这个工具类,主要为我们获取一个数据库连接</span></span><br><span class="line"><span class="comment"> *private static String driverName = "com.mysql.jdbc.Driver";</span></span><br><span class="line"><span class="comment"> *private static String url = "jdbc:mysql://localhost:3306/day04";</span></span><br><span class="line"><span class="comment"> *private static String username = "root";</span></span><br><span class="line"><span class="comment"> *private static String password = "123";</span></span><br><span class="line"><span class="comment"> * //在静态代码块中注册驱动</span></span><br><span class="line"><span class="comment"> * static&#123;</span></span><br><span class="line"><span class="comment"> * Class.forName(driverName);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //获取连接</span></span><br><span class="line"><span class="comment"> * public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="comment"> * return  DriverManger.getConnection(url,username,password);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //关闭资源</span></span><br><span class="line"><span class="comment"> * public static void closeAll(Connection conn,Statement st,ResultSet rs)&#123;</span></span><br><span class="line"><span class="comment"> * //先判断是否为空</span></span><br><span class="line"><span class="comment"> * //如果不为空关闭</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *5.练习:增删改查</span></span><br><span class="line"><span class="comment"> *excuteUpdate();//执行增删改</span></span><br><span class="line"><span class="comment"> *excuteQuery();//执行查询</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="DBCP连接池"><a href="#DBCP连接池" class="headerlink" title="DBCP连接池"></a>DBCP连接池</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有的连接池必须遵循 javax.sql.DataSource接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在DBCP连接池中</span></span><br><span class="line"><span class="comment"> * 实现 javax.sql.DataSource接口的实现类是:</span></span><br><span class="line"><span class="comment"> *  BasicDataSource</span></span><br><span class="line"><span class="comment"> * 使用:</span></span><br><span class="line"><span class="comment"> * 创建BasicDataSource对象,并且给他设置数据库连接的四大要素即可</span></span><br><span class="line"><span class="comment"> * private static BasicDataSource ds = new BasicDataSource();</span></span><br><span class="line"><span class="comment"> * //设置数据库连接四大要素后期都是通过配置文件读取</span></span><br><span class="line"><span class="comment"> * ds.setDriverClassName(driverName);</span></span><br><span class="line"><span class="comment"> * ds.setUrl(url);</span></span><br><span class="line"><span class="comment"> * ds.setUsername(username);</span></span><br><span class="line"><span class="comment"> * ds.setPassword(password);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己用ArrayList实现的一个很low的连接池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">connPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/warm"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userName = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passward = <span class="string">"xunzhao"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Connection&gt; conns = <span class="keyword">new</span> ArrayList&lt;Connection&gt;(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driverName);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                Connection conn = DriverManager.getConnection(url,userName,passward);</span><br><span class="line">                conns.add(conn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = conns.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有用配置文件的DBCPUtil</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPUtils</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/day04"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"123"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BasicDataSource ds = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态代码块,设置ds的四大要素</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">ds.setDriverClassName(driverName);</span><br><span class="line">ds.setUrl(url);</span><br><span class="line">ds.setUsername(username);</span><br><span class="line">ds.setPassword(password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//返回一个连接对象,不要用DriverManager获取,而是连接池中获取</span></span><br><span class="line"><span class="keyword">return</span> ds.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭所有资源的统一代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(Connection conn,Statement st,ResultSet rs)</span></span>&#123;</span><br><span class="line"><span class="comment">//负责关闭</span></span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改用配置文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//ps.load(new FileInputStream("F:\\javaWorkspace\\project2\\module01\\src\\dbcpconfig.properties"));</span></span><br><span class="line">            ps.load(DBCPDemo1.class.getClassLoader().getResourceAsStream(<span class="string">"dbcpconfig.properties"</span>));</span><br><span class="line">            ds = BasicDataSourceFactory.createDataSource(ps);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在C3P0连接池中 遵循了javax.sql.DataSource接口的实现类:</span></span><br><span class="line"><span class="comment"> * ComboPooledDataSource</span></span><br><span class="line"><span class="comment"> *最大优势是不用加载配置文件，按规定格式将配置文件置于src下即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//不使用配置文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//static代码块设置数据库连接四大要素</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">ds.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/day04"</span>);</span><br><span class="line">ds.setUser(<span class="string">"root"</span>);</span><br><span class="line">ds.setPassword(<span class="string">"123"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用XML配置文件会自动根据配置文件获取连接</span></span><br><span class="line"><span class="comment">// * 1.文件名和文件中标签名 必须是官方指定的</span></span><br><span class="line"><span class="comment">//* 2.必须放到src根目录下,C3P0的实现类ComboPooledDataSource会自动加载</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//后续开启事务获取统一连接和DBUtild会用到</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ComboPooledDataSource <span class="title">getDataSources</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> ds;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>DBUtils框架使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DBUtils框架的介绍</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * DBUtils类:主要负责关闭连接,释放资源,开启事务等操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * QueryRunner:负责我们对象数据库的CURD操作(核心类)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ResultSetHandler:结果集处理类,帮我我们处理结果集(帮助我们封装数据的)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * QueryRunner类的使用:</span></span><br><span class="line"><span class="comment"> * 构造:</span></span><br><span class="line"><span class="comment"> * public QueryRunner(DataSource ds);//需要一个连接池</span></span><br><span class="line"><span class="comment"> * public QueryRunner();//不需要连接,用来进行事务操作，后续调用方法时手动传入连接</span></span><br><span class="line"><span class="comment"> * 方法:</span></span><br><span class="line"><span class="comment"> *  int update(String sql, Object... params);//主要执行增删改</span></span><br><span class="line"><span class="comment"> * query(String sql, ResultSetHandler&lt;T&gt; rsh, Object... params);//主要执行查询</span></span><br><span class="line"><span class="comment"> * ResultSetHandler:结果集处理类</span></span><br><span class="line"><span class="comment"> * 我们发现ResultSetHandler是一个接口,</span></span><br><span class="line"><span class="comment"> * 而框架中给我们定义了一堆实现类</span></span><br><span class="line"><span class="comment"> * ArrayHandler:</span></span><br><span class="line"><span class="comment"> * ArrayListHandler</span></span><br><span class="line"><span class="comment"> * **BeanHandler</span></span><br><span class="line"><span class="comment"> * **BeanListHandler</span></span><br><span class="line"><span class="comment"> * ColumnListHandler</span></span><br><span class="line"><span class="comment"> * KeyedHandler</span></span><br><span class="line"><span class="comment"> * MapHandler</span></span><br><span class="line"><span class="comment"> * MapListHandler</span></span><br><span class="line"><span class="comment"> * **ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guardwarm</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtilsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//insert();</span></span><br><span class="line"><span class="comment">//delete();</span></span><br><span class="line">update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">Object[] obj = &#123;<span class="number">16</span>,<span class="string">"皮鞋类"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> rows = qr.update(<span class="string">"insert into category (cid,cname) values (?,?)"</span>, obj);</span><br><span class="line">System.out.println(rows);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(new QueryRunner(C3P0Utils02.getDataSource()).</span></span><br><span class="line"><span class="comment">//update("insert into category (cid,cname) values (?,?)",</span></span><br><span class="line"><span class="comment">//new Object[]&#123;17,"成人用品类"&#125;));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象,给定连接池</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line"><span class="keyword">int</span> rows = qr.update(<span class="string">"delete from category where cid = ?"</span>, <span class="keyword">new</span> Object[]&#123;<span class="number">17</span>&#125;);</span><br><span class="line">System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象,给定连接池</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line"><span class="keyword">int</span> rows = qr.update(<span class="string">"update category set cname = ? where cid = ?"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"运动鞋类"</span>,<span class="number">16</span>&#125;);</span><br><span class="line">System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//ArrayHandler处理类的使用将第一条记录的各字段存储在obj数组中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">Object[] objs = qr.query(sql, <span class="keyword">new</span> ArrayHandler());</span><br><span class="line"><span class="comment">//3.打印</span></span><br><span class="line"><span class="keyword">for</span> (Object obj : objs) &#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ArrayListHandler处理类的使用将多条记录存在list中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">List&lt;Object[]&gt;  list = qr.query(sql, <span class="keyword">new</span> ArrayListHandler());</span><br><span class="line"><span class="comment">//3.打印</span></span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">System.out.println(objects[<span class="number">0</span>]+<span class="string">"\t"</span>+objects[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BeanHandler处理类的使用将一条记录存储在bean中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo03</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">Category c = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Category&gt;(Category.class));</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BeanListHandler处理类的使用将多条记录存储在list中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo04</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">List&lt;Category&gt; list = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Category&gt;(Category.class));</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="keyword">for</span> (Category category : list) &#123;</span><br><span class="line">System.out.println(category);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ColumnListHandler处理类的使用将一个字段存储在一个list中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo05</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">List&lt;Object&gt; ids = qr.query(sql, <span class="keyword">new</span> ColumnListHandler&lt;Object&gt;(<span class="string">"cname"</span>));</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">System.out.println(ids);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MapHandler处理类的使用key为string类型，存的是字段名，value存的是第一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo06</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">Map&lt;String, Object&gt; map = qr.query(sql,<span class="keyword">new</span> MapHandler());</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MapListHandler处理类的使用存储多条记录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo07</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = qr.query(sql,<span class="keyword">new</span> MapListHandler());</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">System.out.println(maps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ScalarHandler处理类的使用 存储单个值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo08</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//1.创建QueryRunner对象</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils02.getDataSource());</span><br><span class="line"><span class="comment">//2.执行查询</span></span><br><span class="line">String sql = <span class="string">"select count(*) from category"</span>;</span><br><span class="line">Object count = qr.query(sql,<span class="keyword">new</span> ScalarHandler&lt;Object&gt;());</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.事务: 是逻辑上的一组操作(多个sql语句),要么都成功 要么都失败</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.事务的操作:</span></span><br><span class="line"><span class="comment"> * 开启事务:</span></span><br><span class="line"><span class="comment"> * java程序代码: 连接对象.setAutoCommit(false);</span></span><br><span class="line"><span class="comment"> *  DOS窗口代码: start transaction;</span></span><br><span class="line"><span class="comment"> * 提交事务</span></span><br><span class="line"><span class="comment"> * java代码:连接对象.commit();</span></span><br><span class="line"><span class="comment"> * DOS窗口代码:commit;</span></span><br><span class="line"><span class="comment"> * 回滚事务</span></span><br><span class="line"><span class="comment"> * java代码:连接对象.rollback();</span></span><br><span class="line"><span class="comment"> * DOS窗口:rollback;</span></span><br><span class="line"><span class="comment"> * 3.ThreadLocal:线程本地变量lang包中内置的一个对象</span></span><br><span class="line"><span class="comment"> *ThreadLocal能保证,哪个线程保存的数据 只能由那个线程取出,别的线程取不到数据的</span></span><br><span class="line"><span class="comment"> * public class ThreadLocal&#123;</span></span><br><span class="line"><span class="comment"> * Map&lt;Thread,Object&gt; map = new Map&lt;Thread,Object&gt;();</span></span><br><span class="line"><span class="comment"> * public void set(Object obj)&#123;</span></span><br><span class="line"><span class="comment"> * map.set(Thread.currentThread(),obj);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * public Object get()&#123;</span></span><br><span class="line"><span class="comment"> * map.get(Thread.currentThread());</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//用原生JDBC实现转账</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/warm"</span>,<span class="string">"root"</span>,<span class="string">"*****"</span>);</span><br><span class="line">            Statement st = conn.createStatement();</span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">int</span> row1 = st.executeUpdate(<span class="string">"update account set money = money - 1000 where name = 'mike'"</span>);</span><br><span class="line">            System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> row2 = st.executeUpdate(<span class="string">"update account set money = money + 1000 where name = 'alice'"</span>);</span><br><span class="line">            <span class="keyword">if</span>(row1 &gt; <span class="number">0</span> &amp;&amp; row2 &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                conn.commit();</span><br><span class="line">                System.out.println(<span class="string">"转账成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"转账失败"</span>);</span><br><span class="line">            conn.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"转账失败"</span>);</span><br><span class="line">            conn.rollback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例一：转账"><a href="#案例一：转账" class="headerlink" title="案例一：转账"></a>案例一：转账</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E4%B8%89%E5%B1%82%E6%80%9D%E6%83%B3.bmp" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB%E7%9A%84%E5%88%86%E6%9E%90.bmp" alt></p><h5 id="案例二：商品查询系统"><a href="#案例二：商品查询系统" class="headerlink" title="案例二：商品查询系统"></a>案例二：商品查询系统</h5><p>出现的小问题</p><p>JavaBean必须变量名和字段名相同</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC:</span></span><br><span class="line"><span class="comment"> * 1.JDBC原生API</span></span><br><span class="line"><span class="comment"> * 步骤:</span></span><br><span class="line"><span class="comment"> * 1.注册驱动:</span></span><br><span class="line"><span class="comment"> * Class.forName("com.mysql.jdbc.Driver");</span></span><br><span class="line"><span class="comment"> * 2.获取连接: </span></span><br><span class="line"><span class="comment"> * Connection conn = </span></span><br><span class="line"><span class="comment"> * DriverManager.getConnection("jdbc:mysql://ip:3306/数据库名","用户名","密码");</span></span><br><span class="line"><span class="comment"> * 3.获取sql执行对象</span></span><br><span class="line"><span class="comment"> * Statement st = conn.createStatement();</span></span><br><span class="line"><span class="comment"> * 4.执行sql语句,并且获取结果集(只有查询有结果集,其他都是int返回值)</span></span><br><span class="line"><span class="comment"> * int rows = st.excuteUpdate(sql);</span></span><br><span class="line"><span class="comment"> * ResultSet rs = st.excuteQuery(sql);</span></span><br><span class="line"><span class="comment"> * 5.处理结果集</span></span><br><span class="line"><span class="comment"> * 结果集中的两个方法</span></span><br><span class="line"><span class="comment"> * next();//判断有没有下一条记录</span></span><br><span class="line"><span class="comment"> * getXxx(int colid),getXxx(String colname);</span></span><br><span class="line"><span class="comment"> * 其中Xxx可以是int,String,Double,Object</span></span><br><span class="line"><span class="comment"> * 6.释放资源</span></span><br><span class="line"><span class="comment"> * conn.close(),st.close(),rs.close();</span></span><br><span class="line"><span class="comment"> * 2.JDBCUtils工具类</span></span><br><span class="line"><span class="comment"> * //四个要素</span></span><br><span class="line"><span class="comment"> * private static String driverName = "com.mysql.jdbc.Driver";</span></span><br><span class="line"><span class="comment"> * private static String url = "jdbc:mysql://localhost:3306/day04";</span></span><br><span class="line"><span class="comment"> * private static String username = "root";</span></span><br><span class="line"><span class="comment"> * private static String password = "123";</span></span><br><span class="line"><span class="comment"> * //static</span></span><br><span class="line"><span class="comment"> * static&#123;</span></span><br><span class="line"><span class="comment"> * Class.forName(driverName);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * //获取连接:</span></span><br><span class="line"><span class="comment"> * public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="comment"> * DriverManager.getConnecton(url,username,password);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * //关闭资源</span></span><br><span class="line"><span class="comment"> * public static void closeAll(Connection conn,Statement st,ResultSet rs)&#123;..&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *3.连接池: 是一个集合,预先获取一些连接对象,保存到集合中以便下次使用</span></span><br><span class="line"><span class="comment"> *JDBC中规定:所有的连接池对象,必须实现 DataSource接口</span></span><br><span class="line"><span class="comment"> *DBCP连接池:</span></span><br><span class="line"><span class="comment"> *public class BasicDataSource implements DataSource;</span></span><br><span class="line"><span class="comment"> *==================================================</span></span><br><span class="line"><span class="comment"> *DBCPUtils工具类: 不使用配置文件</span></span><br><span class="line"><span class="comment"> *//四个要素</span></span><br><span class="line"><span class="comment"> *private static String driverName = "com.mysql.jdbc.Driver";</span></span><br><span class="line"><span class="comment"> *private static String url = "jdbc:mysql://localhost:3306/day04";</span></span><br><span class="line"><span class="comment"> *private static String username = "root";</span></span><br><span class="line"><span class="comment"> *private static String password = "123";</span></span><br><span class="line"><span class="comment"> *//连接池</span></span><br><span class="line"><span class="comment"> *private static BasicDataSource ds = new BasicDataSource();</span></span><br><span class="line"><span class="comment"> *static&#123;</span></span><br><span class="line"><span class="comment"> *//设置四大要素</span></span><br><span class="line"><span class="comment"> *ds.setDriverClassName(driverName);</span></span><br><span class="line"><span class="comment"> *ds.setUrl(url);</span></span><br><span class="line"><span class="comment"> *ds.setUsername(username);</span></span><br><span class="line"><span class="comment"> *ds.setPassword(password);</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="comment"> *ds.getConnection();</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *//关闭资源</span></span><br><span class="line"><span class="comment"> * public static void closeAll(Connection conn,Statement st,ResultSet rs)&#123;..&#125;</span></span><br><span class="line"><span class="comment"> *==================================================</span></span><br><span class="line"><span class="comment"> *DBCPUtils工具类: 使用配置文件(推荐使用Properties配置文件)</span></span><br><span class="line"><span class="comment"> *//配置文件中写四个要素</span></span><br><span class="line"><span class="comment"> *driverName=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"> *url=jdbc:mysql://localhost:3306/day04</span></span><br><span class="line"><span class="comment"> *username=root</span></span><br><span class="line"><span class="comment"> *password=123</span></span><br><span class="line"><span class="comment"> *//连接池</span></span><br><span class="line"><span class="comment"> *private static DataSource ds;</span></span><br><span class="line"><span class="comment"> *static&#123;</span></span><br><span class="line"><span class="comment"> *Properties ps =  new Properties();</span></span><br><span class="line"><span class="comment"> *ps.load(new FIleInputStream("dbcpconfig.properties"))</span></span><br><span class="line"><span class="comment"> *//用到一个生产BasicDataSource的工厂类</span></span><br><span class="line"><span class="comment"> *ds = BasicDataSourceFactory.createDataSource(ps);</span></span><br><span class="line"><span class="comment"> *//设置四大要素</span></span><br><span class="line"><span class="comment"> *//ds.setDriverClassName(ps.get("driverName"));</span></span><br><span class="line"><span class="comment"> *//ds.setUrl(ps.get("url"));</span></span><br><span class="line"><span class="comment"> *//ds.setUsername(ps.get("username"));</span></span><br><span class="line"><span class="comment"> *//ds.setPassword(ps.get("password"));</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="comment"> *ds.getConnection();</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *//关闭资源</span></span><br><span class="line"><span class="comment"> * public static void closeAll(Connection conn,Statement st,ResultSet rs)&#123;..&#125;</span></span><br><span class="line"><span class="comment"> *=============================================</span></span><br><span class="line"><span class="comment"> *C3P0连接池:不使用配置文件</span></span><br><span class="line"><span class="comment"> *//四个要素</span></span><br><span class="line"><span class="comment"> *private static String driverName = "com.mysql.jdbc.Driver";</span></span><br><span class="line"><span class="comment"> *private static String url = "jdbc:mysql://localhost:3306/day04";</span></span><br><span class="line"><span class="comment"> *private static String username = "root";</span></span><br><span class="line"><span class="comment"> *private static String password = "123";</span></span><br><span class="line"><span class="comment"> *//连接池对象</span></span><br><span class="line"><span class="comment"> *ComboPooledDataSource ds = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment"> *//静态代码块</span></span><br><span class="line"><span class="comment"> *static&#123;</span></span><br><span class="line"><span class="comment"> *ds.setDriverClass(driverName);</span></span><br><span class="line"><span class="comment"> *ds.setJdbcurl(url);</span></span><br><span class="line"><span class="comment"> *ds.setUser(username);</span></span><br><span class="line"><span class="comment"> *ds.setPassword(password);</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="comment"> *ds.getConnection();</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *//关闭资源</span></span><br><span class="line"><span class="comment"> * public static void closeAll(Connection conn,Statement st,ResultSet rs)&#123;..&#125;</span></span><br><span class="line"><span class="comment"> *=============================================</span></span><br><span class="line"><span class="comment"> *C3P0连接池:使用配置文件</span></span><br><span class="line"><span class="comment"> *//四个要素写到XMl文件中</span></span><br><span class="line"><span class="comment"> * &lt;default-config&gt;&lt;!-- 默认配置 --&gt;</span></span><br><span class="line"><span class="comment"> *&lt;property name="driverClass"&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span></span><br><span class="line"><span class="comment"> *&lt;property name="jdbcUrl"&gt;jdbc:mysql://localhost:3306/day04&lt;/property&gt;</span></span><br><span class="line"><span class="comment"> *&lt;property name="user"&gt;root&lt;/property&gt;</span></span><br><span class="line"><span class="comment"> *&lt;property name="password"&gt;123&lt;/property&gt;</span></span><br><span class="line"><span class="comment"> *&lt;property name="initialPoolSize"&gt;10&lt;/property&gt;</span></span><br><span class="line"><span class="comment"> *&lt;/default-config&gt;</span></span><br><span class="line"><span class="comment"> *//连接池对象</span></span><br><span class="line"><span class="comment"> *//在创建ComboPooledDataSource对象时,底层会去自动读取并解析XML</span></span><br><span class="line"><span class="comment"> *//但是这个XML必须Src根目录下,文件名字必须叫做c3p0-config.xml</span></span><br><span class="line"><span class="comment"> *ComboPooledDataSource ds = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="comment"> *ds.getConnection();</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *//关闭资源</span></span><br><span class="line"><span class="comment"> * public static void closeAll(Connection conn,Statement st,ResultSet rs)&#123;..&#125;</span></span><br><span class="line"><span class="comment"> *第三方框架: DBUtils工具类</span></span><br><span class="line"><span class="comment"> *DBUtils: 主要是关系资源</span></span><br><span class="line"><span class="comment"> *public static void closeQuietly(Connection conn,Statement st,ResultSet rs);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *QueryRunner:SQL语句执行对象</span></span><br><span class="line"><span class="comment"> *不支持事务</span></span><br><span class="line"><span class="comment"> *构造:QueryRunner(DataSource ds)</span></span><br><span class="line"><span class="comment"> *1.int  update(String sql,Object... params)</span></span><br><span class="line"><span class="comment"> *2. query(String sql,ResultSetHandler接口 rsh, Object...params)</span></span><br><span class="line"><span class="comment"> *支持事务</span></span><br><span class="line"><span class="comment"> *构造:QueryRunner()</span></span><br><span class="line"><span class="comment"> *1.int  update(Connection conn,String sql,Object... params)</span></span><br><span class="line"><span class="comment"> *2. query(Connection conn,String sql,ResultSetHandler接口 rsh, Object...params)</span></span><br><span class="line"><span class="comment"> *ResultSetHandler接口 的实现类</span></span><br><span class="line"><span class="comment"> *Object[]  ArrayHandler:</span></span><br><span class="line"><span class="comment"> *把结果集中的第一条记录,封装到一个数组中,数组中的每个元素都是字段的值</span></span><br><span class="line"><span class="comment"> *List&lt;Object[]&gt;  ArrayListHandler:</span></span><br><span class="line"><span class="comment"> *把结果集中的每一条记录,分别封装到一个数组中,数组中的每个元素都是字段的值</span></span><br><span class="line"><span class="comment"> *把所有数组再封装到List集合中,并返回这个集合</span></span><br><span class="line"><span class="comment"> *JavaBean BeanHandler:</span></span><br><span class="line"><span class="comment"> *把结果集中的第一条记录,封装到一个JavaBean对象中,并返回这个对象</span></span><br><span class="line"><span class="comment"> *List&lt;JavaBean&gt; BeanListHandler:</span></span><br><span class="line"><span class="comment"> *把结果集中的每一条记录,分别封装到一个JavaBean对象中,</span></span><br><span class="line"><span class="comment"> *把这些对象保存到集合中,并返回这个集合</span></span><br><span class="line"><span class="comment"> *Map&lt;String,Object&gt; MapHandler:</span></span><br><span class="line"><span class="comment"> *List&lt;Map&lt;String,Object&gt;&gt; MapListHandler</span></span><br><span class="line"><span class="comment"> *List&lt;Object&gt; ColumnHandler:</span></span><br><span class="line"><span class="comment"> *Object Scalarhandler:</span></span><br><span class="line"><span class="comment"> *事务:</span></span><br><span class="line"><span class="comment"> *开始事务: </span></span><br><span class="line"><span class="comment"> *try&#123;</span></span><br><span class="line"><span class="comment"> *conn.setAutoCommit(false);</span></span><br><span class="line"><span class="comment"> *insert(..)</span></span><br><span class="line"><span class="comment"> *insert(..)</span></span><br><span class="line"><span class="comment"> *insert(..)</span></span><br><span class="line"><span class="comment"> *conn.commit();</span></span><br><span class="line"><span class="comment"> *&#125;catch(Exception ex)&#123;</span></span><br><span class="line"><span class="comment"> *conn.rollback();</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> *ThreadLocal:底层是一个Map&lt;Thread,Object&gt;</span></span><br><span class="line"><span class="comment"> *set(Object 值);==&gt; map.set(当前线程对象,值)</span></span><br><span class="line"><span class="comment"> *get();===&gt;map.get(当前线程对象)</span></span><br><span class="line"><span class="comment"> *remove();====&gt;map.remove(当前线程对象)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h5&gt;&lt;p&gt;JDBC主要是有 java的类和接口组成&lt;/p&gt;
&lt;p&gt;在JDBC中核心的三个接口和一个类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DriverManager: 驱动管理类,帮助我们加载各种驱动&lt;/p&gt;
&lt;p&gt;Connection: 数据库连接接口,实现类在驱动中&lt;/p&gt;
&lt;p&gt;Statement: 执行SQL语句的接口,实现类在驱动中&lt;/p&gt;
&lt;p&gt;ResultSet: 结果集接口,实现类在驱动中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;驱动：每个厂商提供自己操作数据库的实现类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/JDBC1.JPG&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JDBC" scheme="http://yoursite.com/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>XML</title>
    <link href="http://yoursite.com/2019/09/21/XML/"/>
    <id>http://yoursite.com/2019/09/21/XML/</id>
    <published>2019-09-21T06:35:31.000Z</published>
    <updated>2020-01-31T12:55:23.328Z</updated>
    
    <content type="html"><![CDATA[<h5 id="XML介绍"><a href="#XML介绍" class="headerlink" title="XML介绍"></a>XML介绍</h5><p>XML:可扩展的标记语言。</p><p>可扩展的:扩展性特别强,语法上比较松</p><p>标记: <dog> </dog></p><p>我们用的是1.0的版本</p><p>用于存放数据或配置文件</p><h5 id="XML的语法"><a href="#XML的语法" class="headerlink" title="XML的语法:"></a>XML的语法:</h5><p>a.文档声明</p><blockquote><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><p>版本一般选1.0，编码默认是utf8</p></blockquote><p>b.注释:</p><blockquote><p>开始：&lt;!– </p><p>结束    –&gt;</p></blockquote><p>c.元素(Element)/标签(Tag)</p><blockquote><p>必须有开始和结束标签组成  &lt;dan&gt; &lt;/dan&gt;</p><p>一般只有一个跟标签，可以相互嵌套</p></blockquote><a id="more"></a><p>d.属性:attribute</p><blockquote><p>属性名=“属性值”</p><p>必须写在开始标签中</p><p>必须以字母开头</p></blockquote><p>e.转义字符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">---</span> &amp;<span class="attr">lt</span>;</span></span><br><span class="line"><span class="tag">&gt;</span> --- &amp;gt;</span><br><span class="line">" --- &amp;quot;</span><br><span class="line">' --- &amp;apos;</span><br><span class="line">&amp; --- &amp;amp</span><br></pre></td></tr></table></figure><p>f.CDATA区</p><p>当内容中出现大量的需要转译的字符<br>    XML提供了CDATA区</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abc</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">String s = "abc";</span><br><span class="line">int count = 0;</span><br><span class="line">for(int i = 0;i &lt; s.length() ; i++)&#123;</span><br><span class="line">char c = s.charAt(i);</span><br><span class="line">if(c &gt;= 'a' &amp;&amp; c &lt;= 'z')&#123;</span><br><span class="line">count++;]]&gt;</span><br><span class="line"><span class="comment">&lt;!--  特例：里面还包含了]]&gt;,需要分开成两个CDATA区 --&gt;</span></span><br><span class="line">    ]]&amp;gt;</span><br><span class="line">&lt;![CDATA[</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println("count = " + count);</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h5><ul><li>DTD约束</li></ul><p>文档开始注释会提示在xml文档前添加&lt;!DOCTYPE beans SYSTEM “bean.dtd”&gt;</p><p>第一个值为跟标签名字</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/javase31.JPG" alt></p><p>根据智能提示编写即可</p><p>三种引入方式</p><blockquote><p>内部DTD</p><p>外部DTD</p><blockquote><p>SYSTEM    本地DTD,后面一般跟个文件名</p><p>PUBLIC    公共DTD，后面一般跟个网址</p></blockquote></blockquote><ul><li>Schema约束</li></ul><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/javase32.JPG" alt></p><p>文档开头注释会提示应在xml中1导入的信息</p><p>&lt;beans xmlns=”<a href="http://www.itcast.cn/bean&quot;" target="_blank" rel="noopener">http://www.itcast.cn/bean&quot;</a>   xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a>   xsi:schemaLocation=”<a href="http://www.itcast.cn/bean" target="_blank" rel="noopener">http://www.itcast.cn/bean</a> bean-schema.xsd”&gt;</p><p>注意这是一个开始标签，添加一下结束标签即可，其余使用方法和DTD差不多</p><p>如果有多个schema约束文件名字冲突时，需使用targetname来指定，但显得很冗长，可以给其起个别名</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/javase33.JPG" alt></p><h5 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h5><p>用io流来解析太过繁琐，一般使用第三方提供的解析开发包</p><p><strong>三种解析方式</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/javase34.JPG" alt></p><p><strong>常用解析开发包</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/javase35.JPG" alt></p><h5 id="dom4j"><a href="#dom4j" class="headerlink" title="dom4j"></a>dom4j</h5><p>1.核心类 SAXReader:加载XML文件</p><p>2.Document对象,表示整个XML文件对象</p><p>3.元素:Element</p><p>获取根元素: document.getRootElement();</p><p>获取属性: element.attributeValue(“属性名”)</p><p>获取子元素:List<element> element.elements();//好几个重载</element></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被解析文件</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans&gt;</span><br><span class="line">&lt;bean id=<span class="string">"001"</span> className=<span class="string">"cn.itcast.demo.User"</span>&gt;</span><br><span class="line">&lt;property name="username" value="jack"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="password" value="123"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"002"</span> className=<span class="string">"cn.itcast.demo.Admin"</span>&gt;</span><br><span class="line">&lt;property name="username" value="admin"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="password" value="123321"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4JDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.把整个要解析的XML文件加载到内存</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="comment">//2.会生产一个Documnet对象</span></span><br><span class="line">Document document =reader.read(<span class="keyword">new</span> File(<span class="string">"beans.xml"</span>));</span><br><span class="line"><span class="comment">//3.获取根标签</span></span><br><span class="line">Element rootEle = document.getRootElement();</span><br><span class="line"><span class="comment">//4.获取根标签的子标签</span></span><br><span class="line">List&lt;Element&gt; beanElements = rootEle.elements();</span><br><span class="line"><span class="comment">//5.遍历elements集合</span></span><br><span class="line"><span class="keyword">for</span> (Element beanElement : beanElements) &#123;</span><br><span class="line"><span class="comment">//6.获取子标签bean的属性</span></span><br><span class="line">String idValue = beanElement.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">String classNameValue = beanElement.attributeValue(<span class="string">"className"</span>);</span><br><span class="line">System.out.println(idValue+<span class="string">".."</span>+classNameValue);</span><br><span class="line"><span class="comment">//获取bean的子标签</span></span><br><span class="line">List&lt;Element&gt; propertyElements = beanElement.elements();</span><br><span class="line"><span class="comment">//遍历property标签</span></span><br><span class="line"><span class="keyword">for</span> (Element propertyElement : propertyElements) &#123;</span><br><span class="line"><span class="comment">//propertyElement Property标签</span></span><br><span class="line"><span class="comment">//获取Property的属性</span></span><br><span class="line">String nameValue = propertyElement.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">String valuevalue = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">System.out.println(nameValue+<span class="string">"==="</span>+valuevalue);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;XML介绍&quot;&gt;&lt;a href=&quot;#XML介绍&quot; class=&quot;headerlink&quot; title=&quot;XML介绍&quot;&gt;&lt;/a&gt;XML介绍&lt;/h5&gt;&lt;p&gt;XML:可扩展的标记语言。&lt;/p&gt;
&lt;p&gt;可扩展的:扩展性特别强,语法上比较松&lt;/p&gt;
&lt;p&gt;标记: &lt;dog&gt; &lt;/dog&gt;&lt;/p&gt;
&lt;p&gt;我们用的是1.0的版本&lt;/p&gt;
&lt;p&gt;用于存放数据或配置文件&lt;/p&gt;
&lt;h5 id=&quot;XML的语法&quot;&gt;&lt;a href=&quot;#XML的语法&quot; class=&quot;headerlink&quot; title=&quot;XML的语法:&quot;&gt;&lt;/a&gt;XML的语法:&lt;/h5&gt;&lt;p&gt;a.文档声明&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;?xml version=”1.0” encoding=”UTF-8”?&amp;gt;&lt;/p&gt;
&lt;p&gt;版本一般选1.0，编码默认是utf8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;b.注释:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开始：&amp;lt;!– &lt;/p&gt;
&lt;p&gt;结束    –&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;c.元素(Element)/标签(Tag)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;必须有开始和结束标签组成  &amp;lt;dan&amp;gt; &amp;lt;/dan&amp;gt;&lt;/p&gt;
&lt;p&gt;一般只有一个跟标签，可以相互嵌套&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="xml" scheme="http://yoursite.com/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://yoursite.com/2019/09/20/MySQL/"/>
    <id>http://yoursite.com/2019/09/20/MySQL/</id>
    <published>2019-09-20T14:52:34.000Z</published>
    <updated>2020-01-31T12:55:01.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p>去MySQL官网下社区版，根据网上教程配置属性</p><p>还下了SQLyog，可以图形化界面写mysql（注册码百度一下很好找）</p><h4 id="数据库（DB）和数据库管理系统（DBMS）"><a href="#数据库（DB）和数据库管理系统（DBMS）" class="headerlink" title="数据库（DB）和数据库管理系统（DBMS）"></a>数据库（DB）和数据库管理系统（DBMS）</h4><p>数据库：存储数据的仓库，本质是一个文件管理系统</p><p>数据库管理系统：是一个软件，用来管理文件</p><p>我们常说的数据库，实际上是数据库管理系统，一般习惯称为数据库</p><p>一般不直接操作DB，而是通过DBMS来操作DB</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%931.JPG" alt></p><a id="more"></a><h4 id="表（java中一个类）"><a href="#表（java中一个类）" class="headerlink" title="表（java中一个类）"></a>表（java中一个类）</h4><p>行：一条记录    类的一个对象</p><p>列：一个字段    java中一个属性</p><h4 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h4><p>MySQL：开源免费，小型的数据库，已经被Oracle收购，开始收费（6.x之后）</p><p>Oracle：收费的大型数据库，收购了SUN,MySQL</p><p>DB2：IBM的数据库，常用在银行，效率差，安全性高</p><p>SQLSever：Microsoft的，常用于c#，.net</p><p>SyBase：已经淡出历史舞台，提供了一个专业的数据建模工具——PowerDesigner</p><p>SQLite：嵌入式的小型数据库，用于手机端</p><p>MySQL开启和关闭</p><p>法一：此电脑-&gt;管理-&gt;服务-&gt;找到MySQL即可</p><p>法二：以管理员权限打开command</p><p>net start mysql</p><p>net stop mysql</p><p>mysql -u root -p(直接跟密码或回车然后会提示输入密码)</p><p>法三：用SQLyog</p><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%932.JPG" alt></p><p>DDL：数据库定义语言    defination</p><p>主要是对数据库数据库表进行创建删除等维护操作</p><p>create 创建  drop  删除  alter  修改  show  查看</p><p>DCL：数据库操纵/控制语言    control</p><p>控制数据库访问权限</p><p>DML：数据库操作语言    manager</p><p>主要是对表中数据进行增删改</p><p>insert  增加  delete  删除  update  修改</p><p>DQL：数据库查询语言    query</p><p>主要是对表中数据进行查询</p><p>select  查询  from  从  where  条件</p><h4 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h4><ul><li><p>SQL语句可以单行或多行书写，以分号结尾</p></li><li><p>可使用空格和缩进来增强可读性</p></li><li><p>语句不区分大小写，关键字建议使用大写</p></li><li><p>/**/ 块注释</p><p># 单行注释</p></li><li><p>常用数据类型（还有很多，但不常用）</p><ul><li>int 整形</li><li>double 浮点型</li><li>varchar 字符串型</li><li>date 日期型 yyyy-mm-dd，没有时分秒</li></ul></li></ul><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><h5 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h5><p>​    增</p><p>​    create database 数据库名   采用默认编码，安装时选的</p><p>​    create database 数据库名 charset utf8</p><p>​    删</p><p>​    drop database 数据库名</p><p>​    改</p><p>​    修改数据库名字很麻烦</p><p>​    use 数据库名    修改正在使用的数据库</p><p>​    查</p><p>​    select database()    查询正在使用的数据库</p><p>​    show database    查询所有数据库</p><p>​    show create database 数据库名    查询某个数据库详细信息</p><h5 id="操作数据库表"><a href="#操作数据库表" class="headerlink" title="操作数据库表"></a>操作数据库表</h5><p>​    增</p><p>​    create table 表名（</p><p>​    字段名1 数据类型1（长度） [约束]，</p><p>​    字段名2 数据类型2（长度） [约束]</p><p>​    字段名2 数据类型2（长度） [约束]</p><p>​    ）；</p><p>​    删</p><p>​    drop table 表名</p><p>​    查</p><p>​    desc 表名 查看一个表的详细信息    description</p><p>​    show tables 查看所有的表</p><p>​    改</p><p>​    rename table 表名 to 新表名    改名字</p><h5 id="操作数据库表中的列"><a href="#操作数据库表中的列" class="headerlink" title="操作数据库表中的列"></a>操作数据库表中的列</h5><p>​    增</p><p>​    alter table 表名 add 列名 类型（长度） [约束]</p><p>​    删</p><p>​    alter table 表名 drop 列名</p><p>​    查（同查看表的信息）</p><p>​    desc 表名 查看一个表的详细信息</p><p>​    改    可以修改列的名字，类型，约束等等</p><p>​    alter table 表名 change 旧列名 新列名 类型(长度) 约束   修改列名,实际上类型和约束也可以一起改了</p><p>​    alter table 表名 modify 列名 类型（长度） 约束    修改类型和约束</p><p>​    alter table 表名 character set 字符集   一般不修改</p><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><p><strong>增</strong></p><p>insert into 表名 (列名1，列名2) values (value1，value2)    插入一条记录</p><p>列名可以选择一列或几列，前后必须一一对应</p><p>除了int，double，其它数据必须用””或’’引起来，推荐使用单引号</p><p>如果要插入的记录所有字段都有，则(列名1，列名2)可省略</p><p><strong>删</strong></p><p>delete from 表名    删除所有记录</p><p>delete from 表名 where 条件</p><p>改</p><p>update 表名 set 字段名=值 把该字段内所有的值都改了</p><p>update 表名 set 字段名=值 where 条件</p><h4 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h4><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><p>select [distinct] *|列名1，列名2 from 表名    查询表中所有行数据</p><p>distinct    去重查询</p><p>字段名+10    查询结果是表达式    运算查询</p><p>字段名+10 as 新名字    别名查询</p><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%933.JPG" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">where price &lt;&gt; 60;</span><br><span class="line"></span><br><span class="line">where not (price=60);</span><br><span class="line"></span><br><span class="line">where price &gt;= 400 and price &lt;= 600;</span><br><span class="line"></span><br><span class="line">where price between 400 and 600;</span><br><span class="line"></span><br><span class="line">where price in (400,600);价格是400和600的</span><br><span class="line"></span><br><span class="line">where price &gt;1000 or price &lt; 300;</span><br><span class="line"></span><br><span class="line">where pname like &apos;%霸%&apos;名字中含&apos;霸&apos;的商品</span><br><span class="line"></span><br><span class="line">where pname like &apos;_霸%&apos;名字中第二个字为&apos;霸&apos;的商品</span><br><span class="line"></span><br><span class="line">where pname is null;没有名字的，不可以用pname=null</span><br><span class="line"></span><br><span class="line">where price &gt;2000 and category_id in (&apos;c002&apos;,&apos;c003&apos;);</span><br><span class="line"></span><br><span class="line">where (price &gt;2000 and category_id=&apos;c002&apos;)</span><br><span class="line"></span><br><span class="line">or(price &gt;2000 and category_id=&apos;c003&apos;);</span><br></pre></td></tr></table></figure><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><p>对查询结果进行排序，关键字order by</p><p>格式：查询语句 order by 字段名 [ASC|DESC]</p><p>ASC 升序，从小到大，默认</p><p>DESC 降序，从大到小</p><h5 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h5><p>以前的查询都是横向记录查询，该查询是纵向个数查询</p><p>查询特点：查询到的是单一值</p><p>聚合函数：求记录数的聚合函数    </p><p>格式：聚合函数（字段名）</p><p>​    count函数会自动忽略空值</p><p>​    max：求最大值</p><p>​    min：求最小值</p><p>​    avg：求平均值</p><p>​    sum：求和</p><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><p>把查询到的结果分成几个组，先分组再查询，具体查询到的结果数，取决于分成几个组</p><p>若分组后还有条件需要判断，用having关键字</p><p>where写在基本查询语句后，且后面不可以写聚合函数</p><p>having写在分组查询后，且后面可以写聚合函数</p><p>格式：查询语句 group by 字段</p><p>select count(<em>) from product group by categroy_id having count(\</em>)&gt;1    </p><p>只显示个数大于1的商品分类，<strong>注意条件用having</strong></p><h5 id="完整查询过程"><a href="#完整查询过程" class="headerlink" title="完整查询过程"></a>完整查询过程</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%934.JPG" alt></p><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>只查询记录的一部分</p><p>格式：limit 数值一（开始下标，从0开始计数），数值二（需要查出的记录数）</p><p>查询公式：假设每次查n条</p><p>第m页  limit (m-1)*n,n</p><h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><p><strong>交叉查询</strong></p><p>格式：select * from 表一，表二</p><p>总字段=表一字段+表二字段</p><p>总记录数=表一记录数*表二记录数</p><p>但交叉查询无实际意义，实际上是一个矩阵（坐标）的笛卡尔，是另外两个查询的基础</p><p><strong>内连接查询    inner join</strong></p><p>隐式内连接查询：不写关键字inner join</p><p>select * from 表一，表二 where 表一.主键=表二.外键</p><p>显式内连接查询：写关键字inner join</p><p>select * from 表一 inner join 表二 on 表一.主键=表二.外键</p><p><strong>外连接查询    outer join</strong></p><p>左外连接：left outer join</p><p>select * from 表一 left outer join 表二 on 表一.主键=表二.外键</p><p>左外连接，以左表为主，左表中数据都会有</p><p>右外连接：right outer join</p><p>select * from 表一 right outer join 表二 on 表一.主键=表二.外键</p><p>右外连接，以右表为主，右表中数据都会有</p><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>一个查询的结果，做另一个查询的一部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category_id <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> <span class="keyword">category</span> <span class="keyword">WHERE</span> cname <span class="keyword">IN</span>(<span class="string">'化妆品'</span>，<span class="string">'家电'</span>))；</span><br></pre></td></tr></table></figure><h4 id="SQL备份和恢复"><a href="#SQL备份和恢复" class="headerlink" title="SQL备份和恢复"></a>SQL备份和恢复</h4><p>在SQLyog中，右击数据库进行导入和导出</p><h4 id="三个知识点"><a href="#三个知识点" class="headerlink" title="三个知识点"></a>三个知识点</h4><h5 id="两个约束"><a href="#两个约束" class="headerlink" title="两个约束"></a>两个约束</h5><p>主键约束(primary key):只能有一个，值必须唯一且不能为空</p><p>自动增长约束（auto_increment):初始值唯一，若被设置为一个值后，下一个值从这个的基础上增加</p><p>删除表所有数据的两种方式</p><p>delete from 表名    所有记录被删除，但自增值不会重置</p><p>truncate table 表名    删除所有记录，并重置自增值 底层是先摧毁表，再重建</p><p>乱码问题</p><p>在DOS中查看utf8编码的数据库数据时会出现乱码问题，因为DOS默认的是gbk</p><p>解决方法</p><p>临时方案：set names gbk    临时的确告诉数据库我们用gbk来查询</p><p>永久方案：修改my.ini的配置文件，不建议</p><h4 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h4><p>添加数据完整性==添加表约束</p><p>实体完整性：对数据行的约束，比如主键约束，唯一约束</p><p>域完整性：对数据列的约束</p><p>引用完整性：外键约束（多表关系）</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%936.JPG" alt></p><h4 id="各种约束"><a href="#各种约束" class="headerlink" title="各种约束"></a>各种约束</h4><p>主键约束：primary key    保证该字段唯一并且不为空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">-- 在创建表的时候，不直接在字段后添加，而是在表的约束区域添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span>，<span class="comment">-- 此处为约束区域</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid)</span><br><span class="line">&#125;;</span><br><span class="line">//创建表后，通过修改表的结构，给某个字段添加主键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid)</span><br><span class="line"></span><br><span class="line">//删除主键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;<span class="comment">-- 因为只能有一个主键，所以无需加字段名</span></span><br></pre></td></tr></table></figure><p>唯一约束：unique    保证该字段唯一，可以为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建表的时候，不直接在字段后添加，而是在表的约束区域添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span>，</span><br><span class="line"><span class="comment">-- 此处为约束区域</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> unique_bid <span class="keyword">UNIQUE</span>(bid)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">DROP</span> <span class="keyword">UNIQUE</span>(约束名);<span class="comment">-- /如果添加唯一约束时没起名字，默认是字段名</span></span><br></pre></td></tr></table></figure><p>自动增长约束：auto_increment    把该字段的值交给数据库去维护，默认每次加一（这个字段必须是建，多为主键）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建表的时候，不直接在字段后添加，而是在表的约束区域添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span>，</span><br><span class="line"><span class="comment">-- 此处为约束区域</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> bid <span class="built_in">INT</span> AUTO_CREMENT<span class="comment">-- /字段名 类型 约束</span></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> bid <span class="built_in">INT</span>;</span><br></pre></td></tr></table></figure><p>非空约束：not null    被约束字段不可为空值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性,<span class="comment">-- 类似auto_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性;</span><br></pre></td></tr></table></figure><p>默认约束：default    给字段添加一个默认值，如果添加记录时没赋值的话用默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="string">'JAVA 入门'</span>,</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性,<span class="comment">-- 类似auto_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性;</span><br></pre></td></tr></table></figure><h4 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h4><p>双向看，两边都是一个记录对另一边多个记录，这是多对多，否则为一对多</p><p>一对多：两张表即可，多个外键字段关联起来</p><p>多对多：需要一张中间表</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%939.JPG" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%937.JPG" alt></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多对多建表，一张学生表，一张课程表，一张中间表，至少两个字段</span></span><br><span class="line"><span class="comment">-- 创建三张表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student&#123;</span><br><span class="line"><span class="keyword">sid</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">sname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">sage <span class="built_in">INT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course&#123;</span><br><span class="line">cid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">cname <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_course_item&#123;</span><br><span class="line">student_id <span class="built_in">INT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">-- 添加外键约束核心</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_course_item <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> item_student_fk</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(student_id) REFENRENCE student (<span class="keyword">sid</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_course_item <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> item_course_fk</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(course_id) REFENRENCE course (cid);</span><br></pre></td></tr></table></figure><p>特例：有时候两张表内记录一对一，但字段过多，也会分成两张表</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一.SQL语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.分类:</span></span><br><span class="line"><span class="comment"> * DDL:数据库定义语言,主要对数据库,表,列,进行增删改查</span></span><br><span class="line"><span class="comment"> * a.创建数据库</span></span><br><span class="line"><span class="comment"> * create database 数据名   [charset 字符集名];</span></span><br><span class="line"><span class="comment"> * ***b.创建表</span></span><br><span class="line"><span class="comment"> * create table 表名(</span></span><br><span class="line"><span class="comment"> * 字段名 数据类型(长度) [约束],</span></span><br><span class="line"><span class="comment"> * 字段名 数据类型(长度) [约束]</span></span><br><span class="line"><span class="comment"> * );</span></span><br><span class="line"><span class="comment"> * SQL中的数据类型:</span></span><br><span class="line"><span class="comment"> * 整数:int</span></span><br><span class="line"><span class="comment"> * 小数:double</span></span><br><span class="line"><span class="comment"> * 字符串:varchar(长度),建议 用2的整数倍</span></span><br><span class="line"><span class="comment"> * 日期:date  格式: 'YYYY-MM-DD'</span></span><br><span class="line"><span class="comment"> * SQL中的约束:</span></span><br><span class="line"><span class="comment"> * a.主键约束:primary key, 唯一且非空</span></span><br><span class="line"><span class="comment"> * b.自动增长列约束:auto_increment,必须是数值类型,而且一般我们会给主键加上自增长约束</span></span><br><span class="line"><span class="comment"> * c.唯一约束:Unique, 多个记录的该列的值不能相同</span></span><br><span class="line"><span class="comment"> * d.非空约束: Not Null,不能为null</span></span><br><span class="line"><span class="comment"> * e.默认约束: default 默认值,为某一个字段设置默认值</span></span><br><span class="line"><span class="comment"> * f.外键约束: foreign key  多表查询</span></span><br><span class="line"><span class="comment"> * DCL:数据库控制语言</span></span><br><span class="line"><span class="comment"> * 了解(Oracle时说讲述)</span></span><br><span class="line"><span class="comment"> * **DML:数据库操作语言 : 对数据库中表中的数据进行增删改</span></span><br><span class="line"><span class="comment"> * 增:</span></span><br><span class="line"><span class="comment"> * insert into 表名  (字段1,字段2...) values (值1,值2,值3);</span></span><br><span class="line"><span class="comment"> * 注意事项:</span></span><br><span class="line"><span class="comment"> * 1.字段和值要一一对应</span></span><br><span class="line"><span class="comment"> * 2.如果是全字段,表名后面可以不写,但是values必须写上全部字段的值</span></span><br><span class="line"><span class="comment"> * 3.值的写法: 除了数值类型的值,其他值必须用''或者""括起来</span></span><br><span class="line"><span class="comment"> * 删:</span></span><br><span class="line"><span class="comment"> * delete from 表名 [where条件];</span></span><br><span class="line"><span class="comment"> * trancate table 表名:</span></span><br><span class="line"><span class="comment"> * 以上两种删除表中数据的区别:</span></span><br><span class="line"><span class="comment"> * delete from 表名:只会删除记录,不会重置自动增长值,下次插入数据时,接着增加自动增长值</span></span><br><span class="line"><span class="comment"> * trancate table 表名: 摧毁表,再重建,即会删除所有记录,也会重置自动增长值(重置为1)</span></span><br><span class="line"><span class="comment"> * 改:</span></span><br><span class="line"><span class="comment"> * update 表名 set 字段=值,字段=值 [where 条件]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * **DQL:数据库查询语言: 对数据库中表中的数据进行花式查询</span></span><br><span class="line"><span class="comment"> * 单表查询:</span></span><br><span class="line"><span class="comment"> * a.条件查询:</span></span><br><span class="line"><span class="comment"> * select * from 表名  where 条件:</span></span><br><span class="line"><span class="comment"> * 条件: </span></span><br><span class="line"><span class="comment"> * 大小: &gt; &lt; &gt;= &lt;= = != &lt;&gt;</span></span><br><span class="line"><span class="comment"> * 区间:</span></span><br><span class="line"><span class="comment"> * between .. and .. 注意:只能判断数值和日期</span></span><br><span class="line"><span class="comment"> * 比如: between '1990-05-30' and '2000-10-10'</span></span><br><span class="line"><span class="comment"> * age in (10,20)===&gt; age=10 or age = 20;</span></span><br><span class="line"><span class="comment"> * 为空:</span></span><br><span class="line"><span class="comment"> * is null;</span></span><br><span class="line"><span class="comment"> * is not null</span></span><br><span class="line"><span class="comment"> * 模糊查询:</span></span><br><span class="line"><span class="comment"> * like '表达式',  符号_表示任意一个字符  符号%表示任意个任意字符</span></span><br><span class="line"><span class="comment"> * b.排序查询</span></span><br><span class="line"><span class="comment"> * select * from 表名 order by 字段  ASC(默认,升序)|DESC(降序);</span></span><br><span class="line"><span class="comment"> * c.聚合查询:</span></span><br><span class="line"><span class="comment"> * select count(*)|max(数值字段)|min(数值字段)|sum(数值字段)|avg(数值字段)from 表名</span></span><br><span class="line"><span class="comment"> * 注意事项:聚合函数查询出来的只有一个值,会忽略null值</span></span><br><span class="line"><span class="comment"> * d.分组查询:</span></span><br><span class="line"><span class="comment"> * select 分组字段,聚合函数 from 表名 group by 某个字段;</span></span><br><span class="line"><span class="comment"> * 在分组查询中,要查询的字段必须是分组字段,也可以是聚合函数</span></span><br><span class="line"><span class="comment"> * e.分页查询</span></span><br><span class="line"><span class="comment"> * select * from 表名 limit 第几条记录,要查询第三条记录</span></span><br><span class="line"><span class="comment"> * 比如: 我要查询第m页,每页有n条记录</span></span><br><span class="line"><span class="comment"> * 第一页: limit (1-1)*n,n;</span></span><br><span class="line"><span class="comment"> * 第二页: limit (2-1)*n,n;</span></span><br><span class="line"><span class="comment"> * 第m页:  limit  (m-1)*n;n</span></span><br><span class="line"><span class="comment"> * f.去重复查询</span></span><br><span class="line"><span class="comment"> * select distinct 字段 from 表名;</span></span><br><span class="line"><span class="comment"> * 查询出所有该字段,并且去掉重复值</span></span><br><span class="line"><span class="comment"> * 多表:</span></span><br><span class="line"><span class="comment"> * 1.为什么使用多表? 回顾第二天视频</span></span><br><span class="line"><span class="comment"> * 2.表与表之间的关系:</span></span><br><span class="line"><span class="comment"> * 一对多:商品分类 和 商品信息, 学生和考试成绩,省和市</span></span><br><span class="line"><span class="comment"> * 必须两张表,一张主表,一张从表,</span></span><br><span class="line"><span class="comment"> * 原则:从表必须有一个外键,这个外键 引用 主表的主键</span></span><br><span class="line"><span class="comment"> * 如何给从表添加外键约束</span></span><br><span class="line"><span class="comment"> * Alter table 从表 add constraint 主表_从表_fk</span></span><br><span class="line"><span class="comment"> * foreign key (从表外键名) references 主表 (主键名);</span></span><br><span class="line"><span class="comment"> * 多对多: 学生和课程, 演员和角色 , 老师和学生</span></span><br><span class="line"><span class="comment"> *    必须有三张表,两张正常表,一张中间表</span></span><br><span class="line"><span class="comment"> *  原则: 中间表,至少有两个字段,分别是外键,引用两张的主键</span></span><br><span class="line"><span class="comment"> * Alter table 中间表  add constraint _fk</span></span><br><span class="line"><span class="comment"> * foreign key (第一个外键名) references 第一张表 (主键名);</span></span><br><span class="line"><span class="comment"> * Alter table 中间表  add constraint _fk</span></span><br><span class="line"><span class="comment"> * foreign key (第二个外键名) references 第二张表 (主键名);</span></span><br><span class="line"><span class="comment"> * 一对一: QQ号码,和QQ详细信息</span></span><br><span class="line"><span class="comment"> * 可以用一张表示</span></span><br><span class="line"><span class="comment"> * 多表查询语句:</span></span><br><span class="line"><span class="comment"> * 1.交叉查询: 本身有错误的 ,实际上是一个叫做笛卡尔积的东西</span></span><br><span class="line"><span class="comment"> * select * from 表1,表2;</span></span><br><span class="line"><span class="comment"> * 2.内连接:在交叉连接的基础上 添加条件(一般是主表.主键=从表.外键)</span></span><br><span class="line"><span class="comment"> * 隐式内连接: 不写inner join 后面的条件用where判断</span></span><br><span class="line"><span class="comment"> * select * from 表A,表B where 表A.主键=表B.外键</span></span><br><span class="line"><span class="comment"> * 显示内连接: 写上inner join 后面的条件用on判断</span></span><br><span class="line"><span class="comment"> * select * from 表A inner join 表B on 表A.主键=表B.外键</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.外链接:关键字 outer join</span></span><br><span class="line"><span class="comment"> * 左外连接: left outer join,以左表作为,如果右表中没有和左表匹配的那条记录</span></span><br><span class="line"><span class="comment"> * 那么也会将这条记录查询出来,没有值的地方填充null;</span></span><br><span class="line"><span class="comment"> * 右外连接: right outer join</span></span><br><span class="line"><span class="comment"> * 以右表作为,如果左表中没有和右表匹配的那条记录</span></span><br><span class="line"><span class="comment"> * 那么也会将这条记录查询出来,没有值的地方填充null;</span></span><br><span class="line"><span class="comment"> * 4.子查询:</span></span><br><span class="line"><span class="comment"> * 一条select语句的结果,作为另外一条select语句的一部分</span></span><br><span class="line"><span class="comment"> * 比如: 商品分类表和 商品详情表为例</span></span><br><span class="line"><span class="comment"> * 查询 商品名字为 "霸王" 的商品的分类名</span></span><br><span class="line"><span class="comment"> * select cname from 商品分类表 where 分类id = </span></span><br><span class="line"><span class="comment"> * (select 商品分类id from 商品详情表 where 商品名="霸王");</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h3&gt;&lt;h4 id=&quot;软件安装&quot;&gt;&lt;a href=&quot;#软件安装&quot; class=&quot;headerlink&quot; title=&quot;软件安装&quot;&gt;&lt;/a&gt;软件安装&lt;/h4&gt;&lt;p&gt;去MySQL官网下社区版，根据网上教程配置属性&lt;/p&gt;
&lt;p&gt;还下了SQLyog，可以图形化界面写mysql（注册码百度一下很好找）&lt;/p&gt;
&lt;h4 id=&quot;数据库（DB）和数据库管理系统（DBMS）&quot;&gt;&lt;a href=&quot;#数据库（DB）和数据库管理系统（DBMS）&quot; class=&quot;headerlink&quot; title=&quot;数据库（DB）和数据库管理系统（DBMS）&quot;&gt;&lt;/a&gt;数据库（DB）和数据库管理系统（DBMS）&lt;/h4&gt;&lt;p&gt;数据库：存储数据的仓库，本质是一个文件管理系统&lt;/p&gt;
&lt;p&gt;数据库管理系统：是一个软件，用来管理文件&lt;/p&gt;
&lt;p&gt;我们常说的数据库，实际上是数据库管理系统，一般习惯称为数据库&lt;/p&gt;
&lt;p&gt;一般不直接操作DB，而是通过DBMS来操作DB&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%95%B0%E6%8D%AE%E5%BA%931.JPG&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/09/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/17/正则表达式/</id>
    <published>2019-09-17T14:47:12.000Z</published>
    <updated>2020-01-31T12:54:49.704Z</updated>
    
    <content type="html"><![CDATA[<h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><p>正则表达式（regular expression，简称regex）：是一些用来匹配和处理文本的字符串</p><p>正则表达式通常被简称为模式，其实是一些由字符构成的字符串</p><p>这些字符可以是普通字符（纯文本）或元字符（有特殊含义的特殊字符）</p><h5 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h5><p> .    匹配任何单个的字符</p><p>\    对特殊字符进行转义</p><h5 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符"></a>匹配一组字符</h5><p>[和]    定义字符集合    [0-9a-zA-Z]</p><p>-    定义字符区间    0-9 a-z</p><p>^    对字符集合进行取非匹配    [^0-9a-zA-Z]</p><a id="more"></a><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><ul><li>空白字符</li></ul><p>[\b]    回退（删除）一个字符</p><p>\f    换页符</p><p>\n    换行符</p><p>\r    回车符</p><p>\t    制表符（tab）</p><p>\v    垂直制表符</p><p>\s    任何一个空白字符    [\f\n\r\t\v]</p><p>\S    任何一个非空白字符</p><ul><li>匹配数字</li></ul><p>\d    任何一个数字</p><p>\D    任何一个非数字</p><ul><li>匹配字母和数字</li></ul><p>\w    任何一个字母，数字和下划线</p><p>\W    任何一个非字母，数字和下划线</p><ul><li>进制</li></ul><p>\x    十六进制</p><p>\0    八进制</p><ul><li>POSIX字符串</li></ul><p>[[:alnum:]]                 数字字符</p><p>[[:alpha:]]                  字母字符</p><p>[[:lower:]]                  小写字母字符</p><p>[[:print:]]                    可显示的字符</p><p>[[:blank:]]                   空格(space)与定位字符</p><p>[[:punct:]]                   除[[:cntrl:]]和[[:alnum:]]外</p><p>[[:cntrl:]]                     ASCII控制字符(0-31和127)</p><p>[[:space:]]                   空白(whitespace)字符</p><p>[[:upper:]]                   大写字母字符</p><p>[[:digit:]]                      数字字符</p><p>[[:graph:]]                   非空格(nonspace)字符</p><p>[[:xdigit:]]                    十六进制数字字符</p><h5 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h5><p>+    给字符或字符集合作为后缀，表示匹配一个或多个字符或字符合集</p><p>*    给字符或字符集合作为后缀，表示匹配零个或多个字符或字符合集</p><p>{num1，num2}    精确重复次数    {6} {1,4}  {3,}</p><p>?    给字符或字符集合作为后缀，表示匹配零个或一个字符或字符合集</p><p>前三个为贪婪型元字符，为了防止过度匹配，会在其后加个？变为懒惰型元字符</p><h5 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h5><p>\b    用来匹配单词的开始或结束（\w与非\w之间）    只匹配一个位置，而不匹配任何字符</p><p>\B    匹配一个前后都不是单词边界</p><p>\&lt;    单词开始    \&gt;    单词结束</p><p>^    字符串开始    $    字符串结束</p><p>(?m)    分行匹配模式，必须写在模式最前面</p><h5 id="子表达式"><a href="#子表达式" class="headerlink" title="子表达式"></a>子表达式</h5><p>(和)    字表达式可以多层嵌套</p><h5 id="回溯引用：前后一致匹配"><a href="#回溯引用：前后一致匹配" class="headerlink" title="回溯引用：前后一致匹配"></a>回溯引用：前后一致匹配</h5><p>\n    匹配前面第n个子表达式</p><p>$n    替换时使用匹配上一条查询中的第n个子表达式匹配到的内容</p><ul><li>大小写转换（替换时使用）</li></ul><p>\E    结束\L或\U转换</p><p>\I    把下一个字符转换为小写</p><p>\L    把后面的字符转换为小写</p><p>\u    把下一个字符转换为大写</p><p>\U    把后面的字符转换为大写</p><h5 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h5><p>都是只匹配但不消费</p><p>(?=字符)    正向前查找，匹配到指定字符，停止匹配</p><p>(?!字符)    正向前查找，匹配到不是指定字符的，停止匹配</p><p>(?&lt;=字符)    正向后查找，匹配到指定字符，停止匹配</p><p>(&lt;=字符)    负向后查找，匹配到不是指定字符，停止匹配</p><h5 id="嵌入条件"><a href="#嵌入条件" class="headerlink" title="嵌入条件"></a>嵌入条件</h5><p>(?(n)regex)    如果前一个子表达式匹配到了则执行该正则</p><p>(?(前后查找)regex)    如果前后查找成功了则执行该正则</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h5&gt;&lt;p&gt;正则表达式（regular expression，简称regex）：是一些用来匹配和处理文本的字符串&lt;/p&gt;
&lt;p&gt;正则表达式通常被简称为模式，其实是一些由字符构成的字符串&lt;/p&gt;
&lt;p&gt;这些字符可以是普通字符（纯文本）或元字符（有特殊含义的特殊字符）&lt;/p&gt;
&lt;h5 id=&quot;匹配单个字符&quot;&gt;&lt;a href=&quot;#匹配单个字符&quot; class=&quot;headerlink&quot; title=&quot;匹配单个字符&quot;&gt;&lt;/a&gt;匹配单个字符&lt;/h5&gt;&lt;p&gt; .    匹配任何单个的字符&lt;/p&gt;
&lt;p&gt;\    对特殊字符进行转义&lt;/p&gt;
&lt;h5 id=&quot;匹配一组字符&quot;&gt;&lt;a href=&quot;#匹配一组字符&quot; class=&quot;headerlink&quot; title=&quot;匹配一组字符&quot;&gt;&lt;/a&gt;匹配一组字符&lt;/h5&gt;&lt;p&gt;[和]    定义字符集合    [0-9a-zA-Z]&lt;/p&gt;
&lt;p&gt;-    定义字符区间    0-9 a-z&lt;/p&gt;
&lt;p&gt;^    对字符集合进行取非匹配    [^0-9a-zA-Z]&lt;/p&gt;
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://yoursite.com/2019/09/04/git%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/04/git使用/</id>
    <published>2019-09-04T15:43:18.000Z</published>
    <updated>2020-02-03T13:35:29.655Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git版本控制系统"><a href="#Git版本控制系统" class="headerlink" title="Git版本控制系统"></a>Git版本控制系统</h4><ul><li>记录版本信息（记录每一次的修改）</li><li>方便团队相互之间协作，共同开发</li></ul><p>常用版本控制系统</p><ul><li>svn/cvs：集中式版本控制系统    共用一个服务器，一旦出问题就全完了，保存差异</li><li>git：分布式版本控制系统    保存的是所有文件的快照，每个人本地都相当于一个服务器</li></ul><h4 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h4><p>这个网上很常见，自行参考网上教程</p><h4 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h4><h5 id="目的：托管项目代码"><a href="#目的：托管项目代码" class="headerlink" title="目的：托管项目代码"></a>目的：托管项目代码</h5><p>工作区 -&gt; 暂存区 -&gt; 历史区</p><h5 id="1-Git的全局配置"><a href="#1-Git的全局配置" class="headerlink" title="1.Git的全局配置"></a>1.Git的全局配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一次安装完成git后，要在全局环境下配置基本信息：我是谁？</span><br><span class="line"><span class="meta">$</span> git config -l查看配置信息</span><br><span class="line"><span class="meta">$</span> git config --global -l查看全局配置信息</span><br><span class="line">配置全局信息，用户名和邮箱</span><br><span class="line"><span class="meta">$</span> git config --global user.name 'xxx'</span><br><span class="line"><span class="meta">$</span> git config --global user.email 'xxx@xx.xx'</span><br><span class="line">初始化ssh</span><br><span class="line"><span class="meta">$</span> ssh-Keygon先是确定保存路径，再是密码，三次回车即可</span><br><span class="line">在C:\Users\asus\.ssh用记事本打开id_ssh.pub,复制其中内容</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git6.JPG" alt></p><a id="more"></a><h5 id="2-创建仓库完成版本控制"><a href="#2-创建仓库完成版本控制" class="headerlink" title="2.创建仓库完成版本控制"></a>2.创建仓库完成版本控制</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">创建本地git仓库</span><br><span class="line"><span class="meta">$</span> git init</span><br><span class="line">会生成一个隐藏文件夹“.git”（这个文件夹很重要，暂存区和历史区以及一些其他数据都在里面存着）</span><br><span class="line"></span><br><span class="line">在本地编写完成代码后（在工作区），把一些文件提交到暂存区</span><br><span class="line"><span class="meta">$</span> git add xxx把某一个文件或者文件夹提交到暂存区</span><br><span class="line"><span class="meta">$</span> git add .|| git add A把当前仓库中所有最新修改的文件都提交到暂存区</span><br><span class="line"><span class="meta">$</span> git status查看当前文件的状态（红色代表工作区，绿色代表暂存区，看不见东西代表所有东西都已提交到历史区）</span><br><span class="line"></span><br><span class="line">把暂存区内容提交到历史区</span><br><span class="line"><span class="meta">$</span> git commit -m'描述信息'</span><br><span class="line">本地版本库回退</span><br><span class="line"><span class="meta">$</span> git checkout -- 文件名回到最近的一次add/commit时的状态</span><br><span class="line"><span class="meta">$</span> git reset --hard/mixed/soft HEAD~num</span><br><span class="line">--hard回退全部，包括HEAD，index，working tree</span><br><span class="line">--mixed 回退部分，包括HEAD，index</span><br><span class="line">--soft只回退HEAD</span><br><span class="line">查看历史版本信息（历史记录）</span><br><span class="line"><span class="meta">$</span> git log</span><br><span class="line"><span class="meta">$</span> git reflog包含回滚的信息可以获得版本号</span><br><span class="line">差异比较</span><br><span class="line"><span class="meta">$</span> git diff比较工作区和暂存区</span><br><span class="line"><span class="meta">$</span> git diff --cached比较暂存区和本地库最近一次提交的区别</span><br><span class="line"><span class="meta">$</span> git diff HEAD比较工作区和本地库最近一次提交的区别</span><br><span class="line">分支操作</span><br><span class="line"><span class="meta">$</span> git branch -d 分支名删除分支</span><br><span class="line"><span class="meta">$</span> git remote push 分支一：分支二将分支一推给分支二</span><br><span class="line"><span class="meta">$</span> git branch查看现在有哪些分支</span><br><span class="line"><span class="meta">$</span> git checkout 分支名切换到分支</span><br><span class="line"><span class="meta">$</span> git checkout -b 分支名创建并切换到新分支</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git7.JPG" alt></p><p>通过移动head指针来改变版本</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git8.JPG" alt></p><p>一般多分支同时开发，然后由项目组长来分支合并</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git5.jpg" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git4.jpg" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git3.jpg" alt></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git2.jpg" alt></p><p><strong>git小技巧</strong></p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git9.JPG" alt></p><p>把一些暂时用不到的修改，暂存起来</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>一个网站（开源的代码管理平台），用户注册号，可以在自己账户下创建仓库，用来管理项目的源代码（源代码基于git传到仓库中）</p><p>我们所熟知的插件，类库，框架等都在这个平台上有托管，我们可以下载观看和研究源码等</p><p><strong>settings用户设置</strong></p><ul><li>profile    修改自己的基本信息</li><li>account    作用修改用户名</li><li>security    可以改自己的密码</li><li>emails    私有仓库作为内部团队协作管理的项目</li><li>……</li></ul><p>new  repository -&gt; 填写信息，公私有都免费 -&gt; create repository</p><ul><li>public    公共开源</li><li>private    私有，作为内部团队项目</li></ul><p>settings -&gt; 删除仓库</p><p>​               -&gt; collaborators 设置协助开发人员，需对方同意邀请</p><p>code可以查看历史版本和分支信息</p><p><strong>把本地仓库信息提交到远程仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">查看本地仓库和哪些远程仓库保持连接</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br><span class="line">让本地仓库和远程仓库创建一个连接origin是随便起的一个名字，但一般都用这个</span><br><span class="line"><span class="meta">$</span> git remote add origin [仓库地址]</span><br><span class="line"><span class="meta">$</span> git remote rename old new重命名</span><br><span class="line">解除关联信息</span><br><span class="line"><span class="meta">$</span> git remote rm origin</span><br><span class="line">提交之前最好先拉取</span><br><span class="line"><span class="meta">$</span> git pull origin master</span><br><span class="line">将本地代码提交到远程仓库（第一次需要输入用户名和密码）</span><br><span class="line"><span class="meta">$</span> git push origin master</span><br><span class="line">将远程仓库代码拉取到本地</span><br><span class="line"><span class="meta">$</span> git clone [远程仓库git地址] [别名，默认为仓库名，也可以起一个作为拉取后的文件夹名]</span><br><span class="line">/*</span><br><span class="line"> *真实项目开发流程：</span><br><span class="line"> *1.组长或者负责人先创建中央仓库</span><br><span class="line"> *2.小组成员基于$ git clone 把远程仓库及默认的内容克隆到本地（解决了三个事情：初始化一个</span><br><span class="line"> 本地仓库“git init”，和对应的远程仓库也保持了关联“git remote add”，把远程仓库默认内人拉取到本地</span><br><span class="line"> “git pull”</span><br><span class="line"> *3.每个组员写自己的程序后，基于“git add/git commit”把自己修改的内容存放到历史区，然后通过</span><br><span class="line"> “git pull/git push”把本地信息和远程仓库信息保持同步即可（可能涉及冲突处理）</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/git1.jpg" alt></p><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><p>node package manger:NODE模块管理工具，根据NPM我们可快速安装、卸载所需要的资源文件</p><p>区NODE官网：下载NODE重启支持版，安装NODE后，NPM也跟着安装了</p><p>基于npm是从<a href>npmjs.com</a>平台下下载安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//在终端中检测安装是否成功，出现版本号即成功了</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npm install xxx把模块安装在当前项目中（node_modules）</span><br><span class="line">$ npm install xxx -g把模块安装在全局环境中</span><br><span class="line">$ npm i xxx@<span class="number">1.0</span>.<span class="number">0</span>安装指定版本号的模块</span><br><span class="line">$ npm view xx version &gt; xxx.version.json查看某个模块的版本信息（输出到指定json文件中）</span><br><span class="line"></span><br><span class="line">$ npm init -y初始化当前项目的配置依赖清单</span><br><span class="line">$ npm i xxx -save把模块保存在清单生产依赖中</span><br><span class="line">$ npm i xxx --save-dev把模块保存在清单开发依赖中</span><br><span class="line">$ npm install跑环境，按照清单安装所需模块</span><br><span class="line"></span><br><span class="line">$ npm root -g查看全局安装模块的目录</span><br><span class="line">$ npm -uninstall xxx</span><br><span class="line">$ npm -uninstall xxx -g卸载安装过的模块</span><br></pre></td></tr></table></figure><h4 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h4><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%9F%A5%E6%89%BE%E9%A1%B9%E7%9B%AE1.png" alt></p><p><a href="https://help.github.com/en/github/searching-for-information-on-github/searching-for-repositories" target="_blank" rel="noopener">更多高级搜索</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Git版本控制系统&quot;&gt;&lt;a href=&quot;#Git版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;Git版本控制系统&quot;&gt;&lt;/a&gt;Git版本控制系统&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;记录版本信息（记录每一次的修改）&lt;/li&gt;
&lt;li&gt;方便团队相互之间协作，共同开发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用版本控制系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;svn/cvs：集中式版本控制系统    共用一个服务器，一旦出问题就全完了，保存差异&lt;/li&gt;
&lt;li&gt;git：分布式版本控制系统    保存的是所有文件的快照，每个人本地都相当于一个服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Git安装&quot;&gt;&lt;a href=&quot;#Git安装&quot; class=&quot;headerlink&quot; title=&quot;Git安装&quot;&gt;&lt;/a&gt;Git安装&lt;/h4&gt;&lt;p&gt;这个网上很常见，自行参考网上教程&lt;/p&gt;
&lt;h4 id=&quot;使用GitHub&quot;&gt;&lt;a href=&quot;#使用GitHub&quot; class=&quot;headerlink&quot; title=&quot;使用GitHub&quot;&gt;&lt;/a&gt;使用GitHub&lt;/h4&gt;&lt;h5 id=&quot;目的：托管项目代码&quot;&gt;&lt;a href=&quot;#目的：托管项目代码&quot; class=&quot;headerlink&quot; title=&quot;目的：托管项目代码&quot;&gt;&lt;/a&gt;目的：托管项目代码&lt;/h5&gt;&lt;p&gt;工作区 -&amp;gt; 暂存区 -&amp;gt; 历史区&lt;/p&gt;
&lt;h5 id=&quot;1-Git的全局配置&quot;&gt;&lt;a href=&quot;#1-Git的全局配置&quot; class=&quot;headerlink&quot; title=&quot;1.Git的全局配置&quot;&gt;&lt;/a&gt;1.Git的全局配置&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;第一次安装完成git后，要在全局环境下配置基本信息：我是谁？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git config -l		查看配置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git config --global -l		查看全局配置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;配置全局信息，用户名和邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git config --global user.name &#39;xxx&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git config --global user.email &#39;xxx@xx.xx&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;初始化ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; ssh-Keygon	先是确定保存路径，再是密码，三次回车即可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在C:\Users\asus\.ssh用记事本打开id_ssh.pub,复制其中内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/git6.JPG&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>javaSE</title>
    <link href="http://yoursite.com/2019/08/16/javaSE/"/>
    <id>http://yoursite.com/2019/08/16/javaSE/</id>
    <published>2019-08-16T05:15:33.000Z</published>
    <updated>2020-02-09T14:04:34.098Z</updated>
    
    <content type="html"><![CDATA[<h4 id="入门及环境搭建"><a href="#入门及环境搭建" class="headerlink" title="入门及环境搭建"></a>入门及环境搭建</h4><h5 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h5><p>进入Oracle官网，下载相应版本，最近下载好像都得注册个账号</p><p>下完按到所需目录，一般默认，一直下一步即可，完了设置一下环境变量</p><p>此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;编辑path，把bin目录路径加入</p><p>classpath也可以设置</p><p>在cmd中，输入java -version检查是否安装成功</p><p>javac 文件路径（编译，生成。class文件）</p><p>java 文件名，不加后缀，运行</p><p><strong>IDE选择</strong></p><p>目前比较流行的是eclipse和IDEA，我更喜欢IDEA，熟练了快捷键和各种模板之后会用得很舒服</p><h5 id="语言特点"><a href="#语言特点" class="headerlink" title="语言特点"></a>语言特点</h5><p>通过编译成统一的字节码，不同平台下载对应JVM来实现跨平台</p><p>完全面向对象，简单，高性能，分布式，多线程，健壮</p><p>JDK（用于开发）-&gt;JRE（运行环境）-&gt;JVM(依次包含)</p><p>java SE    标准版，定位于个人计算机用户</p><p>java EE    企业版，定位于服务器端领域</p><p>java ME    微型版，定位于消费电子产品的应用</p><p>越高级语言越容易入门，但要精通还需沉下心来</p><h4 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h4><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>单行，多行，文档注释</p><h5 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h5><p>虽然不同语言之间会有细微区别，但为了便于编写，感觉大多数语言都推荐采用比较大众的规范</p><p>不可以是java关键字，并且大小写敏感</p><p>类名    大驼峰命名法</p><p>方法和变量    小驼峰命名法</p><p>常量    大写</p><p>数据类型向上隐士转换，向下需要显示加括号强转</p><h5 id="基本数据类型（四类八种）"><a href="#基本数据类型（四类八种）" class="headerlink" title="基本数据类型（四类八种）"></a>基本数据类型（四类八种）</h5><p>byte(1)  boolean(1)  short(2)  char(2)unicode字符集  int()4  float(4)  long(8)  double(8)</p><p><strong>限制double小数点数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.00"</span>);</span><br><span class="line">df.format(total);</span><br></pre></td></tr></table></figure><p><strong>string与基本类型转换</strong></p><p>包装类的parse和tostring方法</p><h5 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h5><p>string，数组，集合ArrayList，Scanner，Random，自定义类型</p><a id="more"></a><h4 id="包的声明和访问"><a href="#包的声明和访问" class="headerlink" title="包的声明和访问"></a>包的声明和访问</h4><p>包的本质就是文件夹，在包名中以.来区分上下级文件关系</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase8.JPG" alt></p><p>作用：分类管理文件</p><p>包的声明：package 包名        指示某个类在哪个包下    包的声明必须和类的实际位置保持一致</p><p>包的导入：用来告诉编译器我们要用的类在哪个包下        import 包名.类名</p><p>不导包时需采用全限定类名：包名.类名（所有用到类名的地方都需这样写）</p><h4 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h4><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase9.JPG" alt></p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象是一种编程思想，是相当于面向过程的</p><p>面向过程：遇到问题，亲力亲为一步一步解决        核心理念：谁的功能谁负责</p><p>面向对象：遇到一个问题，找具有解决这个问题能力的对象，调用它的方法</p><p>面向对象三大特性：封装（安全性），继承（拓展性），多态（）</p><p>类的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="comment">//成员类名</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个标准的类封装：隐藏细节，对外暴露公共防蚊1方式构造：无参必须有，全参最好有</span></span><br><span class="line"><span class="comment">//类名作为方法参数或返回值时需要传入或返回的应该是该类的对象</span></span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase1.JPG" alt></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是两个类之间的关系，子类继承父类</p><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><p>区分局部变量和成员变量同名的情况</p><p>this的本质：实际上是个对象    谁调用的方法，this指的就是谁</p><p>匿名对象：（可用可不用）    没有名字的对象</p><p>只创建对象，但不用变量接收</p><p>在一些用来传参后续不调用时使用</p><p>特点：匿名对象也是一个对象，具有对象所有功能</p><p>​            每次调用都是一个新的对象，所一每个对象只能使用一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.xxx<span class="comment">//调用该对象属性</span></span><br><span class="line"><span class="keyword">this</span>.aaa()<span class="comment">//调用该对象方法</span></span><br><span class="line"><span class="comment">//高级使用：用来调用本类的其他构造通过输入不同参数来调用不同构造</span></span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase4.JPG" alt></p><h5 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h5><p>区分子类和父类成员同名的情况，但默认优先调用子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.xxx<span class="comment">//调用父类属性</span></span><br><span class="line"><span class="keyword">super</span>.aaa()<span class="comment">//调用父类方法</span></span><br><span class="line"><span class="keyword">super</span>();<span class="comment">//调用父类构造方法，通过输入不同参数来调用不同构造，默认调用无参构造</span></span><br><span class="line"><span class="comment">//无论调用子类那个构造，都会先调用父类构造，符合单一职责原则，一个类只需负责给本类变量初始化</span></span><br></pre></td></tr></table></figure><h5 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承必须合理人是人他妈生的，妖是妖他妈生的</span></span><br><span class="line"><span class="comment">//继承中的成员抽取了子类中的共性内容</span></span><br><span class="line"><span class="comment">//子类会自动继承父类中所有成员，但private不可访问</span></span><br><span class="line"><span class="comment">//创建子类对象时会先创建其父类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承后成员变量不同时，没有任何问题，相同时优先访问子类</span></span><br><span class="line"><span class="comment">//继承后成员方法不同时，没有任何问题，相同时(子类重写了父类方法时)优先访问子类，但可以通过super.方法名访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只能单继承，但可以多层继承（直接父类唯一，但可以有多个间接父类）</span></span><br><span class="line"><span class="comment">//多继承的话调用方法时会产生不确定性，同名父类成员不知道该掉哪个</span></span><br></pre></td></tr></table></figure><p>继承大大提高代码重用性</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase3.JPG" alt></p><ul><li><p>方法的重载：在同一个类中，方法名相同，但参数列表不同（参数类型，参数顺序，参数个数任一不同）</p></li><li><p>方法的重写（覆盖，覆写override）：子类中出现了和父类一模一样的方法</p><ul><li>重写原因：当子类发现继承过来的方法不适用时需要重写自己的方法</li><li>重写要求：该方法子类权限需大于等于父类权限（一般都是相同权限）    public  protected  default  private</li></ul><p>private方法不可重写    方法名，参数列表，返回值类型必须一模一样</p></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>一个对象的多种状态</p><p>java中的前提：必须有字符类关系，必须有方法的重写</p><h5 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h5><p>抽象类：以前一个类中包含抽象方法即为抽象类，现在只要由关键字abstract修饰即为抽象类</p><p>抽象类不可以实例化，天生就是作为父类的</p><p>抽象方法：只有声明而没有实现        向上抽取时会出现一种特殊情况，方法功能声明相同，但方法主体不同，这时只抽取方法声明，所得即为抽象方法        必须用关键字abstract修饰        不能调用，为了强制子类去重写</p><blockquote><p>类名作为返回值或参数时，传递和返回的应是该类对象</p><p>抽象类作为返回值或参数时，传递和返回的应是该类的子类的对象</p></blockquote><p>链式编程：当返回值为调用这个方法的对象时，便可以链式的调用下去</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase5.JPG" alt></p><p><strong>小练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例：武警开坦克打飞机</span></span><br><span class="line"><span class="comment">//名词提取：武警 坦克  飞机再分析每个类对应属性和方法</span></span><br></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>类：一堆具有共同属性和成员方法的对象的集合</p><p>接口：方法的集合，只能定义抽象方法    天生作为父接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class类</span></span><br><span class="line"><span class="comment">//abstract class抽象类</span></span><br><span class="line"><span class="comment">//interface接口</span></span><br><span class="line"><span class="comment">//enum枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line"><span class="comment">//不能定义普通成员变量，只能定义抽象方法</span></span><br><span class="line"><span class="comment">//可以定义常量public static final 变量名即使不加修饰，编译器也会自动添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发中常用模式：一个类继承一个抽象类，实现多个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> <span class="title">B</span> <span class="keyword">implements</span> 接口<span class="title">A</span>，接口<span class="title">B</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类与类之间是单继承，一个子类只能有一个直接父类</p><p>接口与接口之间支持多继承也支持多层继承</p><p>类与接口之间不叫继承（extends）而是实现（implements）    可以多实现</p><p><strong>比较抽象类和接口</strong></p><p>相同点：都不能实例化，都是作为父类/父接口，子类继承/实现都不行重写抽象方法</p><p>不同点：抽象类中不全是抽象方法，可以有普通成员变量，修饰的关键字不同    弥补了java的单继承</p><p>思想上的区别：抽象类中必须定义整个体系的共性内容</p><p>​                            接口中定义整个继承体系之外额外的扩展功能（谁想有这些功能就来是实现下这个接口）</p><p>优先使用接口    需要定义子类行为又要为子类提供共性功能时才用抽象类</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase6.JPG" alt></p><h5 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h5><p>父类类型 变量名 = new 子类类型();</p><p>父类类型变量指向了子类对象</p><p>注意事项：多态使用变量是，编译和运行都看父类        调用成员方法，编译看父类，运行看子类</p><p>多态的弊端：只能调用子父类共有的方法，不能调用子类特有的（因为编译时看父类，特有的编译过不了）</p><p>好处：提高灵活性，父类可以接收任何一个子类对象    传哪个子类运行哪个子类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弊端解决方案</span></span><br><span class="line"><span class="comment">//向下转型：强制类型转换double转int，父类转之类把向下和强转关联记忆吧</span></span><br><span class="line"><span class="comment">//向上转型:隐式类型转换  子类转父类（多态） 向下转换会面临不知道该转成哪个子类的困扰，易出现类型转换异常</span></span><br><span class="line"><span class="comment">//向下转型弊端解决：instanceof格式：boolean b = 父类对象名 instanceof 子类对象名</span></span><br></pre></td></tr></table></figure><h5 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h5><ul><li><p>成员内部类：定义类中方法外</p><p>在其他类中创建对象    外部类名.内部类名 对象名 = new 外部类名().new 内部类();</p></li><li><p>局部内部类：定义方法中</p><p>在其他类中无法使用，只能局部使用</p></li></ul><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>一种特殊的语法，用于快速创建抽象类的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//创建抽闲类对象</span><br><span class="line">//创建子类继承抽象类重写抽象方法new子类对象</span><br><span class="line">//用匿名内部类可以一步完成</span><br><span class="line">new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;.调用属性/方法;</span><br><span class="line"></span><br><span class="line">//最常用</span><br><span class="line">抽象类名 对象名 = new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;;</span><br><span class="line">//只重写抽象方法而不写独有的方法，因为没有名字，即使写了也无法向下强转为子类调用</span><br></pre></td></tr></table></figure><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//当我们使用到这个类的时候（实例化或使用静态成员等等），JVM会自动执行静态代码块中的内容</span></span><br><span class="line">        <span class="comment">//仅在第一次使用到这个类的时候会执行一次，第二次就不会了</span></span><br><span class="line">        <span class="comment">//优先级高于main和构造方法</span></span><br><span class="line">        <span class="comment">//用于初始化类，比如MySQL加载驱动等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><h5 id="static-静态的"><a href="#static-静态的" class="headerlink" title="static    静态的"></a>static    静态的</h5><p>用于修饰类中的成员    被static修饰的成员访问时无需实例化再调用，可以直接通过类名访问（推荐）</p><p>当一个对象不独属于某个成员，而是所有成员共享事应加static修饰</p><p><strong>静态没有多态性</strong>，静态属于类，而多态属于对象    多态调用静态成员时没有多态性（访问的是父类而非子类）</p><p>静态优先于对象存在</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase7.JPG" alt></p><h5 id="final-最终的"><a href="#final-最终的" class="headerlink" title="final    最终的"></a>final    最终的</h5><p>可以修饰类，成员变量，成员方法，局部变量（基本类型，引用类型）</p><p>通过最终来理解这些性质</p><blockquote><p>final修饰类——最终类：不能被继承，但可以有父类（太监类）</p><p>final修饰成员变量：该变量必需在被实例化前赋值，且只能赋值一次</p><p>final修饰成员方法：该方法不能被子类重写</p><p>final修饰的基本类型局部变量只能赋值一次</p><p>final修饰的引用类型局部变量只能赋值一次，但其所指向的对象的内容可以随意改变</p></blockquote><h5 id="类中各种成员的初始化的顺序"><a href="#类中各种成员的初始化的顺序" class="headerlink" title="类中各种成员的初始化的顺序"></a>类中各种成员的初始化的顺序</h5><blockquote><p>1.如果类中存在继承关系(像 Son 继承 Father)  则首先会初始化导出类(Son)的基类(Father)，然后再是导出类</p><p>2.在基类首先会初始化静态 的东西  静态代码块&gt;静态变量  而且只初始化一次 （因为静态的东西都是跟着类的加载而加载的）</p><p>3.随后就是初始化导出类的静态东西  跟基类的静态初始化一样（同上）</p><p>4.初始化基类无参构造器（调用有参就初始化有参构造器）</p><p>5.初始化导出类无参构造器（注意：导出类的成员变量和代码块都是是比构造函数的初始化要早。。看输出结果可知）可知）</p></blockquote><h4 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h4><p>是类层次的根类，所有类都直接或间接继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//两个重要方法</span><br><span class="line">boolean equals(Object obj);//obj中定义的是根据地址计算出的hashcode</span><br><span class="line">//string类中重写了，改为比较字符串内容,我们自己定义类也一般会重写</span><br><span class="line">String toString(Object obj)//返回该对象的字符串表示默认包名.类名@hashcode(地址)</span><br><span class="line">//system.out 打印对象会默认调用tostring    我们一般会重写这个方法</span><br></pre></td></tr></table></figure><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>java代码编译或执行过程中出现的一些问题</p><h5 id="异常的继承体系"><a href="#异常的继承体系" class="headerlink" title="异常的继承体系"></a>异常的继承体系</h5><blockquote><p>Throwable：可以抛出去的东西</p><blockquote><p>Exception：异常（普通问题）</p><blockquote><p>编译时异常：Exception及其子类（RuntimeException除外）</p><p>运行时异常：RuntimeException及其子类</p></blockquote><p>Errow：错误（严重的问题）</p></blockquote></blockquote><h5 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h5><p>异常处理：异常处理指的是一种可能性，只有当出现了异常时才会执行异常处理代码，否则正常执行</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase10.JPG" alt></p><blockquote><p>异常处理方式</p><p>不处理</p><blockquote><p>throw：动词，真正的抛出一个异常</p><p>throws：形容词，用来形容一个方法，表示该方法可能抛出的异常 要求调用者去处理它</p><p>public void 方法名（参数）throws 可能抛出的异常类型{</p><p>}</p></blockquote><p>捕获处理</p><blockquote><p>try(){</p><p>​    可能出现异常的代码</p><p>}catch(对应类型的异常对象){</p><p>​    //catch可以有多个</p><p>​    //处理异常</p><p>}finally{</p><p>​    //写上必须要执行的代码，比如释放资源等</p><p>}</p><p>一次捕获多次处理: 一个try 多个catch  (多个catch中 必须是异常子类在前,父类在后)</p><p>多次捕获多次处理: 多个try,每个try多应一个catch</p><p>一次捕获一次处理(最常用的):一个try一个catch(catch中异常类必须所有可能出现异常的父类)</p></blockquote></blockquote><p>注意事项：子类异常必须从属于父类异常  </p><p>技巧: 如何区分一个异常类 到底是编译时还是运行时异常</p><blockquote><p>1.编译时异常 在编译的时候会报错的 (需要我们去处理)</p><p>2.运行时异常 在编译的时候不会报错</p><p>只要定义一个方法,在方法中抛出一个异常对象,如果编译报错那么就是编译时异常</p><p>如果编译成功,那么就是运行时异常</p></blockquote><p>请你说出十个运行时异常:</p><blockquote><p>1.RuntimeException</p><p>2.ClassCastException:类型转换异常 (向下转型的时候)</p><p>3.ArrayIndexOutOfBoundsException:数组下标越界</p><p>4.StringIndexOutOfBoundsException:字符串下标越界</p><p>5.NullPointerException:空指针异常</p></blockquote><p>自定义异常类：</p><blockquote><p>1.创建一个类,这个类必须用Exception结尾</p><p>2.必须继承 Exception 或者 RumtimeException</p><p>3.自定义的异常 至少有两个构造</p><blockquote><p>a.空参数构造</p><p>b.带有String类型参数的构造        </p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo09_自定义异常的练习;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoSuchAgeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoSuchAgeException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//带有String的构造内部调用super(s)，将传入的string交给父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoSuchAgeException</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p>Date类:日期类    多数方法都过时了，不常用</p><p>标准时间1970年1月1日0时0分0秒</p><p>构造:</p><blockquote><p>public Date();//代表当前系统时间的Date对象</p><p>public Date(long time);//代表距离标准时间 time毫秒值的Date对象</p></blockquote><p>成员方法:</p><blockquote><p>public String toString();//Date    重写Object类的toString方法</p><p>public long getTime();//获取当前Date对象的毫米值        与public Date(long time)互逆</p></blockquote><p>DateFormat:日期格式化类,是一个抽象类</p><p>具体的子类:SimpleDateFormat</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/java12.JPG" alt></p><p>构造:</p><blockquote><p>public SimpleDateFormat(String pattern);//以指定的模式创建格式化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(yyyy年MM月dd日HH时mm分ss秒);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>成员方法:</p><blockquote><p>public String format(Date d);//把date对象按照指定的模式 转成字符串</p><p>public Date parse(String s);//把字符串转成Date对象,如果字符串有问题,就会抛出ParseException</p></blockquote><h4 id="Calendar-日历类"><a href="#Calendar-日历类" class="headerlink" title="Calendar:日历类"></a>Calendar:日历类</h4><p>获取Calendar对象</p><blockquote><p>public static Calendar getInstance();//返回的是抽象类Calendar的某一个子类</p></blockquote><p>成员方法:</p><blockquote><p>public int get(int field);//获取指定字段的值</p><p>public void add(int field,int amount);//给指定的字段增加值</p><p>public void set(int field,int value);//修改指定字段的值</p><p>public Date getTime();//把Calendar对象转成Date 对象</p><p>getTime().getTime()    相当于调用date的方法来获取毫秒值</p></blockquote><h4 id="System-系统类"><a href="#System-系统类" class="headerlink" title="System:系统类"></a>System:系统类</h4><p>该类无法思力华，被私有化了</p><blockquote><p>public static void exit(0);//结束JVM</p><p>public static void gc();//通知垃圾回收器过来收垃圾，只是通知，不一定会来</p><p>public static getProperty(String key);//根据键 获取值</p><p>public static long currentTimeMillis();//获取当前系统的毫秒值</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase13.JPG" alt></p><h4 id="Math-数学类"><a href="#Math-数学类" class="headerlink" title="Math:数学类"></a>Math:数学类</h4><p>都是些静态方法，直接调用就好</p><blockquote><p>求最大值    max</p><p>求最小值     min</p><p>求绝对值    abs</p><p>求随机数      random    返回一个[0,1)之间的数，通过简单计算得到自己想要的范围</p><p>求四舍五入    </p><p>ceil(向上取整) </p><p>floor(向下取整) </p><p>pow(求次幂)</p></blockquote><h4 id="基类数据类型包装类"><a href="#基类数据类型包装类" class="headerlink" title="基类数据类型包装类"></a>基类数据类型包装类</h4><p>八种基本类对应的包装类型</p><blockquote><p>byte    boolean    short    char    int    float    double    long</p><p>Byte    Boolean    Short    Character    Interger    Float    Double    Long</p></blockquote><p>作用</p><blockquote><p>在集合中只允许存储包装类型，不可以存基本类型</p><p><strong>实现字符串的转换</strong>   public static int parseInt(String s);    将字符串转为int，其它基本类型类比即可</p></blockquote><p>自动拆箱装箱</p><blockquote><p>装箱：基本类型-&gt;包装类型    </p><p>拆箱：包装类型-&gt;基本类型</p></blockquote><blockquote><p>哪些数据类型 重写了toString()</p><p>1.String类</p><p>2.保存数据的引用类型 (Integer,Double…,集合,map)</p><p>3.自定义类 可以重写toString  </p></blockquote><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>所有编程语言都支持，用来匹配字符串的</p><p>boolean b = 普通字符串  匹配  正则表达式</p><blockquote><p>public boolean matches(String regex);</p><p>boolean b = “普通字符串”.matches(“正则表达式”);</p></blockquote><blockquote><p>public String[] split(String regex);        切割字符串,返回切割后的字符串数组</p></blockquote><p>书写技巧：一位一位的匹配</p><p>通配符</p><blockquote><p>正则表达式中 “.”代表任意字符</p><p>在DOS中 “*”代表任意内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * QQ号码需要满足的规则:</span></span><br><span class="line"><span class="comment"> * 1.必须是0-9的数字</span></span><br><span class="line"><span class="comment"> * 2.开头必须1-9中的一个数字</span></span><br><span class="line"><span class="comment"> * 3.位数必须 5-12位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qq</span><span class="params">()</span></span>&#123;</span><br><span class="line">String qq = <span class="string">"12355a63564"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = qq.matches(<span class="string">"[1-9][0-9]&#123;4,11&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 举例：校验手机号码</span></span><br><span class="line"><span class="comment"> * 1：要求为11位0-9的数字</span></span><br><span class="line"><span class="comment"> * 2：第1位为1，第2位为3、4、5、7、8中的一个，后面9位为0到9之间的任意数字。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">phone</span><span class="params">()</span></span>&#123;</span><br><span class="line">String phone = <span class="string">"18600363521"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = phone.matches(<span class="string">"1[34578][0-9]&#123;9&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 案例:切割电话</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String phone = <span class="string">"2345--4564----6546-----1345"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切割phone  把号码切割出来</span></span><br><span class="line"><span class="comment">//+号 在正则表达式中有特殊意义,表示连续的多个相同的字符</span></span><br><span class="line">String[] phones = phone.split(<span class="string">"-+"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; phones.length; i++) &#123;</span><br><span class="line">System.out.println(phones[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:切割ip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split02</span><span class="params">()</span></span>&#123;</span><br><span class="line">String ip = <span class="string">"192...168....123......110"</span>;</span><br><span class="line"><span class="comment">//"."号 在正则表达式中 表示 任意字符</span></span><br><span class="line"><span class="comment">//转译字符</span></span><br><span class="line"><span class="comment">//\t</span></span><br><span class="line"><span class="comment">//\n</span></span><br><span class="line">String[] ips = ip.split(<span class="string">"\\.+"</span>);<span class="comment">//在正则表达式中 "\\" 代表一个"\"</span></span><br><span class="line">System.out.println(ips.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ips.length; i++) &#123;</span><br><span class="line">System.out.println(ips[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String中的方法（4532）"><a href="#String中的方法（4532）" class="headerlink" title="String中的方法（4532）"></a>String中的方法（4532）</h4><h5 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIngoreCase</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> startIndex)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> startIndex,<span class="keyword">int</span> endIndex)</span></span>;<span class="comment">//左闭右开</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexof</span><span class="params">(String subStr)</span></span>;<span class="comment">//少用</span></span><br></pre></td></tr></table></figure><h5 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span>；</span></span><br></pre></td></tr></table></figure><h5 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span></span>;<span class="comment">//去掉两端空格</span></span><br><span class="line">String[] split(String str);<span class="comment">//一某一个字符串来分割字符串</span></span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合框架:</p><blockquote><p>List–&gt; ArrayList,LinkedList,Vector</p><p>Set –&gt; HashSet,LinkedHashSet,TreeSet</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase14.JPG" alt></p><h5 id="Collection接口中的公共方法"><a href="#Collection接口中的公共方法" class="headerlink" title="Collection接口中的公共方法:"></a>Collection接口中的公共方法:</h5><p>子类不是都有下标，所有Collection无下标，故而无法进行改查操作</p><blockquote><p>增: add(E e);</p><p>删: remove(Object obj);</p><p>改: 无</p><p>查: 无</p><p>其他:</p><blockquote><p>int size();//长度</p><p>boolean contains(Object obj);</p><p>void clear();//清空</p><p>Object[] toArray();    //集合转换成数组</p></blockquote></blockquote><p>在ArrayList中 有一个方法  </p><p>addAll(Collection c);//把集合c里面的每一个元素添加到ArrayList中</p><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>在Collection根解扣子中定义一种公共的遍历方式:迭代器遍历</p><p>Iterator&lt;泛型和集合的一样&gt; it = 集合对象.iterator();    底层类似链表</p><p>迭代器对象 有两个方法:</p><blockquote><p>hasNext();//判断有没有下一个</p><p>next();//取出下一个</p></blockquote><p><strong>以上两个方法必须配合使用</strong></p><p>补充</p><blockquote><p>Concurrent(并发)Modification(修改)Exception</p><p>java规定,如果一个集合使用迭代器遍历,那么在遍历的过程中 <strong>不允许修改集合的长度(</strong>增加或者删除)</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase15.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个集合对象,使用多态</span></span><br><span class="line">Collection&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//2.添加</span></span><br><span class="line">names.add(<span class="string">"郭德纲"</span>);</span><br><span class="line">names.add(<span class="string">"刘德华"</span>);</span><br><span class="line">names.add(<span class="string">"柳岩"</span>);</span><br><span class="line">names.add(<span class="string">"范伟"</span>);</span><br><span class="line">names.add(<span class="string">"范伟1"</span>);</span><br><span class="line"><span class="comment">//3.获取names集合的迭代器对象</span></span><br><span class="line">Iterator&lt;String&gt; it = names.iterator();</span><br><span class="line"><span class="comment">//4.标准代码</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;<span class="comment">//反复判断有没有下一个元素</span></span><br><span class="line">String s = it.next();<span class="comment">//如果有取出下一个元素</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h5><p>增强for循环比普通的for循环增强在哪?</p><blockquote><p>增强在语法上更加简单</p></blockquote><p>格式:</p><blockquote><p>for(数据类型 变量名:数组/集合){</p><p>syso(变量名);</p><p>}</p></blockquote><p>注意:</p><blockquote><p>当你使用增强for循环遍历集合的时候</p><p>底层采用的是迭代器    </p></blockquote><p>总结: </p><blockquote><p>当你使用增强for循环遍历集合的时候,不能修改集合的长度</p></blockquote><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>泛泛的类型,不确定的类型，类型参数化</p><p>格式:</p><blockquote><p><e>,&lt;K,V&gt;</e></p></blockquote><p>好处</p><blockquote><p>避免了强制类型转换</p><p>将运行时的ClassCsatException变为了编译错误</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/java16.JPG" alt></p><p>泛型通配符</p><blockquote><p>?:代表任意类型</p><p>&lt;? extends Animal&gt; : 表示一种泛型,这种泛型必须是Animal 或者Animal的子类</p><p>&lt;? super Animal&gt;:表示一种泛型,这种泛型必须是Animal  或者Animal的父类</p></blockquote><p>泛型可以用在类上，方法上，接口上</p><blockquote><p>泛型用在类上: 泛型类</p><blockquote><p>格式:public class 类名<e></e></p><p>当你创建该类的对象的时候,就可以确定</p></blockquote><p>泛型用在方法上:泛型方法</p><blockquote><p>格式:public <t> 返回值类型 方法名(T t);</t></p><p>当你调用方法,传递参数的时候确定</p></blockquote><p>泛型用在接口上:泛型接口</p><blockquote><p>格式:public interface 接口名<e>    </e></p><p>1.实现类实现接口的时候,直接确定</p><p>2.实现类实现接口的时候,不确定泛型,而是直接把泛型继承下来,当这个实现类创建对象的时候确定</p></blockquote></blockquote><h5 id="堆栈和队列"><a href="#堆栈和队列" class="headerlink" title="堆栈和队列"></a>堆栈和队列</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase18.JPG" alt></p><h5 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase19.JPG" alt></p><h5 id="list接口"><a href="#list接口" class="headerlink" title="list接口"></a>list接口</h5><p>List接口的特点:</p><blockquote><p>a.有下标</p><p>b.有序的(有序不是自然顺序,不是123,abc,有序指的是存和取的顺序一致)</p><p>c.可重复</p></blockquote><p>实现类:ArrayList,LinkedList,Vector</p><blockquote><p>ArrayList:底层采用数组结构,查询快,增删慢</p><p>LinkedList:底层采用链表结构,查询慢,增删快</p><p>Vector:底层采用数组结构,查询快,增删慢（基本不用）</p></blockquote><p>List结构中具有的方法:</p><blockquote><p>增: add(E e);add(int index,E e);</p><p>删: remove(Object obj);remove(int index);</p><p>改: set(int index,E e);</p><p>查: get(int index);</p><p>其他:</p><p>size(),clear(),contains(Object obj),toArray()</p><p>iterator();isEmpty()</p></blockquote><p>实现类的方法:</p><blockquote><p>1.ArrayList:方法基本和List中定义的一模一样</p><p>2.LinkedList:除了和List接口中一样的方法之外</p><p>LinkedList提供了大量首位操作的方法</p><blockquote><p>第一组:</p><p>void addFirst(E e);</p><p>void addLast(E e);</p><p>第二组:</p><p>E removeFirst();//删除首个元素,返回被删除的元素</p><p>E removeLast();//删除尾部元素,返回被删除的元素</p><p>第三组:</p><p>E getFirst();</p><p>E getLast();</p><p>第四组:</p><p>E pop();//弹出,删除集合中的某一个元素,和 removeFirst功能是一样的</p><p>void push(E e);//推入,把一个元素添加到集合中, 和addFist功能是一样的</p></blockquote></blockquote><h5 id="set接口"><a href="#set接口" class="headerlink" title="set接口"></a>set接口</h5><p>Set接口的特点:</p><blockquote><p>a.无下标</p><p>b.无序的(无序指的是存和取的顺序不一定一致,LinkedHashSet和TreeSet除外)</p><p>c.不可重复</p></blockquote><p>实现类:HashSet,LinkedHashSet,TreeSet</p><blockquote><p>HashSet:底层采用哈希表结构,查询快,增删快,无序的</p><p>LinkedHashSet:底层采用 链表+哈希表,查询快,增删快,有序的</p></blockquote><p>Set接口中的特有方法: 没有,和父接口Collection基本一模一样</p><p>实现类:HashSet和LinkedHashSet中的方法基本和Set接口一模一样</p><p><strong>对象的哈希值:</strong></p><blockquote><p>任何对象,都有一个哈希值,哈希值是对象的一个数字表示</p><p>对象的字符串表示,toString方法,默认表示格式:包名.类名@地址值</p><p>如果获取对象的哈希值?</p><p>每一个对象都有一个方法,hashCode方法,这方法定义在了Object类中,所以每个对象都具有</p><p>我们以前说的地址值,实际上根本不是地址值,而是哈希值的16进制</p><p>在java中怎么看真正地址值? 看不了</p><p>哈希值的由来</p><blockquote><p>是由真正的地址值计算的,通过一种散列算法(哈希算法)</p><p>所以 一般来说 地址值 不一样, 哈希值也是不一样的</p><p>不可逆算法(MD5,WPA2)</p><p>碰撞算法(一个一个试)</p><p>暴力破解&amp;字典破解(破解wifi教程)</p></blockquote><p>字符串的哈希值:</p><blockquote><p>由于String类重写了HashCode  那么哈希值不在通过地址值计算</p><p>我们观察源码,发现通过字符串的内容计算,所以只要字符串内容相同,哈希值必定相同</p><p>思考:</p><p>只要字符串内容一样,哈希值 必定一样</p><p>两个字符串的内容不一样,哈希值可能一样</p><p>比如: abc 和 acD</p></blockquote></blockquote><p><strong>哈希表结构:</strong></p><blockquote><blockquote><p>数组结构+链表结构的组合,查询快,增删快</p><p>HashSet:采用了哈希表结构</p><p>LinkedHashSet:采用了链表+哈希表结构</p></blockquote><p>哈希表结构,判断元素是否重复的原理:</p><blockquote><p>1.先判断 新元素的哈希值 和 所有旧元素的哈希值是否相同</p><p>如果都不相同,直接判断不重复,添加</p><p>2.再调用  新元素 和  哈希值相同的旧元素的equals方法</p><p>如果返回是true 判定重复元素 ,不添加</p><p>如果返回是false 判定不重复,添加</p></blockquote><p>总结:</p><blockquote><p>只有哈希值相同,并且equals返回true,才判定重复</p></blockquote></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase20.JPG" alt></p><blockquote><p>判断元素重复不重复的原理:</p><blockquote><p>1 比较哈希值</p><p>2 调用equals方法</p><p>只有 哈希值相同,并且equals方法true,才是重复元素,才不存储</p></blockquote><blockquote><p>contains方法,判断是否包含某一个元素</p><blockquote><p>ArrayList的contains方法:</p><p>names.contains(“abc”);//判断 names集合中是否包含 “abc”</p><p>只比较 equals的返回值,如果某一个元素和要判断的元素equals方法true,那么就是包含该元素</p></blockquote><p>HashSet的contains方法:</p><blockquote><p>set.contains(“abc”);//</p><p>先判断哈希值</p><p>再使用equals方法</p><p>只有旧元素和判断的元素 的哈希值相同 并且 euqals方法true 才判定包含</p></blockquote></blockquote></blockquote><p><strong>使用HashSet存储自定义元素(Dog对象)</strong></p><blockquote><p>结论:</p><p>如果我们<strong>自定义了类</strong> 要使用HashSet存储</p><p>如何保证元素的唯一性:</p><p>必须重写自定义类的两个方法,hashCode和equals</p><p>定义一个标准的类:</p><blockquote><p>1.封装(private+get/set)</p><p>2.构造(无参+全参)</p><p>3.toString(快速打印对象信息)</p><p>4.hashCode和equals(保证元素使用哈希表结构存储时的唯一性)</p></blockquote></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><h5 id="Map集合的特点"><a href="#Map集合的特点" class="headerlink" title="Map集合的特点:"></a>Map集合的特点:</h5><blockquote><p>1.Map集合 和 Collection集合 没有继承关系,所以不能直接用迭代器</p><p>2.Collection集合 每一个元素都是单独存在</p><p>Map集合的每一个元素都是成对存在的</p><p>3.Collection<e>一个泛型</e></p><p>Map&lt;K,V&gt;两个泛型, K代表键的类型,V代表值的类型</p><p>K,V可以相同  也可以不同,必须都是引用类型</p><p>4.在Map集合的元素中,<strong>键是唯一的,</strong>值是可以重复的</p><p>5.常用的实现类:</p><p>HashMap:无序</p><p>底层哈希表结构,保证键的唯一性<strong>,需要重写键对应类的hashCode和equals方法</strong></p><p>LinkedHashMap:有序</p><p>底层哈希表结构+链表,哈希表保证键的唯一,链表保证元素的有序</p><p>需要重写键对应类的hashCode和equals方法</p></blockquote><h5 id="Map-lt-K-V-gt-集合常用的方法"><a href="#Map-lt-K-V-gt-集合常用的方法" class="headerlink" title="Map&lt;K,V&gt;集合常用的方法:"></a>Map&lt;K,V&gt;集合常用的方法:</h5><blockquote><p>增: V put(K key,V value);//向集合中添加键值对</p><p>//如果集合中已存在该键,覆盖整个键值对,并返回被覆盖的键值对的值        </p><p>删: V remove(OBject key);//根据键 从map集合中删除 键值对,返回值表示被删除的键值对的值</p><p>改: 隐藏到了put方法</p><p>查: V get(K key);//根据键 从map集合中找到唯一对应的值</p></blockquote><h5 id="Map集合第一种遍历方法-以键找值"><a href="#Map集合第一种遍历方法-以键找值" class="headerlink" title="Map集合第一种遍历方法:以键找值"></a>Map集合第一种遍历方法:以键找值</h5><blockquote><p>1.先获取map集合的键的集合,这个集合是一个Set集合</p><p>Set<k> keys = map集合.keySet();</k></p><p>2.遍历keys集合    </p><p>a.foreach b.迭代器</p><p>3.在遍历的过程中,从map集合获取键对应的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取map的键的集合</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"><span class="comment">//4.遍历keys这个集合,获取到每一个键</span></span><br><span class="line"><span class="comment">//4.1迭代器遍历</span></span><br><span class="line">Iterator&lt;String&gt; it = keys.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"> String key = it.next();</span><br><span class="line"> <span class="comment">//根据key 从map集合中查找 对应值</span></span><br><span class="line"> String value = map.get(key);</span><br><span class="line"> <span class="comment">//打印</span></span><br><span class="line"> System.out.println(key+<span class="string">":"</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase21.JPG" alt></p><h5 id="map集合第二种遍历-：键值对遍历"><a href="#map集合第二种遍历-：键值对遍历" class="headerlink" title="map集合第二种遍历 ：键值对遍历"></a>map集合第二种遍历 ：键值对遍历</h5><blockquote><p>1.获取map集合中所有 结婚证对象</p><p>Set&lt;Map.Entry&lt;K,V&gt;&gt; set = map集合.entrySet();</p><p>2.遍历这个set集合,获取每一个Map.Entry类型的对象</p><p>a.迭代器 b.foreach</p><p>3.获取到 Map.Entry类型的对象之后</p><p>K key = entry.getKey();</p><p>V value = entry.getValue();</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取所有键值对关系对象的集合</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="comment">//4.遍历 这个entry集合, 拿出每一个结婚证对象</span></span><br><span class="line"><span class="comment">//使用迭代器遍历</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = entrySet.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line"><span class="comment">//获取这个entry中的 键和值</span></span><br><span class="line">String key = entry.getKey();</span><br><span class="line">String value = entry.getValue();</span><br><span class="line">System.out.println(key+<span class="string">"="</span>+value);</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase22.JPG" alt></p><p><strong>回顾：内部类和内部接口</strong></p><blockquote><p>内部类:</p><p>一个类A,定义在另外一个类B 的内部,这个类A 这个类被称为内部类</p><p>OuterClass.InnerClass ic = new OuterClass().new InnerClass();</p><p>内部接口:</p><p>一个接口A,定义在另外一个接口B的内部,这个接口A, 这个接口A被称为内部接口</p><p>class Class2 implements OuterInter.InnerInter    只重写内部类中的方法即可</p></blockquote><h5 id="使用map存储自定义类型"><a href="#使用map存储自定义类型" class="headerlink" title="使用map存储自定义类型"></a>使用map存储自定义类型</h5><p>使用map存储:键为学号,值为一个学生的对象, 学生对象有属性（姓名，年龄）</p><p>使用map存储:键为学生（姓名，年龄）值为学生自己的家庭住址。</p><p>结论:</p><p>如果Map中的键是自定义类型,那么要保证键的唯一性,必须重写键对应类的hashCode和equals方法</p><h4 id="Properties属性集"><a href="#Properties属性集" class="headerlink" title="Properties属性集"></a>Properties属性集</h4><p>在开发中Map集合可能用到,但是Properties属性集,1000%会用到</p><h5 id="Properties类到底是什么"><a href="#Properties类到底是什么" class="headerlink" title="Properties类到底是什么?"></a>Properties类到底是什么?</h5><p>属性集,</p><p>class Propeties extends HashTable implements Map</p><p>所以:Properties本质上 就是一个Map集合</p><p>Properties是一个持久的属性集</p><p>所谓持久 就是 它具有自己写数据到文件的方法</p><p>Properties是没有泛型,泛型是固定,String 和 String</p><h5 id="Properties类-具有Map接口的一切方法"><a href="#Properties类-具有Map接口的一切方法" class="headerlink" title="Properties类,具有Map接口的一切方法"></a>Properties类,具有Map接口的一切方法</h5><blockquote><p>还有具有一些自己特有的方法:</p><blockquote><p>public String getProperty(String key)用指定的键在此属性列表中搜索属性的值,功能和Map中的get是一样</p><p>public Object setProperty(String key, String value);添加键值对,功能和Map的put方法是一样</p><p>public Set<string> stringPropertyNames()://和Map中的keySet方法是一样</string></p></blockquote><p>Properties具有持久化到文件的功能</p><blockquote><p>store();//保存数据到文件,实际上不是保存到文件 而是写入到流中,由流写到文件</p><p>load();//从文件中加载数据,实际上不是直接加载文件,而是加载流中的数据,而流的数据是从该文件中读取的</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//和Properties持久化有关的方法</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//从文件中读取数据</span></span><br><span class="line">ps.load(<span class="keyword">new</span> FileReader(<span class="string">"phones.properties"</span>));</span><br><span class="line">System.out.println(ps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Properties持久化数据到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writePs</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//1.定义Properties</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">ps.setProperty(<span class="string">"iphoneX"</span>, <span class="string">"8888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"xiaomiMix"</span>, <span class="string">"3888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"huaweiMate11"</span>, <span class="string">"6888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"vivoX20"</span>, <span class="string">"1888"</span>);</span><br><span class="line"><span class="comment">//2.把ps的数据持久化到文件中</span></span><br><span class="line">ps.store(<span class="keyword">new</span> FileWriter(<span class="string">"phones.properties"</span>), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建一个Properties对象</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//2.添加数据</span></span><br><span class="line">ps.setProperty(<span class="string">"张三"</span>, <span class="string">"18"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"李四"</span>, <span class="string">"28"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"王五"</span>, <span class="string">"38"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"前妻"</span>, <span class="string">"48"</span>);</span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//1.stringPropertyNames 就是keySet</span></span><br><span class="line">Set&lt;String&gt; propertyNames = ps.stringPropertyNames();</span><br><span class="line"><span class="comment">//4.遍历</span></span><br><span class="line"><span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line"><span class="comment">//根据属性名 propertyName获取属性值</span></span><br><span class="line">String propertyValue = ps.getProperty(propertyName);</span><br><span class="line">System.out.println(propertyName+<span class="string">"="</span>+propertyValue); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h4><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>说的不是参数类型可变,而是<strong>参数的个数</strong>可以变化</p><p>语法: JDK1.5 出现新特性</p><p>public 返回值类型 方法名(数据类型… 参数名){}</p><p>注意:</p><blockquote><p>1.可变参数只是参数的个数是任意个,参数的类型不能改变    </p><p>2.一个方法中 只能有一个可变参数</p><p>3.当一个方法中有多个参数,并且有一个是可变参数的时候,要求这个可变参数必须在最后</p></blockquote><p>可变参数的<strong>本质</strong>: 就是一个数组</p><h5 id="Collections中的静态方法"><a href="#Collections中的静态方法" class="headerlink" title="Collections中的静态方法:"></a>Collections中的静态方法:</h5><blockquote><p>public static void shuffle(List list);//打乱顺序</p><p>public static void sort(List list);//把集合元素按照自然顺序(123,abc)排序</p></blockquote><p>Arrays:数组工具类</p><blockquote><p>public static List asList(数组/可变参数);//把一个数组 转成List集合</p><p>public static void sort(数组);//排序数组</p><p>public static String toString(数组);//把数组转成字符串</p></blockquote><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><blockquote><p>递归:是一个通用技术,所有的编程语言,只要有方法概念的编程语言都具有递归</p><p>什么叫递归:在一个方法的内部,再调用方法本身</p><p>无限递归本身是错误的:因为方法运行需要进栈,而栈空间不是无限大的</p><p>使用递归的前提****:</p><p>1.必须有一个可以是递归结束的出口</p><p>2.递归的次数,不能太多(具体的次数不好确定,与内存,CPU…都有关)</p><p>我们建议在开发中 能不用递归 就是不要用</p><p>急剧消耗内存(最常见是杀毒软件 扫描硬盘)</p><p>递归的其他分类:</p><p>直接递归:</p><p>在A方法的内部 直接调用A方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//定义一个方法,求1-n的和先想一下基于n-1步如何解决</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt; <span class="comment">//1+2+3...n = (1+2+3..n-1)+n</span></span><br><span class="line">&gt; <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> getSum(n-<span class="number">1</span>)+n;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//求1-n的和常用</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt; <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">&gt; sum+=i;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> sum;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">&gt;          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;      <span class="keyword">return</span> getSum2(n - <span class="number">2</span>) + n;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>间接递归:</p><p>在A方法的内部调用B方法,在B方法的内部调用C方法,在C方法的内部调用A方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">package</span> com.guardwarm.递归;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//定义方法  求 n个式子的和</span></span><br><span class="line">&gt; <span class="comment">//n=5</span></span><br><span class="line">&gt; <span class="comment">//1+(1+2)+(1+2+3)+(1+2+3+4)+(1+2+3+4+5)</span></span><br><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">undirectDiGui</span> </span>&#123;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;         System.out.println(<span class="string">"please enter a num"</span>);</span><br><span class="line">&gt;         Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">&gt;         <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">&gt;         <span class="keyword">int</span> sum = getsum(n);</span><br><span class="line">&gt;         System.out.println(sum);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;         <span class="keyword">return</span> getsum(n-<span class="number">1</span>)+zigetsum(n);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zigetsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;         <span class="keyword">return</span> zigetsum(n-<span class="number">1</span>)+n;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase23.bmp" alt></p><h4 id="斗地主案例"><a href="#斗地主案例" class="headerlink" title="斗地主案例"></a>斗地主案例</h4><h5 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase17.JPG" alt></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.斗地主;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 斗地主步骤:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.创建编号和牌对应的map集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.准备一副牌(54个数字1-54)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.洗牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.发牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5.排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 6.从map集合查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 7.看牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">doudizhuMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一副牌</span></span><br><span class="line">        Map&lt;Integer,String&gt; allcard = <span class="keyword">new</span> LinkedHashMap&lt;Integer, String&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; cards = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; dp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String num : nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String color : colors)&#123;</span><br><span class="line">                String card = num+ color;</span><br><span class="line">                allcard.put(id,card);</span><br><span class="line">                cards.add(id);</span><br><span class="line">                id++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        allcard.put(id,<span class="string">"大S"</span>);</span><br><span class="line">        cards.add(id);</span><br><span class="line">        id++;</span><br><span class="line">        allcard.put(id,<span class="string">"小S"</span>);</span><br><span class="line">        cards.add(id);</span><br><span class="line">        id++;</span><br><span class="line">        Collections.shuffle(cards);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line"><span class="comment">//        System.out.println(cards);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cards.size(); ++i) &#123;</span><br><span class="line">            Integer cd = cards.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">51</span>) &#123;</span><br><span class="line">                dp.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                p1.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                p2.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                p3.add(cd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(p1);</span><br><span class="line">        Collections.sort(p2);</span><br><span class="line">        Collections.sort(p3);</span><br><span class="line">        Collections.sort(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*        System.out.println(p1);</span></span><br><span class="line"><span class="comment">        System.out.println(p2);</span></span><br><span class="line"><span class="comment">        System.out.println(p3);</span></span><br><span class="line"><span class="comment">        System.out.println(dp);*/</span></span><br><span class="line">        outputcard(p1,allcard);</span><br><span class="line">        outputcard(p2,allcard);</span><br><span class="line">        outputcard(p3,allcard);</span><br><span class="line">        outputcard(dp,allcard);</span><br><span class="line">       <span class="comment">/* Collections.sort(cards);</span></span><br><span class="line"><span class="comment">        System.out.println(cards);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputcard</span><span class="params">(ArrayList&lt;Integer&gt; ls,Map&lt;Integer,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Integer cardid:ls)&#123;</span><br><span class="line">            String card = map.get(cardid);</span><br><span class="line">            System.out.print(card+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IO流-读写文件"><a href="#IO流-读写文件" class="headerlink" title="IO流_读写文件"></a>IO流_读写文件</h4><p>（输入输出是相对程序而言的）</p><p>输出流：数据从java程序到文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileWriter:文件的字符输出流，写数据(一个字符，一个字符串，一个字符数组)</span></span><br><span class="line">write(<span class="keyword">int</span> ch);<span class="comment">//可以写ascll码值</span></span><br><span class="line">write(<span class="keyword">char</span>[] ch);</span><br><span class="line">write(<span class="keyword">char</span>[] ch,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len);</span><br><span class="line">write(String s);</span><br><span class="line">write(String s,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len);</span><br></pre></td></tr></table></figure><p>输入流：数据从文件到java程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileWriter:文件的字符输出流，写数据(一个字符，一个字符串，一个字符数组)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;<span class="comment">//读取一个字符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>;<span class="comment">//读取一个字符数组，返回值表示读取到的字符个数</span></span><br></pre></td></tr></table></figure><h4 id="File类"><a href="#File类" class="headerlink" title="File类:"></a>File类:</h4><p><strong>描述:文件和 目录路径名的抽象表示</strong></p><blockquote><p>文件:可以直接保存数据</p><p>目录路径名:文件夹,分类管理文件</p><p>结论:File类可以表示文件 也可以表示文件夹</p></blockquote><p><strong>构造:</strong></p><p>public File(String filepath);</p><p>绝对路径:以盘符开头的路径</p><p>相对路径:相对当前项目的根目录</p><p><strong>File对象的获取方法:</strong></p><blockquote><p>1.public String getAbsolutePath();//获取绝对路径</p><p>2.public String getName()//获取当前File对象的名字</p><p>3.public String getPath();//获取创建File对象时 传递的路径</p><p>4.public long length();//获取表示文件的File对象的占用的字节数,如果是文件夹的File对象,返回值不确定</p></blockquote><p><strong>File对象的删除和创建方法:</strong></p><p>1.创建方法:</p><blockquote><p>创建文件:</p><p>public boolean createNewFile();//创建一个新的文件(只能是文件,不能是文件夹),返回是否创建成功</p><p>创建文件夹</p><p>public boolean mkdir();//创建一个新的文件夹,返回是否创建成功</p><p>public boolean mkdirs();//可以一次性创建多层文件夹</p></blockquote><p>2.判断方法:</p><blockquote><p>判断是否是文件</p><p>public boolean isFile();//返回是否是文件</p><p>判断是否是文件夹</p><p>public boolean isDirectory();//返回是否是文件夹</p><p>判断文件或者文件夹是否存在,是前面两个前提</p><p>public boolean exists();//返回该File 对象是否存在</p></blockquote><p>3.删除方法:</p><blockquote><p>public boolean delete();//删除文件或者文件夹</p><p>可以删除的是单个文件,或者空文件夹</p></blockquote><p>File类的list和listFiles方法</p><blockquote><p>1.public String[] list();</p><p>2.public File[] listFiles();</p><p>注意:</p><p>只能列出当前文件夹下的一级子文件或者子文件夹，那个对象必须存在且是文件夹才可以调用</p></blockquote><p><strong>案例：使用递归遍历使用文件夹</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用递归遍历 一个文件夹aaa下的所有文件(包括一级的也包括n级文件)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.定义方法,遍历一个文件夹下的所有文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.在方法中判断 某一个File对象 ,如果是文件 直接打印</span></span><br><span class="line"><span class="comment"> * 如果不是文件,递归调用第1步定义的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiguiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.创建aaa文件夹的File 对象</span></span><br><span class="line">File aaa = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\yingpeng\\Desktop\\aaa"</span>);</span><br><span class="line"><span class="comment">//2.调用方法 列出 aaa下的所有文件</span></span><br><span class="line">printFiles(aaa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个方法:列出一个文件夹下的文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFiles</span><span class="params">(File objFileDir)</span></span>&#123;</span><br><span class="line"><span class="comment">//2.列出aaa文件夹下的所有File 对象</span></span><br><span class="line">File[] files = objFileDir.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line"><span class="comment">//判断是否是文件 或者 文件夹</span></span><br><span class="line"><span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//是文件夹.列出该文件夹下的所有东西</span></span><br><span class="line">printFiles(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文件过滤器:FileFilter</strong></p><p>在list和listFiles方法中使用，用来过滤文件，有多少个文件就会执行多少次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFileFilter</span> <span class="keyword">implements</span> <span class="title">FileFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">".."</span>);<span class="comment">//用来看这个方法执行了多少次</span></span><br><span class="line"><span class="keyword">if</span>(pathname.getName().endsWith(<span class="string">".PNG"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：map集合嵌套遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:</span></span><br><span class="line"><span class="comment"> * 需要定义一个Map集合,保存学生的学号和他对应的名字</span></span><br><span class="line"><span class="comment"> * Map&lt;String,String&gt;</span></span><br><span class="line"><span class="comment"> * JavaEE:</span></span><br><span class="line"><span class="comment"> * heima001  张三</span></span><br><span class="line"><span class="comment"> * heima003 李四</span></span><br><span class="line"><span class="comment"> * heima005 王五</span></span><br><span class="line"><span class="comment"> * UI:</span></span><br><span class="line"><span class="comment"> * heima001 小丽</span></span><br><span class="line"><span class="comment"> * heima004 小红</span></span><br><span class="line"><span class="comment"> * heima005 小美</span></span><br><span class="line"><span class="comment"> * PHP:</span></span><br><span class="line"><span class="comment"> * heima002 小黑</span></span><br><span class="line"><span class="comment"> * heima003 小白</span></span><br><span class="line"><span class="comment"> * heima006 小猪</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapQianTao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义所需map</span></span><br><span class="line">        Map&lt;String,String&gt; eeMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,String&gt; uiMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,String&gt; phpMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,Map&lt;String,String&gt;&gt; outMap = <span class="keyword">new</span> HashMap&lt;String, Map&lt;String, String&gt;&gt;();</span><br><span class="line">        eeMap.put(<span class="string">"heima001"</span>,<span class="string">"张三"</span>);</span><br><span class="line">        eeMap.put(<span class="string">"heima003"</span>,<span class="string">"李四"</span>);</span><br><span class="line">        eeMap.put(<span class="string">"heima005"</span>,<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">        uiMap.put(<span class="string">"heima001"</span>,<span class="string">"小丽"</span>);</span><br><span class="line">        uiMap.put(<span class="string">"heima004"</span>,<span class="string">"小红"</span>);</span><br><span class="line">        uiMap.put(<span class="string">"heima005"</span>,<span class="string">"小美"</span>);</span><br><span class="line"></span><br><span class="line">        phpMap.put(<span class="string">"heima002"</span>,<span class="string">"小黑"</span>);</span><br><span class="line">        phpMap.put(<span class="string">"heima004"</span>,<span class="string">"小白"</span>);</span><br><span class="line">        phpMap.put(<span class="string">"heima005"</span>,<span class="string">"小猪"</span>);</span><br><span class="line"></span><br><span class="line">        outMap.put(<span class="string">"javaee"</span>,eeMap);</span><br><span class="line">        outMap.put(<span class="string">"ui"</span>,uiMap);</span><br><span class="line">        outMap.put(<span class="string">"php"</span>,phpMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先通过entrySet获取Set，然后再用set获取迭代器开始遍历</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Map&lt;String,String&gt;&gt;&gt; outSet = outMap.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Map&lt;String,String&gt;&gt;&gt; outit = outSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (outit.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Map&lt;String,String&gt;&gt; outEntry = outit.next();</span><br><span class="line">            String outKey = outEntry.getKey();</span><br><span class="line">            <span class="comment">//由于值是map，所以内部还得再遍历</span></span><br><span class="line">            Map&lt;String,String&gt; outvalue = outEntry.getValue();</span><br><span class="line">            System.out.println(outKey);</span><br><span class="line">            Set&lt;String&gt; mapKeys = outvalue.keySet();</span><br><span class="line">            <span class="keyword">for</span>(String key:mapKeys)&#123;</span><br><span class="line">                String mapValue = outvalue.get(key);</span><br><span class="line">                System.out.println(mapValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><p>根据流的流向分类:</p><blockquote><p>Input:输入流</p><p>Output:输出流</p></blockquote><p>根据流操作的数据来分类</p><blockquote><p>字符流: 操作字符    只能操作普通文本文件,</p><p>​        最常见的文本文件:.txt,.java,.c,.cpp等其他语言的源代码</p><p>​        只要用文本工具(记事本,notepad++,editplus) 可以打开的 ,而且打开后我们人类能看懂的 都是文本文件</p><p>​        注意:我们用的.doc,excel,ppt这些不是文本文件</p><p>字节流: 操作字节</p><p>​        能操作一切文件(文本文件,.mp3,视频.avi,.rmvb,mp4,doc,excel,ppt)</p></blockquote><p>java中的四大流:</p><blockquote><p>字符输入流:共同父类 Reader   比如:FileReader,BufferedReader</p><p>功能:读取一个字符,读取一个字符数组</p><p>字符输出流:共同的父类 Writer    比如:FileWriter BufferedWriter</p><p>功能:写一个字符,写一个字符数组(一部分),写一个字符串</p><p>字节输入流:共同父类 InputStream  比如:FileInputStream,BufferedInputStream</p><p>功能:读取一个字节,读取一个字节数组</p><p>字节输出流:共同父类 OutputStream 比如:FileOutputStream,BufferedOutputStream</p><p>功能:写一个字节,写一个字节数组(一部分)</p></blockquote><p>只要是输入流   此流的方法名 一定叫做 read</p><p>只要是输出流  此流的方法名 一定叫做 write</p><p>java中流的命名是十分规范的:    <strong>功能+父类的名字（4种）</strong></p><h5 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream:"></a>OutputStream:</h5><p>字节输出流的根类,这是一个抽象类</p><blockquote><p>public void close();//关闭流</p><p>public void flush();//刷新流</p></blockquote><p>和写数据有关系的方法;</p><blockquote><p>public void write(int b);//写一个字节 </p><p>public void write(byte[] bs);//写一个字节数组</p><p>public void write(byte[] bs,int startIndex,int lenght);//写一个字节数组的一部分</p></blockquote><p><strong>FileOutputStream</strong></p><p>OutputStream具体子类</p><p>追加:</p><blockquote><p>以前用的构造:</p><p>​    public FileOutputStream(String filename);//默认就是覆盖</p><p>​    public FileOutputStream(File file);//给定一个File对象,这个File对象代表我们要写入的文件</p><p>请用这个构造,实现追加:</p><p>​    public FileOutputStream(String filename,boolean flag)</p><p>​    public FileOutputStream(File file,boolean flag)</p></blockquote><p>换行（不同操作系统用不同换行）:</p><blockquote><p>windows:\r\n</p><p>Linux:\n</p><p>Mac:\r</p></blockquote><h5 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream:"></a>InputStream:</h5><p>字节输入流的根类,这是一个抽象类</p><p>public int read();//读取一个字节,返回的是码值</p><p>public int read(byte[] bs);//读取一个字节数组,返回值表示实际读取到的字节数</p><p>我们用InputStream具体子类:<strong>FileInputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.文件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 复制文件练习:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.源文件: 是读取用的, new FileInputStream("源文件")</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.目标文件: 是写入用的, new OutputStream("目标文件")</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 一边读取 源文件  一边写出到目标文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.关闭流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"F:\\书\\史铁生.docx"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"F:\\书\\copy.docx"</span>);</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((b=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*        //一次读取一个字节数组</span></span><br><span class="line"><span class="comment">        byte[] bs = new byte[1024];//用来保存读取到的字节数据</span></span><br><span class="line"><span class="comment">        int len = 0;//保存实际读取到的字节个数</span></span><br><span class="line"><span class="comment">        while((len=fis.read(bs))!=-1)&#123;</span></span><br><span class="line"><span class="comment">            fos.write(bs, 0, len);//写入bs中的从0下标开始len个字节 到文件中</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = e-s;</span><br><span class="line">        System.out.println(time);</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="缓冲流-相比较没有缓冲区的流-效率更高"><a href="#缓冲流-相比较没有缓冲区的流-效率更高" class="headerlink" title="缓冲流: 相比较没有缓冲区的流,效率更高"></a>缓冲流: 相比较没有缓冲区的流,效率更高</h5><p>BufferedOutputStream 缓冲输出流</p><p>构造方法</p><blockquote><p>public BufferedOutputStream(OutputStream out)  </p></blockquote><p>BufferedInputStream  缓冲输入流</p><p>构造方法</p><blockquote><p>public BufferedInputStream(InputStream in) </p></blockquote><h5 id="小案例：复制单级文件夹"><a href="#小案例：复制单级文件夹" class="headerlink" title="小案例：复制单级文件夹"></a>小案例：复制单级文件夹</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.文件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopySingleDirectory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        File srcfl = <span class="keyword">new</span> File(<span class="string">"F:\\demo1"</span>);</span><br><span class="line">        File dstfl = <span class="keyword">new</span> File(<span class="string">"F:\\demo2"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!dstfl.exists())&#123;</span><br><span class="line">            <span class="keyword">boolean</span> b = dstfl.mkdirs();</span><br><span class="line">            <span class="keyword">if</span> (b)&#123;</span><br><span class="line">                System.out.println(<span class="string">"文件夹不存在，成功创建"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"目标文件夹已存在，直接复制即可"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历文件  注意创建目标文件</span></span><br><span class="line">        File[] srcfiles = srcfl.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File src : srcfiles)&#123;</span><br><span class="line">            File dst = <span class="keyword">new</span> File(dstfl,src.getName());</span><br><span class="line">            copyfile(src,dst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyfile</span><span class="params">(File srcfl,File dstfl)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcfl));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(dstfl));</span><br><span class="line">        <span class="comment">//固定格式</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bs))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        System.out.println(<span class="string">"复制文件"</span>+srcfl.getName()+<span class="string">"成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小知识点-1"><a href="#小知识点-1" class="headerlink" title="小知识点"></a>小知识点</h5><p><strong>使用字节流读取中文的乱码问题:</strong></p><blockquote><p>如果是一个一个字节读取, 100%会出现乱码</p><p>如果是一个一个字节数组读取,可能也会出现乱码</p></blockquote><p>解决方法</p><blockquote><p>字符流</p><p>转换流</p></blockquote><h5 id="字符编码集"><a href="#字符编码集" class="headerlink" title="字符编码集"></a>字符编码集</h5><ul><li>ASCII码表    美国    每个字符对应一个字节    保存了字母，数字，以及一些常用符号    a-97 A-65 0-48</li><li>GB2313    保存常用汉字，一个中文占两字节，这两个字节全是负数</li><li>GBK    保存了基本所有汉字，统统占两个字节第一个字节为负，第二个字节随意</li><li>Unicode    统一码表（万国码表）所有文字统统两字符，向下兼容ASCII</li><li>UTF-8  在Unicode的基础上做了一些优化，能用一个字节的不用两个字节，且在每一个字节头加入了编码信息，一个中文占三个字节</li><li>Latin-1（ISO-8859-1）  拉丁码表，Tomact会用到</li></ul><p>编码 – &gt;文字到对应码值</p><p>解码 – &gt;码值到对应文字</p><h5 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h5><p>字符流的子类</p><p><strong>OutputStreamWriter</strong></p><p>查码表，是字符流通向字节流的桥梁，write方法与其他流一致</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase23.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeCN</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建可以把字符转成字节的转换流对象，并指定编码两种构造，指定编码也可不写，默认GBK</span></span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"c:\\cn8.txt"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//调用转换流，把文字写出去，其实是写到转换流的高效区中</span></span><br><span class="line">osw.write(<span class="string">"你好"</span>);<span class="comment">//写入高效区。</span></span><br><span class="line">osw.close();</span><br></pre></td></tr></table></figure><p><strong>InputStreamReader</strong></p><p>注意选择正确的解码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//演示字节转字符流的转换流</span></span><br><span class="line">readCN();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readCN</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//创建读取文件的字节流对象</span></span><br><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\cn8.txt"</span>);</span><br><span class="line"><span class="comment">//创建转换流对象 </span></span><br><span class="line"><span class="comment">//InputStreamReader isr = new InputStreamReader(in);这样创建对象，会用本地默认码表读取，将会发生错误解码的错误</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in,<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//使用转换流去读字节流中的字节</span></span><br><span class="line"><span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((ch = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println((<span class="keyword">char</span>)ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">isr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换流和子类区别：转换流可以选择解码/编码方式</p><p>java.lang.Object<br>    java.io.Writer<br>        java.io.OutputStreamWriter<br>            java.io.FileWriter</p><p>​    FileWriter和FileReader：作为子类，仅作为操作字符文件的便捷类存在。当操作的字符文件，使用的是默认编    码表时可以不用父类，而直接用子类就完成操作了，简化了代码。</p><h5 id="序列化流和反序列化流"><a href="#序列化流和反序列化流" class="headerlink" title="序列化流和反序列化流"></a>序列化流和反序列化流</h5><p>用于从流中读取对象的操作流 ObjectInputStream   称为 反序列化流</p><p>用于向流中写入对象的操作流 ObjectOutputStream   称为 序列化流</p><p>构造方法类似转换流，具体看API</p><p><strong>常见异常</strong></p><ul><li><p>当一个对象要能被序列化，这个对象所属的类必须实现Serializable接口。否则会发生异常NotSerializableException异常。</p></li><li><p>同时当反序列化对象时，如果对象所属的class文件在序列化之后进行的修改，那么进行反序列化也会发生异常InvalidClassException。发生这个异常的原因如下：</p><blockquote><p>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </p><p>该类包含未知数据类型 </p><p>该类没有可访问的无参数构造方法 </p><p>版本号默认有java管理，也可以生成版本号自己管理</p></blockquote></li></ul><p><strong>transient关键字</strong></p><p>不需要序列化的属性可以使用关键字transient修饰        同时static修饰的也不会序列化</p><h5 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h5><p>字节打印流  PrintStream</p><p>字符打印流  PrintWriter</p><p>两者基本一致，可以打印的目的地略有不同</p><blockquote><p>PrintStream    字符串的文件名，file对象，其他的tOutputStream，其他的Writer</p><p>PrintWriter    字符串的文件名，file对象，其他的tOutputStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWriterDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建流</span></span><br><span class="line"><span class="comment">//PrintWriter out = new PrintWriter(new FileWriter("printFile.txt"));</span></span><br><span class="line">PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="string">"printFile.txt"</span>);</span><br><span class="line"><span class="comment">//2，写数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">out.println(<span class="string">"helloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3,关闭流</span></span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三方小框架：commons-io"><a href="#第三方小框架：commons-io" class="headerlink" title="第三方小框架：commons-io"></a>第三方小框架：commons-io</h5><p>ps.第一方：官方，第二方：我们</p><p>jar包：java专用压缩包</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase24.JPG" alt></p><p>从上到下依次为：api文档，框架class文件，生成api文档的源文件，框架源文件，测试class文件，测试源文件，许可，注意事项</p><p><strong>添加jar包</strong></p><p>eclipse</p><blockquote><p>1.创建lib文件夹</p><p>2.将commons-io.jar拷贝到lib文件夹</p><p>3.右键点击，→</p></blockquote><p>IDEA</p><blockquote><p>file-&gt; project structure</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase25.JPG" alt></p><p>点最右侧那个+，然后OK就好</p></blockquote><p><strong>FileUtils</strong></p><blockquote><p>readFileToString(File file)：读取文件内容，并返回一个String；</p><p>writeStringToFile(File file，String content)：将内容content写入到file中；</p><p>copyFile(File srcFile, File destFile): 文件复制</p><p>copyDirectoryToDirectory(File srcDir,File destDir);文件夹复制</p></blockquote><p>多是一些静态方法，直接用类名就可调用</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p><strong>几个小概念</strong></p><blockquote><p>进程: 正在运行的程序 叫做进程</p><p>线程:    进程中的一个小任务</p><p>一个进程中通常是由多个线程在执行任务</p><p>main方法所在线程 我们称为主线程</p></blockquote><h5 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h5><p>Thread类:就是我们说的线程类</p><p>构造:</p><p>public Thread();//创建一个默认名字的线程对象</p><p>public Thread(String name);//创建一个指定名字的线程对象</p><p>创建新的线程的方法一:</p><blockquote><p>1.定义子类 继承 Thread</p><p>2.在子类中重写run方法(就是执行任务的方法,在run方法中写<strong>任务代码</strong>即可)</p><p>3.创建子类对象(就是创建一个线程对象)</p><p>4.开启这个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.创建子类线程对象</span></span><br><span class="line">MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="comment">//设置守护线程</span></span><br><span class="line">mt.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//4.开启线程,JVM自动会告诉CPU去执行线程任务代码</span></span><br><span class="line">mt.start();</span><br></pre></td></tr></table></figure><p>开启线程的第二种方式:</p><blockquote><p>1.定义实现类 实现Runnable接口</p><p>2.实现类要重写run方法(就是写任务代码的方法)</p><p>3.创建实现类对象</p><p>4.创建Thread对象,并把刚刚的实现类对象 作为参数传递</p><p>5.启动这个Thread对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"><span class="comment">//4.创建Thread对象,并把刚刚的实现类对象 作为参数传递</span></span><br><span class="line">Thread td = <span class="keyword">new</span> Thread(mr);</span><br><span class="line"><span class="comment">//5.开启线程</span></span><br><span class="line">td.start();</span><br></pre></td></tr></table></figure><p>内存图</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase26.bmp" alt></p><p>创建两个线程对象</p><blockquote><p>我们发现:</p><p>a.线程默认是有名字,名字Thread-n,n从0开始 依次递增的</p><p>b.我们可以修改线程的名字,但是一般不改</p><p>setName(String name);</p><p>c我们可以获取线程的名字,通过线程对象的getName方法获取</p><p>d.获取线程名字的最常用的方法</p><p>Thread.currentThread().getName();</p></blockquote><p>两种创建方式比较</p><p>从耦合性分析:</p><blockquote><p>第一种方式:线程和任务是紧紧联系在一起的,耦合性高</p><p>第二种方式:线程是线程,任务是任务,他们之间没有必然联系,给一个线程传递哪个任务那么该线程就执行哪个任务</p><p>所以说开发中,我们用第二种方式</p></blockquote><p>从代码的扩展性:</p><blockquote><p>第一种方式 由于是继承Thread,那么子线程类就不能继承别的类</p><p>第二种方式 由于是实现了接口,同时可以继承别的类</p><p>所以说开发中,我们用第二种方式</p></blockquote><h5 id="用匿名内部类创建对象"><a href="#用匿名内部类创建对象" class="headerlink" title="用匿名内部类创建对象"></a>用匿名内部类创建对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 匿名内部类:</span></span><br><span class="line"><span class="comment"> * 快速创建一个类的子类对象,或者一个接口的实现类对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 格式:</span></span><br><span class="line"><span class="comment"> * new 父类()&#123;</span></span><br><span class="line"><span class="comment"> * 重写方法();</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> * new 接口()&#123;</span></span><br><span class="line"><span class="comment"> * 实现方法()</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> * 使用匿名内部类 创建线程对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.第一种方式创建线程对象:继承方式</span></span><br><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"线程"</span>+getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"><span class="comment">//2.第二种方式创建线程对象:实现方式</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h5 id="案例：卖票"><a href="#案例：卖票" class="headerlink" title="案例：卖票"></a>案例：卖票</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:电影院卖票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 假设 上演"忍者神龟" 100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 有三个柜台在卖票,同时开卖,并且卖的都是这100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 三个柜台就是三个线程,他们同时执行同一个买票任务,同时操作一个共享数据100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicketsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建卖票任务对象</span></span><br><span class="line">TicketsRunnable tr = <span class="keyword">new</span> TicketsRunnable();</span><br><span class="line"><span class="comment">//2.创建 3个线程 去执行买票任务</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口3"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">120</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式一:</span></span><br><span class="line"><span class="comment"> *    给代码加上同步锁</span></span><br><span class="line"><span class="comment"> *    格式:</span></span><br><span class="line"><span class="comment"> *    synchronized(锁对象)&#123;</span></span><br><span class="line"><span class="comment"> *    代码</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> *    锁对象可以是任意对象</span></span><br><span class="line"><span class="comment"> *  先运行到那块的会拿到锁对象，然后执行几次后会将锁对象放回，让其他线程执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式二:</span></span><br><span class="line"><span class="comment"> *    同步方法</span></span><br><span class="line"><span class="comment"> *    格式:</span></span><br><span class="line"><span class="comment"> *    public synchronized void 方法名()&#123;</span></span><br><span class="line"><span class="comment"> *    需要运行的代码</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> *    注意:同步代码块和同步方法的原理是一样,都是具有锁对象,哪一个线程进来执行,那么该线程就持有这个锁对象</span></span><br><span class="line"><span class="comment"> *    这里同步方法使用的锁对象 叫做this对象</span></span><br><span class="line"><span class="comment"> *    如果同步方法是静态方法,那么他的锁对象是 当前类.class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">sale();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式三:</span></span><br><span class="line"><span class="comment"> * Lock接口方式</span></span><br><span class="line"><span class="comment"> * 我们实际用的是他的一个实现类:ReentrantLock</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在Lock接口中有两个方法:</span></span><br><span class="line"><span class="comment"> * lock();//获取锁</span></span><br><span class="line"><span class="comment"> * unlock();//释放锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">//创建一个Lock接口的实现类对象</span></span><br><span class="line">Lock l = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">l.lock();</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">l.unlock();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程状态图"><a href="#线程状态图" class="headerlink" title="线程状态图"></a>线程状态图</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase27.bmp" alt></p><h4 id="socket-网络编程"><a href="#socket-网络编程" class="headerlink" title="socket-网络编程"></a>socket-网络编程</h4><h5 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h5><p>网络通信协议:</p><blockquote><p>网络:由多台计算机,以及外部设备 连接起来一个系统 我们就称为网络</p><p>通信协议: 就像交通规则,规定网络上传输的数据的格式,大小,速度等等</p></blockquote><p>在我们现在的网络中都有哪些通信协议:</p><blockquote><p>TCP/IP协议</p><p>UDP协议</p><p>其他协议</p></blockquote><p>IP地址和端口号的介绍</p><blockquote><p>IP地址: 网络每一台计算的唯一标识</p><p>1Byte=8Bit</p><p>IP地址 每一个段 0-255 </p><p>端口号:</p><p>是每一个计算机中的”门”,一共有0-65535号门</p></blockquote><p>总结:我们向别的计算机发信息的时候</p><blockquote><p>确定 IP地址:为了找到那台计算机</p><p>确定 端口号: 为了确定发送到对方计算机中的哪个应用程序</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase28.bmp" alt></p><h5 id="InetAddress-代表IP地址类"><a href="#InetAddress-代表IP地址类" class="headerlink" title="InetAddress:代表IP地址类"></a>InetAddress:代表IP地址类</h5><blockquote><p>public static InetAddress getLocalHost();//获取你的计算机的IP地址对象</p><p>public String getHostName();//仅获取主机名</p><p>public String getHostAddress();//仅获取IP地址</p><p>public static InetAddress getByName(“其他主机的名字或者IP”);//远程主机的IP地址对象</p></blockquote><h5 id="UDP和TCP"><a href="#UDP和TCP" class="headerlink" title="UDP和TCP"></a>UDP和TCP</h5><p>UDP:用户数据报协议</p><blockquote><p>特点:面向无连接,数据是不安全,不完整    有无接收端均可</p><p>优点:效率高</p><p>比如:发短信,供屏软件,QQ视频</p></blockquote><p>TCP:传输控制协议</p><blockquote><p>特点:面向有连接,数据是安全,完整性    没有接收端会直接报错</p><p>比如:打电话,上网</p><p>TCP协议建立连接 有三个步骤 我们称为”三次握手”</p></blockquote><p><img src alt></p><h5 id="UDP使用"><a href="#UDP使用" class="headerlink" title="UDP使用"></a>UDP使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用UDP进行数据通信,需要用到两个类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 数据的发送接收器:DatagramSocket</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 数据包类:DatagramPacket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSender</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.创建DatagramPacket对象</span></span><br><span class="line"><span class="comment">//存储 发送的数据,对方的IP,端口号</span></span><br><span class="line">System.out.println(<span class="string">"请输入您要发送的数据:"</span>);</span><br><span class="line">String sendMsg = sc.nextLine();</span><br><span class="line"><span class="keyword">byte</span>[] bs = sendMsg.getBytes();</span><br><span class="line"><span class="comment">//IP地址:127.0.0.1  代表本机,本地回环地址</span></span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs,bs.length,InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">12345</span>);</span><br><span class="line"><span class="comment">//3.发送</span></span><br><span class="line">ds.send(dp);</span><br><span class="line">System.out.println(<span class="string">"发送数据成功!!!"</span>);<span class="comment">//192.168.146.72</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象,</span></span><br><span class="line"><span class="comment">//强调:接收端必须指定一个端口号</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.直接创建一个DatagramPacket对象</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs, bs.length);</span><br><span class="line"><span class="comment">//3.接收</span></span><br><span class="line">System.out.println(<span class="string">"等待发送端发送数据...."</span>);</span><br><span class="line">ds.receive(dp);<span class="comment">//这个方法具有等待功能,等待发送端发送过来的数据</span></span><br><span class="line">System.out.println(<span class="string">"接收数据成功!!"</span>);</span><br><span class="line"><span class="comment">//获取发送端的地址</span></span><br><span class="line">InetAddress sendAddress = dp.getAddress();</span><br><span class="line">System.out.println(<span class="string">"发送端是:"</span>+sendAddress.getHostAddress());</span><br><span class="line"><span class="comment">//获取真正的数据</span></span><br><span class="line"><span class="keyword">byte</span>[] data = dp.getData();</span><br><span class="line"><span class="comment">//获取发送端 发来了多少字节</span></span><br><span class="line"><span class="keyword">int</span> len = dp.getLength();</span><br><span class="line"><span class="comment">//打印数据</span></span><br><span class="line">String receiveMsg = <span class="keyword">new</span> String(data, <span class="number">0</span>, len);</span><br><span class="line">System.out.println(<span class="string">"发送端说:"</span>+receiveMsg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TCP使用"><a href="#TCP使用" class="headerlink" title="TCP使用"></a>TCP使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">进行简单数据交互</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP客户端:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.创建Socket对象,传入服务器的IP和端口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.通过Socket对象获取输出流,调用write方法写数据到服务器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.通过socket对象获取输入流,调用read方法读取服务器反馈的信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.关闭(Socket对象)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * TCP服务端:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.创建ServerSocket对象,传入一个端口,端口必须和客户端的一样</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.先获取哪一个客户端连接的服务器,通过accept()方法获取</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.通过Socket对象获取输入流,调用read方法读取客户端发来的数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.通过socket对象获取输出流,调用write方法向客户端反馈数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.关闭(ServerSocket,Socket)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yingpeng</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="comment">//2.获取到 哪一个 客户端连接的我</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line">Socket client = server.accept();<span class="comment">//此方法也具有等待功能,等待某一个客户端连接</span></span><br><span class="line"><span class="comment">//打印一些和客户端有关信息</span></span><br><span class="line">String ip = client.getInetAddress().getHostAddress();</span><br><span class="line">System.out.println(<span class="string">"小样,抓到你了:"</span>+ip);</span><br><span class="line"><span class="comment">//3.获取输入流,实际上是客户端写数据时的输出流</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">//4.读取数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(<span class="string">"客户端说:"</span>+<span class="keyword">new</span> String(bs,<span class="number">0</span>,len));</span><br><span class="line"><span class="comment">//5.要向客户端 回写数据,告诉客户端您的信息我已经收到了</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的消息已经收到..."</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给客户端反馈的信息发送成功!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">server.close();</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="comment">// 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这个构造方法干了很多事情:</span></span><br><span class="line"><span class="comment"> * a.自动去连接服务器</span></span><br><span class="line"><span class="comment"> * b.自动进行三次握手,建立连接</span></span><br><span class="line"><span class="comment"> * c.自动为连接中创建两个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 2.从客户端对象中获取 输出流:getOutputStream()</span></span><br><span class="line"><span class="comment">//OutputStream out = client.getOutputStream();</span></span><br><span class="line"> <span class="comment">// 3.调用输出流的Write方法写数据到服务器即可</span></span><br><span class="line"><span class="comment">//out.write("How are you".getBytes());</span></span><br><span class="line">client.getOutputStream().write(<span class="string">"How are you"</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给服务器发送数据成功!!"</span>);</span><br><span class="line"><span class="comment">//4.读取服务器 发送过来的反馈信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line">System.out.println(<span class="string">"服务器响应:"</span>+<span class="keyword">new</span> String(bs,<span class="number">0</span>,len));</span><br><span class="line"> <span class="comment">//  关闭资源</span></span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase29.bmp" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上传文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.创建Socket对象,连接服务器</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">System.out.println(<span class="string">"连接服务器成功.."</span>);</span><br><span class="line"><span class="comment">//2.获取输出流,把数据写向服务器</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line"><span class="comment">//3.创建文件的输入流,读取本地的文件数据</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\yingpeng\\Desktop\\pictures\\3.png"</span>);</span><br><span class="line"><span class="comment">//4.循环,读取本地文件,写到服务器</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fis.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭输出流</span></span><br><span class="line">client.shutdownOutput();</span><br><span class="line"><span class="comment">//5.获取服务器反馈的信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len1 = in.read(bs1);</span><br><span class="line">System.out.println(<span class="string">"服务器说:"</span>+<span class="keyword">new</span> String(bs1,<span class="number">0</span>,len1));</span><br><span class="line"><span class="comment">//6关闭</span></span><br><span class="line">client.close();</span><br><span class="line">out.close();</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器端服务器一直开启，通过多次执行客户端来多文件上传</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建ServerSocket对象,绑定一个端口</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.获取哪一个客户端连接的服务器</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line"><span class="keyword">final</span> Socket client = server.accept();</span><br><span class="line"><span class="comment">//开启一个线程,和clinet进行交互</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"小样:"</span>+client.getInetAddress().getHostAddress());</span><br><span class="line"><span class="comment">//3.获取输入流,读取客户端发来数据</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">//4.创建文件的输出流,把数据写到文件中</span></span><br><span class="line">String picName = <span class="string">"H:\\upload\\"</span>+System.currentTimeMillis()+<span class="string">".png"</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(picName);</span><br><span class="line"><span class="comment">//5.循环 从输入流读取客户端数据, 写入到文件中</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=in.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">fos.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;<span class="comment">//1小时</span></span><br><span class="line">System.out.println(<span class="string">"客户端的文件已经保存完毕,可以查看了"</span>+picName);</span><br><span class="line"><span class="comment">//6.告知客户端,文件真的真的真的上传成功</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的文件真的真的真的上传成功"</span>.getBytes());</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.关闭</span></span><br><span class="line"><span class="comment">//server.close();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个bug</strong></p><p>客户端传输完文件需主动调用client.shutdownoutputstream来关闭输出流，不然服务器会不知道是执行完了还是网络延迟</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase30.bmp" alt></p><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>一个应用程序已写好，后期出现的接口子类无法直接在该应用中new一个对象，该怎么办？</p><p>子类不确定，可以通过提供配置文件形式将不确定的信息存储在配置文件中即可。该程序只要之前写好读取配置文件的信息即可。</p><p>如果存储了指定的子类名，就根据具体名称找该类并进行加载和对象的创建，这些动作都是在定义软件时写好的</p><p>没有类之前就将创建对象的动作写好了，这就是动态的获取指定的类，并使用类中的功能——反射技术</p><h5 id="字节码文件对应的类"><a href="#字节码文件对应的类" class="headerlink" title="字节码文件对应的类"></a>字节码文件对应的类</h5><p>class Class    描述字节码文件的类</p><p>Field field    将字段封装成对象类型</p><p>Constructor cons    将构造函数封装成了对象类型</p><p>Method method    将类中的成员都封装成了对象</p><p>getField()</p><p>getMethod()</p><p>getConstrctor()</p><h5 id="获取字节码文件对象"><a href="#获取字节码文件对象" class="headerlink" title="获取字节码文件对象"></a>获取字节码文件对象</h5><p>要想获取字节码文件中的成员，首先要获取字节码文件对象</p><p><strong>法一</strong></p><p>通过object类中的getClass方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Class clszz1=p1.getClass();</span><br></pre></td></tr></table></figure><p>虽然通用，但必须有指定类，并对该类进行实例化才能调用getClass方法</p><p><strong>法二</strong></p><p>调用任意一个数据类型的一个静态成员class</p><p>不用实例化类，但还是需要指定的类</p><p><strong>法三</strong></p><p>使用class类中的forName方法，通过给定类名来获取相应的字节码文件对象</p><p>最常用，只需从配置文件中解析到类名即可</p><p>调用newInstanse()方法来实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String className = <span class="string">"cn.itcast.domain.Person"</span>;<span class="comment">//一般从配置文件解析获取</span></span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line">Object obj = clazz.newInstanse();</span><br><span class="line"><span class="comment">//1.通过给定类名称加载对应字节码文件，并封装成字节码文件对象</span></span><br><span class="line"><span class="comment">//2.通过new创建Person对象</span></span><br><span class="line"><span class="comment">//3.调用构造方法初始化</span></span><br><span class="line"><span class="comment">//通常被反射的类会提供无参构造，若没有会报instantiationException</span></span><br><span class="line"><span class="comment">//如果提供了，但是权限不够会报illegalAccessException</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//1.加载Person类，并将类封装成字节码对象</span></span><br><span class="line"><span class="comment">//2.通过new创建Person对象</span></span><br><span class="line"><span class="comment">//3.调用构造方法初始化</span></span><br><span class="line"></span><br><span class="line">String className = <span class="string">"cn.itcast.domain.Person"</span>;</span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line">Constructor cons = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//获取指定的构造器</span></span><br><span class="line">Object obj = cons.newInstance(<span class="string">"wangwu"</span>,<span class="number">23</span>);<span class="comment">//有了构造器对象后，通过其来初始化对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字段需要先获取到class对象</span></span><br><span class="line">Field field = clazz.getField(字段名);<span class="comment">//公共字段可以这样获取</span></span><br><span class="line">Field field = clazz.getDeclaredField(字段名);<span class="comment">//获取以声明字段多数方法都有对应的declare</span></span><br><span class="line">field.set(obj,<span class="number">30</span>)<span class="comment">//需要获取到字段和字节码对象，只可修改公共字段</span></span><br><span class="line">field.setAccessible();<span class="comment">//暴力访问，去除该字段访问权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取方法，需要先获取到class对象</span></span><br><span class="line">Method method = clazz.getMethod(方法名,<span class="keyword">null</span>);<span class="comment">//第二个表示无参</span></span><br><span class="line">method.invoke(<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//第一个为字节码对象，后面表示无参</span></span><br><span class="line"></span><br><span class="line">Method method = clazz.getMethod(方法名,String.class,<span class="keyword">int</span>.class);<span class="comment">//第二个表示无参</span></span><br><span class="line">method.invoke(obj,<span class="string">"wangwu"</span>,<span class="number">33</span>);</span><br></pre></td></tr></table></figure><h3 id="java设计思想"><a href="#java设计思想" class="headerlink" title="java设计思想"></a>java设计思想</h3><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>前人把解决问题的方案总结出一个套路</p><h5 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h5><p>静态代理设计模式</p><p>设计个接口，限制代理需要做哪些事，用接口来接收不同代理</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase11.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo10_代理设计模式;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 代理类:经销商</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPerson</span> <span class="keyword">implements</span> <span class="title">ComputerInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ComputerInterface lianxiang;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyCompany</span><span class="params">(ComputerInterface lianxiang)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lianxiang = lianxiang;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buyComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"鼠标,键盘,电脑包,u盘,操作系统,3000$ + "</span>+lianxiang.buyComputer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"需要运费1000块"</span>);</span><br><span class="line">lianxiang.repair();</span><br><span class="line">System.out.println(<span class="string">"再给500块保管费"</span>);</span><br><span class="line">System.out.println(<span class="string">"再给100块运费"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理设计模式</p><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>向上抽取原则</li></ul><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase2.JPG" alt></p><h2 id="Java数据结构和算法"><a href="#Java数据结构和算法" class="headerlink" title="Java数据结构和算法"></a>Java数据结构和算法</h2><p>先看几个经典算法面试题</p><ul><li>用最快速度判断str2是否为str1子串    暴力破解（逐字匹配）/kmp算法《部分匹配表》</li><li>汉诺塔问题    递归，分治算法</li><li>八皇后问题    回溯算法</li><li>马踏棋盘    图的深度优化算法（DFS），贪心算法（优化）</li></ul><p>算法是程序的灵魂，大厂对算法要求越来越高</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;入门及环境搭建&quot;&gt;&lt;a href=&quot;#入门及环境搭建&quot; class=&quot;headerlink&quot; title=&quot;入门及环境搭建&quot;&gt;&lt;/a&gt;入门及环境搭建&lt;/h4&gt;&lt;h5 id=&quot;下载JDK&quot;&gt;&lt;a href=&quot;#下载JDK&quot; class=&quot;headerlink&quot; title=&quot;下载JDK&quot;&gt;&lt;/a&gt;下载JDK&lt;/h5&gt;&lt;p&gt;进入Oracle官网，下载相应版本，最近下载好像都得注册个账号&lt;/p&gt;
&lt;p&gt;下完按到所需目录，一般默认，一直下一步即可，完了设置一下环境变量&lt;/p&gt;
&lt;p&gt;此电脑-&amp;gt;属性-&amp;gt;高级系统设置-&amp;gt;环境变量-&amp;gt;编辑path，把bin目录路径加入&lt;/p&gt;
&lt;p&gt;classpath也可以设置&lt;/p&gt;
&lt;p&gt;在cmd中，输入java -version检查是否安装成功&lt;/p&gt;
&lt;p&gt;javac 文件路径（编译，生成。class文件）&lt;/p&gt;
&lt;p&gt;java 文件名，不加后缀，运行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDE选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前比较流行的是eclipse和IDEA，我更喜欢IDEA，熟练了快捷键和各种模板之后会用得很舒服&lt;/p&gt;
&lt;h5 id=&quot;语言特点&quot;&gt;&lt;a href=&quot;#语言特点&quot; class=&quot;headerlink&quot; title=&quot;语言特点&quot;&gt;&lt;/a&gt;语言特点&lt;/h5&gt;&lt;p&gt;通过编译成统一的字节码，不同平台下载对应JVM来实现跨平台&lt;/p&gt;
&lt;p&gt;完全面向对象，简单，高性能，分布式，多线程，健壮&lt;/p&gt;
&lt;p&gt;JDK（用于开发）-&amp;gt;JRE（运行环境）-&amp;gt;JVM(依次包含)&lt;/p&gt;
&lt;p&gt;java SE    标准版，定位于个人计算机用户&lt;/p&gt;
&lt;p&gt;java EE    企业版，定位于服务器端领域&lt;/p&gt;
&lt;p&gt;java ME    微型版，定位于消费电子产品的应用&lt;/p&gt;
&lt;p&gt;越高级语言越容易入门，但要精通还需沉下心来&lt;/p&gt;
&lt;h4 id=&quot;数据类型和运算符&quot;&gt;&lt;a href=&quot;#数据类型和运算符&quot; class=&quot;headerlink&quot; title=&quot;数据类型和运算符&quot;&gt;&lt;/a&gt;数据类型和运算符&lt;/h4&gt;&lt;h5 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h5&gt;&lt;p&gt;单行，多行，文档注释&lt;/p&gt;
&lt;h5 id=&quot;标识符的命名规则&quot;&gt;&lt;a href=&quot;#标识符的命名规则&quot; class=&quot;headerlink&quot; title=&quot;标识符的命名规则&quot;&gt;&lt;/a&gt;标识符的命名规则&lt;/h5&gt;&lt;p&gt;虽然不同语言之间会有细微区别，但为了便于编写，感觉大多数语言都推荐采用比较大众的规范&lt;/p&gt;
&lt;p&gt;不可以是java关键字，并且大小写敏感&lt;/p&gt;
&lt;p&gt;类名    大驼峰命名法&lt;/p&gt;
&lt;p&gt;方法和变量    小驼峰命名法&lt;/p&gt;
&lt;p&gt;常量    大写&lt;/p&gt;
&lt;p&gt;数据类型向上隐士转换，向下需要显示加括号强转&lt;/p&gt;
&lt;h5 id=&quot;基本数据类型（四类八种）&quot;&gt;&lt;a href=&quot;#基本数据类型（四类八种）&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型（四类八种）&quot;&gt;&lt;/a&gt;基本数据类型（四类八种）&lt;/h5&gt;&lt;p&gt;byte(1)  boolean(1)  short(2)  char(2)unicode字符集  int()4  float(4)  long(8)  double(8)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限制double小数点数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DecimalFormat df = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DecimalFormat(&lt;span class=&quot;string&quot;&gt;&quot;0.00&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df.format(total);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;string与基本类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包装类的parse和tostring方法&lt;/p&gt;
&lt;h5 id=&quot;引用数据类型&quot;&gt;&lt;a href=&quot;#引用数据类型&quot; class=&quot;headerlink&quot; title=&quot;引用数据类型&quot;&gt;&lt;/a&gt;引用数据类型&lt;/h5&gt;&lt;p&gt;string，数组，集合ArrayList，Scanner，Random，自定义类型&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>javaSE</title>
    <link href="http://yoursite.com/2019/08/16/java%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/08/16/java基础/</id>
    <published>2019-08-16T05:15:33.000Z</published>
    <updated>2019-10-19T04:28:03.271Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>### </p><h4 id="入门及环境搭建"><a href="#入门及环境搭建" class="headerlink" title="入门及环境搭建"></a>入门及环境搭建</h4><h5 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h5><p>进入Oracle官网，下载相应版本，最近下载好像都得注册个账号</p><p>下完按到所需目录，一般默认，一直下一步即可，完了设置一下环境变量</p><p>此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;编辑path，把bin目录路径加入</p><p>classpath也可以设置</p><p>在cmd中，输入java -version检查是否安装成功</p><p>javac 文件路径（编译，生成。class文件）</p><p>java 文件名，不加后缀，运行</p><p><strong>IDE选择</strong></p><p>目前比较流行的是eclipse和IDEA，我更喜欢IDEA，熟练了快捷键和各种模板之后会用得很舒服</p><h5 id="语言特点"><a href="#语言特点" class="headerlink" title="语言特点"></a>语言特点</h5><p>通过编译成统一的字节码，不同平台下载对应JVM来实现跨平台</p><p>完全面向对象，简单，高性能，分布式，多线程，健壮</p><p>JDK（用于开发）-&gt;JRE（运行环境）-&gt;JVM(依次包含)</p><p>java SE    标准版，定位于个人计算机用户</p><p>java EE    企业版，定位于服务器端领域</p><p>java ME    微型版，定位于消费电子产品的应用</p><p>越高级语言越容易入门，但要精通还需沉下心来</p><h4 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h4><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>单行，多行，文档注释</p><h5 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h5><p>虽然不同语言之间会有细微区别，但为了便于编写，感觉大多数语言都推荐采用比较大众的规范</p><p>不可以是java关键字，并且大小写敏感</p><p>类名    大驼峰命名法</p><p>方法和变量    小驼峰命名法</p><p>常量    大写</p><p>数据类型向上隐士转换，向下需要显示加括号强转</p><h5 id="基本数据类型（四类八种）"><a href="#基本数据类型（四类八种）" class="headerlink" title="基本数据类型（四类八种）"></a>基本数据类型（四类八种）</h5><p>byte(1)  boolean(1)  short(2)  char(2)unicode字符集  int()4  float(4)  long(8)  double(8)</p><p><strong>限制double小数点数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.00"</span>);</span><br><span class="line">df.format(total);</span><br></pre></td></tr></table></figure><p><strong>string与基本类型转换</strong></p><p>包装类的parse和tostring方法</p><h5 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h5><p>string，数组，集合ArrayList，Scanner，Random，自定义类型</p><a id="more"></a><h4 id="包的声明和访问"><a href="#包的声明和访问" class="headerlink" title="包的声明和访问"></a>包的声明和访问</h4><p>包的本质就是文件夹，在包名中以.来区分上下级文件关系</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase8.JPG" alt></p><p>作用：分类管理文件</p><p>包的声明：package 包名        指示某个类在哪个包下    包的声明必须和类的实际位置保持一致</p><p>包的导入：用来告诉编译器我们要用的类在哪个包下        import 包名.类名</p><p>不导包时需采用全限定类名：包名.类名（所有用到类名的地方都需这样写）</p><h4 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h4><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase9.JPG" alt></p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象是一种编程思想，是相当于面向过程的</p><p>面向过程：遇到问题，亲力亲为一步一步解决        核心理念：谁的功能谁负责</p><p>面向对象：遇到一个问题，找具有解决这个问题能力的对象，调用它的方法</p><p>面向对象三大特性：封装（安全性），继承（拓展性），多态（）</p><p>类的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="comment">//成员类名</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个标准的类封装：隐藏细节，对外暴露公共防蚊1方式构造：无参必须有，全参最好有</span></span><br><span class="line"><span class="comment">//类名作为方法参数或返回值时需要传入或返回的应该是该类的对象</span></span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase1.JPG" alt></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是两个类之间的关系，子类继承父类</p><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><p>区分局部变量和成员变量同名的情况</p><p>this的本质：实际上是个对象    谁调用的方法，this指的就是谁</p><p>匿名对象：（可用可不用）    没有名字的对象</p><p>只创建对象，但不用变量接收</p><p>在一些用来传参后续不调用时使用</p><p>特点：匿名对象也是一个对象，具有对象所有功能</p><p>​            每次调用都是一个新的对象，所一每个对象只能使用一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.xxx<span class="comment">//调用该对象属性</span></span><br><span class="line"><span class="keyword">this</span>.aaa()<span class="comment">//调用该对象方法</span></span><br><span class="line"><span class="comment">//高级使用：用来调用本类的其他构造通过输入不同参数来调用不同构造</span></span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase4.JPG" alt></p><h5 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h5><p>区分子类和父类成员同名的情况，但默认优先调用子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.xxx<span class="comment">//调用父类属性</span></span><br><span class="line"><span class="keyword">super</span>.aaa()<span class="comment">//调用父类方法</span></span><br><span class="line"><span class="keyword">super</span>();<span class="comment">//调用父类构造方法，通过输入不同参数来调用不同构造，默认调用无参构造</span></span><br><span class="line"><span class="comment">//无论调用子类那个构造，都会先调用父类构造，符合单一职责原则，一个类只需负责给本类变量初始化</span></span><br></pre></td></tr></table></figure><h5 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承必须合理人是人他妈生的，妖是妖他妈生的</span></span><br><span class="line"><span class="comment">//继承中的成员抽取了子类中的共性内容</span></span><br><span class="line"><span class="comment">//子类会自动继承父类中所有成员，但private不可访问</span></span><br><span class="line"><span class="comment">//创建子类对象时会先创建其父类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承后成员变量不同时，没有任何问题，相同时优先访问子类</span></span><br><span class="line"><span class="comment">//继承后成员方法不同时，没有任何问题，相同时(子类重写了父类方法时)优先访问子类，但可以通过super.方法名访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只能单继承，但可以多层继承（直接父类唯一，但可以有多个间接父类）</span></span><br><span class="line"><span class="comment">//多继承的话调用方法时会产生不确定性，同名父类成员不知道该掉哪个</span></span><br></pre></td></tr></table></figure><p>继承大大提高代码重用性</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase3.JPG" alt></p><ul><li><p>方法的重载：在同一个类中，方法名相同，但参数列表不同（参数类型，参数顺序，参数个数任一不同）</p></li><li><p>方法的重写（覆盖，覆写override）：子类中出现了和父类一模一样的方法</p><ul><li>重写原因：当子类发现继承过来的方法不适用时需要重写自己的方法</li><li>重写要求：该方法子类权限需大于等于父类权限（一般都是相同权限）    public  protected  default  private</li></ul><p>private方法不可重写    方法名，参数列表，返回值类型必须一模一样</p></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>一个对象的多种状态</p><p>java中的前提：必须有字符类关系，必须有方法的重写</p><h5 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h5><p>抽象类：以前一个类中包含抽象方法即为抽象类，现在只要由关键字abstract修饰即为抽象类</p><p>抽象类不可以实例化，天生就是作为父类的</p><p>抽象方法：只有声明而没有实现        向上抽取时会出现一种特殊情况，方法功能声明相同，但方法主体不同，这时只抽取方法声明，所得即为抽象方法        必须用关键字abstract修饰        不能调用，为了强制子类去重写</p><blockquote><p>类名作为返回值或参数时，传递和返回的应是该类对象</p><p>抽象类作为返回值或参数时，传递和返回的应是该类的子类的对象</p></blockquote><p>链式编程：当返回值为调用这个方法的对象时，便可以链式的调用下去</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase5.JPG" alt></p><p><strong>小练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例：武警开坦克打飞机</span></span><br><span class="line"><span class="comment">//名词提取：武警 坦克  飞机再分析每个类对应属性和方法</span></span><br></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>类：一堆具有共同属性和成员方法的对象的集合</p><p>接口：方法的集合，只能定义抽象方法    天生作为父接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class类</span></span><br><span class="line"><span class="comment">//abstract class抽象类</span></span><br><span class="line"><span class="comment">//interface接口</span></span><br><span class="line"><span class="comment">//enum枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line"><span class="comment">//不能定义普通成员变量，只能定义抽象方法</span></span><br><span class="line"><span class="comment">//可以定义常量public static final 变量名即使不加修饰，编译器也会自动添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发中常用模式：一个类继承一个抽象类，实现多个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> <span class="title">B</span> <span class="keyword">implements</span> 接口<span class="title">A</span>，接口<span class="title">B</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类与类之间是单继承，一个子类只能有一个直接父类</p><p>接口与接口之间支持多继承也支持多层继承</p><p>类与接口之间不叫继承（extends）而是实现（implements）    可以多实现</p><p><strong>比较抽象类和接口</strong></p><p>相同点：都不能实例化，都是作为父类/父接口，子类继承/实现都不行重写抽象方法</p><p>不同点：抽象类中不全是抽象方法，可以有普通成员变量，修饰的关键字不同    弥补了java的单继承</p><p>思想上的区别：抽象类中必须定义整个体系的共性内容</p><p>​                            接口中定义整个继承体系之外额外的扩展功能（谁想有这些功能就来是实现下这个接口）</p><p>优先使用接口    需要定义子类行为又要为子类提供共性功能时才用抽象类</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase6.JPG" alt></p><h5 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h5><p>父类类型 变量名 = new 子类类型();</p><p>父类类型变量指向了子类对象</p><p>注意事项：多态使用变量是，编译和运行都看父类        调用成员方法，编译看父类，运行看子类</p><p>多态的弊端：只能调用子父类共有的方法，不能调用子类特有的（因为编译时看父类，特有的编译过不了）</p><p>好处：提高灵活性，父类可以接收任何一个子类对象    传哪个子类运行哪个子类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弊端解决方案</span></span><br><span class="line"><span class="comment">//向下转型：强制类型转换double转int，父类转之类把向下和强转关联记忆吧</span></span><br><span class="line"><span class="comment">//向上转型:隐式类型转换  子类转父类（多态） 向下转换会面临不知道该转成哪个子类的困扰，易出现类型转换异常</span></span><br><span class="line"><span class="comment">//向下转型弊端解决：instanceof格式：boolean b = 父类对象名 instanceof 子类对象名</span></span><br></pre></td></tr></table></figure><h5 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h5><ul><li><p>成员内部类：定义类中方法外</p><p>在其他类中创建对象    外部类名.内部类名 对象名 = new 外部类名().new 内部类();</p></li><li><p>局部内部类：定义方法中</p><p>在其他类中无法使用，只能局部使用</p></li></ul><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>一种特殊的语法，用于快速创建抽象类的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//创建抽闲类对象</span><br><span class="line">//创建子类继承抽象类重写抽象方法new子类对象</span><br><span class="line">//用匿名内部类可以一步完成</span><br><span class="line">new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;.调用属性/方法;</span><br><span class="line"></span><br><span class="line">//最常用</span><br><span class="line">抽象类名 对象名 = new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;;</span><br><span class="line">//只重写抽象方法而不写独有的方法，因为没有名字，即使写了也无法向下强转为子类调用</span><br></pre></td></tr></table></figure><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//当我们使用到这个类的时候（实例化或使用静态成员等等），JVM会自动执行静态代码块中的内容</span></span><br><span class="line">        <span class="comment">//仅在第一次使用到这个类的时候会执行一次，第二次就不会了</span></span><br><span class="line">        <span class="comment">//优先级高于main和构造方法</span></span><br><span class="line">        <span class="comment">//用于初始化类，比如MySQL加载驱动等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><h5 id="static-静态的"><a href="#static-静态的" class="headerlink" title="static    静态的"></a>static    静态的</h5><p>用于修饰类中的成员    被static修饰的成员访问时无需实例化再调用，可以直接通过类名访问（推荐）</p><p>当一个对象不独属于某个成员，而是所有成员共享事应加static修饰</p><p><strong>静态没有多态性</strong>，静态属于类，而多态属于对象    多态调用静态成员时没有多态性（访问的是父类而非子类）</p><p>静态优先于对象存在</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase7.JPG" alt></p><h5 id="final-最终的"><a href="#final-最终的" class="headerlink" title="final    最终的"></a>final    最终的</h5><p>可以修饰类，成员变量，成员方法，局部变量（基本类型，引用类型）</p><p>通过最终来理解这些性质</p><blockquote><p>final修饰类——最终类：不能被继承，但可以有父类（太监类）</p><p>final修饰成员变量：该变量必需在被实例化前赋值，且只能赋值一次</p><p>final修饰成员方法：该方法不能被子类重写</p><p>final修饰的基本类型局部变量只能赋值一次</p><p>final修饰的引用类型局部变量只能赋值一次，但其所指向的对象的内容可以随意改变</p></blockquote><h5 id="类中各种成员的初始化的顺序"><a href="#类中各种成员的初始化的顺序" class="headerlink" title="类中各种成员的初始化的顺序"></a>类中各种成员的初始化的顺序</h5><blockquote><p>1.如果类中存在继承关系(像 Son 继承 Father)  则首先会初始化导出类(Son)的基类(Father)，然后再是导出类</p><p>2.在基类首先会初始化静态 的东西  静态代码块&gt;静态变量  而且只初始化一次 （因为静态的东西都是跟着类的加载而加载的）</p><p>3.随后就是初始化导出类的静态东西  跟基类的静态初始化一样（同上）</p><p>4.初始化基类无参构造器（调用有参就初始化有参构造器）</p><p>5.初始化导出类无参构造器（注意：导出类的成员变量和代码块都是是比构造函数的初始化要早。。看输出结果可知）可知）</p></blockquote><h4 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h4><p>是类层次的根类，所有类都直接或间接继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//两个重要方法</span><br><span class="line">boolean equals(Object obj);//obj中定义的是根据地址计算出的hashcode</span><br><span class="line">//string类中重写了，改为比较字符串内容,我们自己定义类也一般会重写</span><br><span class="line">String toString(Object obj)//返回该对象的字符串表示默认包名.类名@hashcode(地址)</span><br><span class="line">//system.out 打印对象会默认调用tostring    我们一般会重写这个方法</span><br></pre></td></tr></table></figure><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>java代码编译或执行过程中出现的一些问题</p><h5 id="异常的继承体系"><a href="#异常的继承体系" class="headerlink" title="异常的继承体系"></a>异常的继承体系</h5><blockquote><p>Throwable：可以抛出去的东西</p><blockquote><p>Exception：异常（普通问题）</p><blockquote><p>编译时异常：Exception及其子类（RuntimeException除外）</p><p>运行时异常：RuntimeException及其子类</p></blockquote><p>Errow：错误（严重的问题）</p></blockquote></blockquote><h5 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h5><p>异常处理：异常处理指的是一种可能性，只有当出现了异常时才会执行异常处理代码，否则正常执行</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase10.JPG" alt></p><blockquote><p>异常处理方式</p><p>不处理</p><blockquote><p>throw：动词，真正的抛出一个异常</p><p>throws：形容词，用来形容一个方法，表示该方法可能抛出的异常 要求调用者去处理它</p><p>public void 方法名（参数）throws 可能抛出的异常类型{</p><p>}</p></blockquote><p>捕获处理</p><blockquote><p>try(){</p><p>​    可能出现异常的代码</p><p>}catch(对应类型的异常对象){</p><p>​    //catch可以有多个</p><p>​    //处理异常</p><p>}finally{</p><p>​    //写上必须要执行的代码，比如释放资源等</p><p>}</p><p>一次捕获多次处理: 一个try 多个catch  (多个catch中 必须是异常子类在前,父类在后)</p><p>多次捕获多次处理: 多个try,每个try多应一个catch</p><p>一次捕获一次处理(最常用的):一个try一个catch(catch中异常类必须所有可能出现异常的父类)</p></blockquote></blockquote><p>注意事项：子类异常必须从属于父类异常  </p><p>技巧: 如何区分一个异常类 到底是编译时还是运行时异常</p><blockquote><p>1.编译时异常 在编译的时候会报错的 (需要我们去处理)</p><p>2.运行时异常 在编译的时候不会报错</p><p>只要定义一个方法,在方法中抛出一个异常对象,如果编译报错那么就是编译时异常</p><p>如果编译成功,那么就是运行时异常</p></blockquote><p>请你说出十个运行时异常:</p><blockquote><p>1.RuntimeException</p><p>2.ClassCastException:类型转换异常 (向下转型的时候)</p><p>3.ArrayIndexOutOfBoundsException:数组下标越界</p><p>4.StringIndexOutOfBoundsException:字符串下标越界</p><p>5.NullPointerException:空指针异常</p></blockquote><p>自定义异常类：</p><blockquote><p>1.创建一个类,这个类必须用Exception结尾</p><p>2.必须继承 Exception 或者 RumtimeException</p><p>3.自定义的异常 至少有两个构造</p><blockquote><p>a.空参数构造</p><p>b.带有String类型参数的构造        </p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo09_自定义异常的练习;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoSuchAgeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoSuchAgeException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//带有String的构造内部调用super(s)，将传入的string交给父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoSuchAgeException</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p>Date类:日期类    多数方法都过时了，不常用</p><p>标准时间1970年1月1日0时0分0秒</p><p>构造:</p><blockquote><p>public Date();//代表当前系统时间的Date对象</p><p>public Date(long time);//代表距离标准时间 time毫秒值的Date对象</p></blockquote><p>成员方法:</p><blockquote><p>public String toString();//Date    重写Object类的toString方法</p><p>public long getTime();//获取当前Date对象的毫米值        与public Date(long time)互逆</p></blockquote><p>DateFormat:日期格式化类,是一个抽象类</p><p>具体的子类:SimpleDateFormat</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/java12.JPG" alt></p><p>构造:</p><blockquote><p>public SimpleDateFormat(String pattern);//以指定的模式创建格式化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(yyyy年MM月dd日HH时mm分ss秒);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>成员方法:</p><blockquote><p>public String format(Date d);//把date对象按照指定的模式 转成字符串</p><p>public Date parse(String s);//把字符串转成Date对象,如果字符串有问题,就会抛出ParseException</p></blockquote><h4 id="Calendar-日历类"><a href="#Calendar-日历类" class="headerlink" title="Calendar:日历类"></a>Calendar:日历类</h4><p>获取Calendar对象</p><blockquote><p>public static Calendar getInstance();//返回的是抽象类Calendar的某一个子类</p></blockquote><p>成员方法:</p><blockquote><p>public int get(int field);//获取指定字段的值</p><p>public void add(int field,int amount);//给指定的字段增加值</p><p>public void set(int field,int value);//修改指定字段的值</p><p>public Date getTime();//把Calendar对象转成Date 对象</p><p>getTime().getTime()    相当于调用date的方法来获取毫秒值</p></blockquote><h4 id="System-系统类"><a href="#System-系统类" class="headerlink" title="System:系统类"></a>System:系统类</h4><p>该类无法思力华，被私有化了</p><blockquote><p>public static void exit(0);//结束JVM</p><p>public static void gc();//通知垃圾回收器过来收垃圾，只是通知，不一定会来</p><p>public static getProperty(String key);//根据键 获取值</p><p>public static long currentTimeMillis();//获取当前系统的毫秒值</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase13.JPG" alt></p><h4 id="Math-数学类"><a href="#Math-数学类" class="headerlink" title="Math:数学类"></a>Math:数学类</h4><p>都是些静态方法，直接调用就好</p><blockquote><p>求最大值    max</p><p>求最小值     min</p><p>求绝对值    abs</p><p>求随机数      random    返回一个[0,1)之间的数，通过简单计算得到自己想要的范围</p><p>求四舍五入    </p><p>ceil(向上取整) </p><p>floor(向下取整) </p><p>pow(求次幂)</p></blockquote><h4 id="基类数据类型包装类"><a href="#基类数据类型包装类" class="headerlink" title="基类数据类型包装类"></a>基类数据类型包装类</h4><p>八种基本类对应的包装类型</p><blockquote><p>byte    boolean    short    char    int    float    double    long</p><p>Byte    Boolean    Short    Character    Interger    Float    Double    Long</p></blockquote><p>作用</p><blockquote><p>在集合中只允许存储包装类型，不可以存基本类型</p><p><strong>实现字符串的转换</strong>   public static int parseInt(String s);    将字符串转为int，其它基本类型类比即可</p></blockquote><p>自动拆箱装箱</p><blockquote><p>装箱：基本类型-&gt;包装类型    </p><p>拆箱：包装类型-&gt;基本类型</p></blockquote><blockquote><p>哪些数据类型 重写了toString()</p><p>1.String类</p><p>2.保存数据的引用类型 (Integer,Double…,集合,map)</p><p>3.自定义类 可以重写toString  </p></blockquote><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>所有编程语言都支持，用来匹配字符串的</p><p>boolean b = 普通字符串  匹配  正则表达式</p><blockquote><p>public boolean matches(String regex);</p><p>boolean b = “普通字符串”.matches(“正则表达式”);</p></blockquote><blockquote><p>public String[] split(String regex);        切割字符串,返回切割后的字符串数组</p></blockquote><p>书写技巧：一位一位的匹配</p><p>通配符</p><blockquote><p>正则表达式中 “.”代表任意字符</p><p>在DOS中 “*”代表任意内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * QQ号码需要满足的规则:</span></span><br><span class="line"><span class="comment"> * 1.必须是0-9的数字</span></span><br><span class="line"><span class="comment"> * 2.开头必须1-9中的一个数字</span></span><br><span class="line"><span class="comment"> * 3.位数必须 5-12位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qq</span><span class="params">()</span></span>&#123;</span><br><span class="line">String qq = <span class="string">"12355a63564"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = qq.matches(<span class="string">"[1-9][0-9]&#123;4,11&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 举例：校验手机号码</span></span><br><span class="line"><span class="comment"> * 1：要求为11位0-9的数字</span></span><br><span class="line"><span class="comment"> * 2：第1位为1，第2位为3、4、5、7、8中的一个，后面9位为0到9之间的任意数字。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">phone</span><span class="params">()</span></span>&#123;</span><br><span class="line">String phone = <span class="string">"18600363521"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = phone.matches(<span class="string">"1[34578][0-9]&#123;9&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 案例:切割电话</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String phone = <span class="string">"2345--4564----6546-----1345"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切割phone  把号码切割出来</span></span><br><span class="line"><span class="comment">//+号 在正则表达式中有特殊意义,表示连续的多个相同的字符</span></span><br><span class="line">String[] phones = phone.split(<span class="string">"-+"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; phones.length; i++) &#123;</span><br><span class="line">System.out.println(phones[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:切割ip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split02</span><span class="params">()</span></span>&#123;</span><br><span class="line">String ip = <span class="string">"192...168....123......110"</span>;</span><br><span class="line"><span class="comment">//"."号 在正则表达式中 表示 任意字符</span></span><br><span class="line"><span class="comment">//转译字符</span></span><br><span class="line"><span class="comment">//\t</span></span><br><span class="line"><span class="comment">//\n</span></span><br><span class="line">String[] ips = ip.split(<span class="string">"\\.+"</span>);<span class="comment">//在正则表达式中 "\\" 代表一个"\"</span></span><br><span class="line">System.out.println(ips.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ips.length; i++) &#123;</span><br><span class="line">System.out.println(ips[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String中的方法（4532）"><a href="#String中的方法（4532）" class="headerlink" title="String中的方法（4532）"></a>String中的方法（4532）</h4><h5 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIngoreCase</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> startIndex)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> startIndex,<span class="keyword">int</span> endIndex)</span></span>;<span class="comment">//左闭右开</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexof</span><span class="params">(String subStr)</span></span>;<span class="comment">//少用</span></span><br></pre></td></tr></table></figure><h5 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span>；</span></span><br></pre></td></tr></table></figure><h5 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span></span>;<span class="comment">//去掉两端空格</span></span><br><span class="line">String[] split(String str);<span class="comment">//一某一个字符串来分割字符串</span></span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合框架:</p><blockquote><p>List–&gt; ArrayList,LinkedList,Vector</p><p>Set –&gt; HashSet,LinkedHashSet,TreeSet</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase14.JPG" alt></p><h5 id="Collection接口中的公共方法"><a href="#Collection接口中的公共方法" class="headerlink" title="Collection接口中的公共方法:"></a>Collection接口中的公共方法:</h5><p>子类不是都有下标，所有Collection无下标，故而无法进行改查操作</p><blockquote><p>增: add(E e);</p><p>删: remove(Object obj);</p><p>改: 无</p><p>查: 无</p><p>其他:</p><blockquote><p>int size();//长度</p><p>boolean contains(Object obj);</p><p>void clear();//清空</p><p>Object[] toArray();    //集合转换成数组</p></blockquote></blockquote><p>在ArrayList中 有一个方法  </p><p>addAll(Collection c);//把集合c里面的每一个元素添加到ArrayList中</p><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>在Collection根解扣子中定义一种公共的遍历方式:迭代器遍历</p><p>Iterator&lt;泛型和集合的一样&gt; it = 集合对象.iterator();    底层类似链表</p><p>迭代器对象 有两个方法:</p><blockquote><p>hasNext();//判断有没有下一个</p><p>next();//取出下一个</p></blockquote><p><strong>以上两个方法必须配合使用</strong></p><p>补充</p><blockquote><p>Concurrent(并发)Modification(修改)Exception</p><p>java规定,如果一个集合使用迭代器遍历,那么在遍历的过程中 <strong>不允许修改集合的长度(</strong>增加或者删除)</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase15.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个集合对象,使用多态</span></span><br><span class="line">Collection&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//2.添加</span></span><br><span class="line">names.add(<span class="string">"郭德纲"</span>);</span><br><span class="line">names.add(<span class="string">"刘德华"</span>);</span><br><span class="line">names.add(<span class="string">"柳岩"</span>);</span><br><span class="line">names.add(<span class="string">"范伟"</span>);</span><br><span class="line">names.add(<span class="string">"范伟1"</span>);</span><br><span class="line"><span class="comment">//3.获取names集合的迭代器对象</span></span><br><span class="line">Iterator&lt;String&gt; it = names.iterator();</span><br><span class="line"><span class="comment">//4.标准代码</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;<span class="comment">//反复判断有没有下一个元素</span></span><br><span class="line">String s = it.next();<span class="comment">//如果有取出下一个元素</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h5><p>增强for循环比普通的for循环增强在哪?</p><blockquote><p>增强在语法上更加简单</p></blockquote><p>格式:</p><blockquote><p>for(数据类型 变量名:数组/集合){</p><p>syso(变量名);</p><p>}</p></blockquote><p>注意:</p><blockquote><p>当你使用增强for循环遍历集合的时候</p><p>底层采用的是迭代器    </p></blockquote><p>总结: </p><blockquote><p>当你使用增强for循环遍历集合的时候,不能修改集合的长度</p></blockquote><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>泛泛的类型,不确定的类型，类型参数化</p><p>格式:</p><blockquote><p><e>,&lt;K,V&gt;</e></p></blockquote><p>好处</p><blockquote><p>避免了强制类型转换</p><p>将运行时的ClassCsatException变为了编译错误</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/java16.JPG" alt></p><p>泛型通配符</p><blockquote><p>?:代表任意类型</p><p>&lt;? extends Animal&gt; : 表示一种泛型,这种泛型必须是Animal 或者Animal的子类</p><p>&lt;? super Animal&gt;:表示一种泛型,这种泛型必须是Animal  或者Animal的父类</p></blockquote><p>泛型可以用在类上，方法上，接口上</p><blockquote><p>泛型用在类上: 泛型类</p><blockquote><p>格式:public class 类名<e></e></p><p>当你创建该类的对象的时候,就可以确定</p></blockquote><p>泛型用在方法上:泛型方法</p><blockquote><p>格式:public <t> 返回值类型 方法名(T t);</t></p><p>当你调用方法,传递参数的时候确定</p></blockquote><p>泛型用在接口上:泛型接口</p><blockquote><p>格式:public interface 接口名<e>    </e></p><p>1.实现类实现接口的时候,直接确定</p><p>2.实现类实现接口的时候,不确定泛型,而是直接把泛型继承下来,当这个实现类创建对象的时候确定</p></blockquote></blockquote><h5 id="堆栈和队列"><a href="#堆栈和队列" class="headerlink" title="堆栈和队列"></a>堆栈和队列</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase18.JPG" alt></p><h5 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase19.JPG" alt></p><h5 id="list接口"><a href="#list接口" class="headerlink" title="list接口"></a>list接口</h5><p>List接口的特点:</p><blockquote><p>a.有下标</p><p>b.有序的(有序不是自然顺序,不是123,abc,有序指的是存和取的顺序一致)</p><p>c.可重复</p></blockquote><p>实现类:ArrayList,LinkedList,Vector</p><blockquote><p>ArrayList:底层采用数组结构,查询快,增删慢</p><p>LinkedList:底层采用链表结构,查询慢,增删快</p><p>Vector:底层采用数组结构,查询快,增删慢（基本不用）</p></blockquote><p>List结构中具有的方法:</p><blockquote><p>增: add(E e);add(int index,E e);</p><p>删: remove(Object obj);remove(int index);</p><p>改: set(int index,E e);</p><p>查: get(int index);</p><p>其他:</p><p>size(),clear(),contains(Object obj),toArray()</p><p>iterator();isEmpty()</p></blockquote><p>实现类的方法:</p><blockquote><p>1.ArrayList:方法基本和List中定义的一模一样</p><p>2.LinkedList:除了和List接口中一样的方法之外</p><p>LinkedList提供了大量首位操作的方法</p><blockquote><p>第一组:</p><p>void addFirst(E e);</p><p>void addLast(E e);</p><p>第二组:</p><p>E removeFirst();//删除首个元素,返回被删除的元素</p><p>E removeLast();//删除尾部元素,返回被删除的元素</p><p>第三组:</p><p>E getFirst();</p><p>E getLast();</p><p>第四组:</p><p>E pop();//弹出,删除集合中的某一个元素,和 removeFirst功能是一样的</p><p>void push(E e);//推入,把一个元素添加到集合中, 和addFist功能是一样的</p></blockquote></blockquote><h5 id="set接口"><a href="#set接口" class="headerlink" title="set接口"></a>set接口</h5><p>Set接口的特点:</p><blockquote><p>a.无下标</p><p>b.无序的(无序指的是存和取的顺序不一定一致,LinkedHashSet和TreeSet除外)</p><p>c.不可重复</p></blockquote><p>实现类:HashSet,LinkedHashSet,TreeSet</p><blockquote><p>HashSet:底层采用哈希表结构,查询快,增删快,无序的</p><p>LinkedHashSet:底层采用 链表+哈希表,查询快,增删快,有序的</p></blockquote><p>Set接口中的特有方法: 没有,和父接口Collection基本一模一样</p><p>实现类:HashSet和LinkedHashSet中的方法基本和Set接口一模一样</p><p><strong>对象的哈希值:</strong></p><blockquote><p>任何对象,都有一个哈希值,哈希值是对象的一个数字表示</p><p>对象的字符串表示,toString方法,默认表示格式:包名.类名@地址值</p><p>如果获取对象的哈希值?</p><p>每一个对象都有一个方法,hashCode方法,这方法定义在了Object类中,所以每个对象都具有</p><p>我们以前说的地址值,实际上根本不是地址值,而是哈希值的16进制</p><p>在java中怎么看真正地址值? 看不了</p><p>哈希值的由来</p><blockquote><p>是由真正的地址值计算的,通过一种散列算法(哈希算法)</p><p>所以 一般来说 地址值 不一样, 哈希值也是不一样的</p><p>不可逆算法(MD5,WPA2)</p><p>碰撞算法(一个一个试)</p><p>暴力破解&amp;字典破解(破解wifi教程)</p></blockquote><p>字符串的哈希值:</p><blockquote><p>由于String类重写了HashCode  那么哈希值不在通过地址值计算</p><p>我们观察源码,发现通过字符串的内容计算,所以只要字符串内容相同,哈希值必定相同</p><p>思考:</p><p>只要字符串内容一样,哈希值 必定一样</p><p>两个字符串的内容不一样,哈希值可能一样</p><p>比如: abc 和 acD</p></blockquote></blockquote><p><strong>哈希表结构:</strong></p><blockquote><blockquote><p>数组结构+链表结构的组合,查询快,增删快</p><p>HashSet:采用了哈希表结构</p><p>LinkedHashSet:采用了链表+哈希表结构</p></blockquote><p>哈希表结构,判断元素是否重复的原理:</p><blockquote><p>1.先判断 新元素的哈希值 和 所有旧元素的哈希值是否相同</p><p>如果都不相同,直接判断不重复,添加</p><p>2.再调用  新元素 和  哈希值相同的旧元素的equals方法</p><p>如果返回是true 判定重复元素 ,不添加</p><p>如果返回是false 判定不重复,添加</p></blockquote><p>总结:</p><blockquote><p>只有哈希值相同,并且equals返回true,才判定重复</p></blockquote></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase20.JPG" alt></p><blockquote><p>判断元素重复不重复的原理:</p><blockquote><p>1 比较哈希值</p><p>2 调用equals方法</p><p>只有 哈希值相同,并且equals方法true,才是重复元素,才不存储</p></blockquote><blockquote><p>contains方法,判断是否包含某一个元素</p><blockquote><p>ArrayList的contains方法:</p><p>names.contains(“abc”);//判断 names集合中是否包含 “abc”</p><p>只比较 equals的返回值,如果某一个元素和要判断的元素equals方法true,那么就是包含该元素</p></blockquote><p>HashSet的contains方法:</p><blockquote><p>set.contains(“abc”);//</p><p>先判断哈希值</p><p>再使用equals方法</p><p>只有旧元素和判断的元素 的哈希值相同 并且 euqals方法true 才判定包含</p></blockquote></blockquote></blockquote><p><strong>使用HashSet存储自定义元素(Dog对象)</strong></p><blockquote><p>结论:</p><p>如果我们<strong>自定义了类</strong> 要使用HashSet存储</p><p>如何保证元素的唯一性:</p><p>必须重写自定义类的两个方法,hashCode和equals</p><p>定义一个标准的类:</p><blockquote><p>1.封装(private+get/set)</p><p>2.构造(无参+全参)</p><p>3.toString(快速打印对象信息)</p><p>4.hashCode和equals(保证元素使用哈希表结构存储时的唯一性)</p></blockquote></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><h5 id="Map集合的特点"><a href="#Map集合的特点" class="headerlink" title="Map集合的特点:"></a>Map集合的特点:</h5><blockquote><p>1.Map集合 和 Collection集合 没有继承关系,所以不能直接用迭代器</p><p>2.Collection集合 每一个元素都是单独存在</p><p>Map集合的每一个元素都是成对存在的</p><p>3.Collection<e>一个泛型</e></p><p>Map&lt;K,V&gt;两个泛型, K代表键的类型,V代表值的类型</p><p>K,V可以相同  也可以不同,必须都是引用类型</p><p>4.在Map集合的元素中,<strong>键是唯一的,</strong>值是可以重复的</p><p>5.常用的实现类:</p><p>HashMap:无序</p><p>底层哈希表结构,保证键的唯一性<strong>,需要重写键对应类的hashCode和equals方法</strong></p><p>LinkedHashMap:有序</p><p>底层哈希表结构+链表,哈希表保证键的唯一,链表保证元素的有序</p><p>需要重写键对应类的hashCode和equals方法</p></blockquote><h5 id="Map-lt-K-V-gt-集合常用的方法"><a href="#Map-lt-K-V-gt-集合常用的方法" class="headerlink" title="Map&lt;K,V&gt;集合常用的方法:"></a>Map&lt;K,V&gt;集合常用的方法:</h5><blockquote><p>增: V put(K key,V value);//向集合中添加键值对</p><p>//如果集合中已存在该键,覆盖整个键值对,并返回被覆盖的键值对的值        </p><p>删: V remove(OBject key);//根据键 从map集合中删除 键值对,返回值表示被删除的键值对的值</p><p>改: 隐藏到了put方法</p><p>查: V get(K key);//根据键 从map集合中找到唯一对应的值</p></blockquote><h5 id="Map集合第一种遍历方法-以键找值"><a href="#Map集合第一种遍历方法-以键找值" class="headerlink" title="Map集合第一种遍历方法:以键找值"></a>Map集合第一种遍历方法:以键找值</h5><blockquote><p>1.先获取map集合的键的集合,这个集合是一个Set集合</p><p>Set<k> keys = map集合.keySet();</k></p><p>2.遍历keys集合    </p><p>a.foreach b.迭代器</p><p>3.在遍历的过程中,从map集合获取键对应的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取map的键的集合</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"><span class="comment">//4.遍历keys这个集合,获取到每一个键</span></span><br><span class="line"><span class="comment">//4.1迭代器遍历</span></span><br><span class="line">Iterator&lt;String&gt; it = keys.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"> String key = it.next();</span><br><span class="line"> <span class="comment">//根据key 从map集合中查找 对应值</span></span><br><span class="line"> String value = map.get(key);</span><br><span class="line"> <span class="comment">//打印</span></span><br><span class="line"> System.out.println(key+<span class="string">":"</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase21.JPG" alt></p><h5 id="map集合第二种遍历-：键值对遍历"><a href="#map集合第二种遍历-：键值对遍历" class="headerlink" title="map集合第二种遍历 ：键值对遍历"></a>map集合第二种遍历 ：键值对遍历</h5><blockquote><p>1.获取map集合中所有 结婚证对象</p><p>Set&lt;Map.Entry&lt;K,V&gt;&gt; set = map集合.entrySet();</p><p>2.遍历这个set集合,获取每一个Map.Entry类型的对象</p><p>a.迭代器 b.foreach</p><p>3.获取到 Map.Entry类型的对象之后</p><p>K key = entry.getKey();</p><p>V value = entry.getValue();</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取所有键值对关系对象的集合</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="comment">//4.遍历 这个entry集合, 拿出每一个结婚证对象</span></span><br><span class="line"><span class="comment">//使用迭代器遍历</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = entrySet.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line"><span class="comment">//获取这个entry中的 键和值</span></span><br><span class="line">String key = entry.getKey();</span><br><span class="line">String value = entry.getValue();</span><br><span class="line">System.out.println(key+<span class="string">"="</span>+value);</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase22.JPG" alt></p><p><strong>回顾：内部类和内部接口</strong></p><blockquote><p>内部类:</p><p>一个类A,定义在另外一个类B 的内部,这个类A 这个类被称为内部类</p><p>OuterClass.InnerClass ic = new OuterClass().new InnerClass();</p><p>内部接口:</p><p>一个接口A,定义在另外一个接口B的内部,这个接口A, 这个接口A被称为内部接口</p><p>class Class2 implements OuterInter.InnerInter    只重写内部类中的方法即可</p></blockquote><h5 id="使用map存储自定义类型"><a href="#使用map存储自定义类型" class="headerlink" title="使用map存储自定义类型"></a>使用map存储自定义类型</h5><p>使用map存储:键为学号,值为一个学生的对象, 学生对象有属性（姓名，年龄）</p><p>使用map存储:键为学生（姓名，年龄）值为学生自己的家庭住址。</p><p>结论:</p><p>如果Map中的键是自定义类型,那么要保证键的唯一性,必须重写键对应类的hashCode和equals方法</p><h4 id="Properties属性集"><a href="#Properties属性集" class="headerlink" title="Properties属性集"></a>Properties属性集</h4><p>在开发中Map集合可能用到,但是Properties属性集,1000%会用到</p><h5 id="Properties类到底是什么"><a href="#Properties类到底是什么" class="headerlink" title="Properties类到底是什么?"></a>Properties类到底是什么?</h5><p>属性集,</p><p>class Propeties extends HashTable implements Map</p><p>所以:Properties本质上 就是一个Map集合</p><p>Properties是一个持久的属性集</p><p>所谓持久 就是 它具有自己写数据到文件的方法</p><p>Properties是没有泛型,泛型是固定,String 和 String</p><h5 id="Properties类-具有Map接口的一切方法"><a href="#Properties类-具有Map接口的一切方法" class="headerlink" title="Properties类,具有Map接口的一切方法"></a>Properties类,具有Map接口的一切方法</h5><blockquote><p>还有具有一些自己特有的方法:</p><blockquote><p>public String getProperty(String key)用指定的键在此属性列表中搜索属性的值,功能和Map中的get是一样</p><p>public Object setProperty(String key, String value);添加键值对,功能和Map的put方法是一样</p><p>public Set<string> stringPropertyNames()://和Map中的keySet方法是一样</string></p></blockquote><p>Properties具有持久化到文件的功能</p><blockquote><p>store();//保存数据到文件,实际上不是保存到文件 而是写入到流中,由流写到文件</p><p>load();//从文件中加载数据,实际上不是直接加载文件,而是加载流中的数据,而流的数据是从该文件中读取的</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//和Properties持久化有关的方法</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//从文件中读取数据</span></span><br><span class="line">ps.load(<span class="keyword">new</span> FileReader(<span class="string">"phones.properties"</span>));</span><br><span class="line">System.out.println(ps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Properties持久化数据到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writePs</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//1.定义Properties</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">ps.setProperty(<span class="string">"iphoneX"</span>, <span class="string">"8888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"xiaomiMix"</span>, <span class="string">"3888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"huaweiMate11"</span>, <span class="string">"6888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"vivoX20"</span>, <span class="string">"1888"</span>);</span><br><span class="line"><span class="comment">//2.把ps的数据持久化到文件中</span></span><br><span class="line">ps.store(<span class="keyword">new</span> FileWriter(<span class="string">"phones.properties"</span>), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建一个Properties对象</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//2.添加数据</span></span><br><span class="line">ps.setProperty(<span class="string">"张三"</span>, <span class="string">"18"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"李四"</span>, <span class="string">"28"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"王五"</span>, <span class="string">"38"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"前妻"</span>, <span class="string">"48"</span>);</span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//1.stringPropertyNames 就是keySet</span></span><br><span class="line">Set&lt;String&gt; propertyNames = ps.stringPropertyNames();</span><br><span class="line"><span class="comment">//4.遍历</span></span><br><span class="line"><span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line"><span class="comment">//根据属性名 propertyName获取属性值</span></span><br><span class="line">String propertyValue = ps.getProperty(propertyName);</span><br><span class="line">System.out.println(propertyName+<span class="string">"="</span>+propertyValue); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h4><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>说的不是参数类型可变,而是<strong>参数的个数</strong>可以变化</p><p>语法: JDK1.5 出现新特性</p><p>public 返回值类型 方法名(数据类型… 参数名){}</p><p>注意:</p><blockquote><p>1.可变参数只是参数的个数是任意个,参数的类型不能改变    </p><p>2.一个方法中 只能有一个可变参数</p><p>3.当一个方法中有多个参数,并且有一个是可变参数的时候,要求这个可变参数必须在最后</p></blockquote><p>可变参数的<strong>本质</strong>: 就是一个数组</p><h5 id="Collections中的静态方法"><a href="#Collections中的静态方法" class="headerlink" title="Collections中的静态方法:"></a>Collections中的静态方法:</h5><blockquote><p>public static void shuffle(List list);//打乱顺序</p><p>public static void sort(List list);//把集合元素按照自然顺序(123,abc)排序</p></blockquote><p>Arrays:数组工具类</p><blockquote><p>public static List asList(数组/可变参数);//把一个数组 转成List集合</p><p>public static void sort(数组);//排序数组</p><p>public static String toString(数组);//把数组转成字符串</p></blockquote><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><blockquote><p>递归:是一个通用技术,所有的编程语言,只要有方法概念的编程语言都具有递归</p><p>什么叫递归:在一个方法的内部,再调用方法本身</p><p>无限递归本身是错误的:因为方法运行需要进栈,而栈空间不是无限大的</p><p>使用递归的前提****:</p><p>1.必须有一个可以是递归结束的出口</p><p>2.递归的次数,不能太多(具体的次数不好确定,与内存,CPU…都有关)</p><p>我们建议在开发中 能不用递归 就是不要用</p><p>急剧消耗内存(最常见是杀毒软件 扫描硬盘)</p><p>递归的其他分类:</p><p>直接递归:</p><p>在A方法的内部 直接调用A方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//定义一个方法,求1-n的和先想一下基于n-1步如何解决</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt; <span class="comment">//1+2+3...n = (1+2+3..n-1)+n</span></span><br><span class="line">&gt; <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> getSum(n-<span class="number">1</span>)+n;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//求1-n的和常用</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt; <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">&gt; sum+=i;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> sum;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">&gt;          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;      <span class="keyword">return</span> getSum2(n - <span class="number">2</span>) + n;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>间接递归:</p><p>在A方法的内部调用B方法,在B方法的内部调用C方法,在C方法的内部调用A方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">package</span> com.guardwarm.递归;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//定义方法  求 n个式子的和</span></span><br><span class="line">&gt; <span class="comment">//n=5</span></span><br><span class="line">&gt; <span class="comment">//1+(1+2)+(1+2+3)+(1+2+3+4)+(1+2+3+4+5)</span></span><br><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">undirectDiGui</span> </span>&#123;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;         System.out.println(<span class="string">"please enter a num"</span>);</span><br><span class="line">&gt;         Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">&gt;         <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">&gt;         <span class="keyword">int</span> sum = getsum(n);</span><br><span class="line">&gt;         System.out.println(sum);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;         <span class="keyword">return</span> getsum(n-<span class="number">1</span>)+zigetsum(n);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zigetsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;         <span class="keyword">return</span> zigetsum(n-<span class="number">1</span>)+n;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase23.bmp" alt></p><h4 id="斗地主案例"><a href="#斗地主案例" class="headerlink" title="斗地主案例"></a>斗地主案例</h4><h5 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase17.JPG" alt></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.斗地主;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 斗地主步骤:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.创建编号和牌对应的map集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.准备一副牌(54个数字1-54)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.洗牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.发牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5.排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 6.从map集合查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 7.看牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">doudizhuMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一副牌</span></span><br><span class="line">        Map&lt;Integer,String&gt; allcard = <span class="keyword">new</span> LinkedHashMap&lt;Integer, String&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; cards = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; dp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String num : nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String color : colors)&#123;</span><br><span class="line">                String card = num+ color;</span><br><span class="line">                allcard.put(id,card);</span><br><span class="line">                cards.add(id);</span><br><span class="line">                id++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        allcard.put(id,<span class="string">"大S"</span>);</span><br><span class="line">        cards.add(id);</span><br><span class="line">        id++;</span><br><span class="line">        allcard.put(id,<span class="string">"小S"</span>);</span><br><span class="line">        cards.add(id);</span><br><span class="line">        id++;</span><br><span class="line">        Collections.shuffle(cards);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line"><span class="comment">//        System.out.println(cards);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cards.size(); ++i) &#123;</span><br><span class="line">            Integer cd = cards.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">51</span>) &#123;</span><br><span class="line">                dp.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                p1.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                p2.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                p3.add(cd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(p1);</span><br><span class="line">        Collections.sort(p2);</span><br><span class="line">        Collections.sort(p3);</span><br><span class="line">        Collections.sort(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*        System.out.println(p1);</span></span><br><span class="line"><span class="comment">        System.out.println(p2);</span></span><br><span class="line"><span class="comment">        System.out.println(p3);</span></span><br><span class="line"><span class="comment">        System.out.println(dp);*/</span></span><br><span class="line">        outputcard(p1,allcard);</span><br><span class="line">        outputcard(p2,allcard);</span><br><span class="line">        outputcard(p3,allcard);</span><br><span class="line">        outputcard(dp,allcard);</span><br><span class="line">       <span class="comment">/* Collections.sort(cards);</span></span><br><span class="line"><span class="comment">        System.out.println(cards);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputcard</span><span class="params">(ArrayList&lt;Integer&gt; ls,Map&lt;Integer,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Integer cardid:ls)&#123;</span><br><span class="line">            String card = map.get(cardid);</span><br><span class="line">            System.out.print(card+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IO流-读写文件"><a href="#IO流-读写文件" class="headerlink" title="IO流_读写文件"></a>IO流_读写文件</h4><p>（输入输出是相对程序而言的）</p><p>输出流：数据从java程序到文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileWriter:文件的字符输出流，写数据(一个字符，一个字符串，一个字符数组)</span></span><br><span class="line">write(<span class="keyword">int</span> ch);<span class="comment">//可以写ascll码值</span></span><br><span class="line">write(<span class="keyword">char</span>[] ch);</span><br><span class="line">write(<span class="keyword">char</span>[] ch,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len);</span><br><span class="line">write(String s);</span><br><span class="line">write(String s,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len);</span><br></pre></td></tr></table></figure><p>输入流：数据从文件到java程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileWriter:文件的字符输出流，写数据(一个字符，一个字符串，一个字符数组)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;<span class="comment">//读取一个字符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>;<span class="comment">//读取一个字符数组，返回值表示读取到的字符个数</span></span><br></pre></td></tr></table></figure><h4 id="File类"><a href="#File类" class="headerlink" title="File类:"></a>File类:</h4><p><strong>描述:文件和 目录路径名的抽象表示</strong></p><blockquote><p>文件:可以直接保存数据</p><p>目录路径名:文件夹,分类管理文件</p><p>结论:File类可以表示文件 也可以表示文件夹</p></blockquote><p><strong>构造:</strong></p><p>public File(String filepath);</p><p>绝对路径:以盘符开头的路径</p><p>相对路径:相对当前项目的根目录</p><p><strong>File对象的获取方法:</strong></p><blockquote><p>1.public String getAbsolutePath();//获取绝对路径</p><p>2.public String getName()//获取当前File对象的名字</p><p>3.public String getPath();//获取创建File对象时 传递的路径</p><p>4.public long length();//获取表示文件的File对象的占用的字节数,如果是文件夹的File对象,返回值不确定</p></blockquote><p><strong>File对象的删除和创建方法:</strong></p><p>1.创建方法:</p><blockquote><p>创建文件:</p><p>public boolean createNewFile();//创建一个新的文件(只能是文件,不能是文件夹),返回是否创建成功</p><p>创建文件夹</p><p>public boolean mkdir();//创建一个新的文件夹,返回是否创建成功</p><p>public boolean mkdirs();//可以一次性创建多层文件夹</p></blockquote><p>2.判断方法:</p><blockquote><p>判断是否是文件</p><p>public boolean isFile();//返回是否是文件</p><p>判断是否是文件夹</p><p>public boolean isDirectory();//返回是否是文件夹</p><p>判断文件或者文件夹是否存在,是前面两个前提</p><p>public boolean exists();//返回该File 对象是否存在</p></blockquote><p>3.删除方法:</p><blockquote><p>public boolean delete();//删除文件或者文件夹</p><p>可以删除的是单个文件,或者空文件夹</p></blockquote><p>File类的list和listFiles方法</p><blockquote><p>1.public String[] list();</p><p>2.public File[] listFiles();</p><p>注意:</p><p>只能列出当前文件夹下的一级子文件或者子文件夹，那个对象必须存在且是文件夹才可以调用</p></blockquote><p><strong>案例：使用递归遍历使用文件夹</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用递归遍历 一个文件夹aaa下的所有文件(包括一级的也包括n级文件)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.定义方法,遍历一个文件夹下的所有文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.在方法中判断 某一个File对象 ,如果是文件 直接打印</span></span><br><span class="line"><span class="comment"> * 如果不是文件,递归调用第1步定义的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiguiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.创建aaa文件夹的File 对象</span></span><br><span class="line">File aaa = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\yingpeng\\Desktop\\aaa"</span>);</span><br><span class="line"><span class="comment">//2.调用方法 列出 aaa下的所有文件</span></span><br><span class="line">printFiles(aaa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个方法:列出一个文件夹下的文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFiles</span><span class="params">(File objFileDir)</span></span>&#123;</span><br><span class="line"><span class="comment">//2.列出aaa文件夹下的所有File 对象</span></span><br><span class="line">File[] files = objFileDir.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line"><span class="comment">//判断是否是文件 或者 文件夹</span></span><br><span class="line"><span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//是文件夹.列出该文件夹下的所有东西</span></span><br><span class="line">printFiles(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文件过滤器:FileFilter</strong></p><p>在list和listFiles方法中使用，用来过滤文件，有多少个文件就会执行多少次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFileFilter</span> <span class="keyword">implements</span> <span class="title">FileFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">".."</span>);<span class="comment">//用来看这个方法执行了多少次</span></span><br><span class="line"><span class="keyword">if</span>(pathname.getName().endsWith(<span class="string">".PNG"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：map集合嵌套遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:</span></span><br><span class="line"><span class="comment"> * 需要定义一个Map集合,保存学生的学号和他对应的名字</span></span><br><span class="line"><span class="comment"> * Map&lt;String,String&gt;</span></span><br><span class="line"><span class="comment"> * JavaEE:</span></span><br><span class="line"><span class="comment"> * heima001  张三</span></span><br><span class="line"><span class="comment"> * heima003 李四</span></span><br><span class="line"><span class="comment"> * heima005 王五</span></span><br><span class="line"><span class="comment"> * UI:</span></span><br><span class="line"><span class="comment"> * heima001 小丽</span></span><br><span class="line"><span class="comment"> * heima004 小红</span></span><br><span class="line"><span class="comment"> * heima005 小美</span></span><br><span class="line"><span class="comment"> * PHP:</span></span><br><span class="line"><span class="comment"> * heima002 小黑</span></span><br><span class="line"><span class="comment"> * heima003 小白</span></span><br><span class="line"><span class="comment"> * heima006 小猪</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapQianTao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义所需map</span></span><br><span class="line">        Map&lt;String,String&gt; eeMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,String&gt; uiMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,String&gt; phpMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,Map&lt;String,String&gt;&gt; outMap = <span class="keyword">new</span> HashMap&lt;String, Map&lt;String, String&gt;&gt;();</span><br><span class="line">        eeMap.put(<span class="string">"heima001"</span>,<span class="string">"张三"</span>);</span><br><span class="line">        eeMap.put(<span class="string">"heima003"</span>,<span class="string">"李四"</span>);</span><br><span class="line">        eeMap.put(<span class="string">"heima005"</span>,<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">        uiMap.put(<span class="string">"heima001"</span>,<span class="string">"小丽"</span>);</span><br><span class="line">        uiMap.put(<span class="string">"heima004"</span>,<span class="string">"小红"</span>);</span><br><span class="line">        uiMap.put(<span class="string">"heima005"</span>,<span class="string">"小美"</span>);</span><br><span class="line"></span><br><span class="line">        phpMap.put(<span class="string">"heima002"</span>,<span class="string">"小黑"</span>);</span><br><span class="line">        phpMap.put(<span class="string">"heima004"</span>,<span class="string">"小白"</span>);</span><br><span class="line">        phpMap.put(<span class="string">"heima005"</span>,<span class="string">"小猪"</span>);</span><br><span class="line"></span><br><span class="line">        outMap.put(<span class="string">"javaee"</span>,eeMap);</span><br><span class="line">        outMap.put(<span class="string">"ui"</span>,uiMap);</span><br><span class="line">        outMap.put(<span class="string">"php"</span>,phpMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先通过entrySet获取Set，然后再用set获取迭代器开始遍历</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Map&lt;String,String&gt;&gt;&gt; outSet = outMap.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Map&lt;String,String&gt;&gt;&gt; outit = outSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (outit.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Map&lt;String,String&gt;&gt; outEntry = outit.next();</span><br><span class="line">            String outKey = outEntry.getKey();</span><br><span class="line">            <span class="comment">//由于值是map，所以内部还得再遍历</span></span><br><span class="line">            Map&lt;String,String&gt; outvalue = outEntry.getValue();</span><br><span class="line">            System.out.println(outKey);</span><br><span class="line">            Set&lt;String&gt; mapKeys = outvalue.keySet();</span><br><span class="line">            <span class="keyword">for</span>(String key:mapKeys)&#123;</span><br><span class="line">                String mapValue = outvalue.get(key);</span><br><span class="line">                System.out.println(mapValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><p>根据流的流向分类:</p><blockquote><p>Input:输入流</p><p>Output:输出流</p></blockquote><p>根据流操作的数据来分类</p><blockquote><p>字符流: 操作字符    只能操作普通文本文件,</p><p>​        最常见的文本文件:.txt,.java,.c,.cpp等其他语言的源代码</p><p>​        只要用文本工具(记事本,notepad++,editplus) 可以打开的 ,而且打开后我们人类能看懂的 都是文本文件</p><p>​        注意:我们用的.doc,excel,ppt这些不是文本文件</p><p>字节流: 操作字节</p><p>​        能操作一切文件(文本文件,.mp3,视频.avi,.rmvb,mp4,doc,excel,ppt)</p></blockquote><p>java中的四大流:</p><blockquote><p>字符输入流:共同父类 Reader   比如:FileReader,BufferedReader</p><p>功能:读取一个字符,读取一个字符数组</p><p>字符输出流:共同的父类 Writer    比如:FileWriter BufferedWriter</p><p>功能:写一个字符,写一个字符数组(一部分),写一个字符串</p><p>字节输入流:共同父类 InputStream  比如:FileInputStream,BufferedInputStream</p><p>功能:读取一个字节,读取一个字节数组</p><p>字节输出流:共同父类 OutputStream 比如:FileOutputStream,BufferedOutputStream</p><p>功能:写一个字节,写一个字节数组(一部分)</p></blockquote><p>只要是输入流   此流的方法名 一定叫做 read</p><p>只要是输出流  此流的方法名 一定叫做 write</p><p>java中流的命名是十分规范的:    <strong>功能+父类的名字（4种）</strong></p><h5 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream:"></a>OutputStream:</h5><p>字节输出流的根类,这是一个抽象类</p><blockquote><p>public void close();//关闭流</p><p>public void flush();//刷新流</p></blockquote><p>和写数据有关系的方法;</p><blockquote><p>public void write(int b);//写一个字节 </p><p>public void write(byte[] bs);//写一个字节数组</p><p>public void write(byte[] bs,int startIndex,int lenght);//写一个字节数组的一部分</p></blockquote><p><strong>FileOutputStream</strong></p><p>OutputStream具体子类</p><p>追加:</p><blockquote><p>以前用的构造:</p><p>​    public FileOutputStream(String filename);//默认就是覆盖</p><p>​    public FileOutputStream(File file);//给定一个File对象,这个File对象代表我们要写入的文件</p><p>请用这个构造,实现追加:</p><p>​    public FileOutputStream(String filename,boolean flag)</p><p>​    public FileOutputStream(File file,boolean flag)</p></blockquote><p>换行（不同操作系统用不同换行）:</p><blockquote><p>windows:\r\n</p><p>Linux:\n</p><p>Mac:\r</p></blockquote><h5 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream:"></a>InputStream:</h5><p>字节输入流的根类,这是一个抽象类</p><p>public int read();//读取一个字节,返回的是码值</p><p>public int read(byte[] bs);//读取一个字节数组,返回值表示实际读取到的字节数</p><p>我们用InputStream具体子类:<strong>FileInputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.文件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 复制文件练习:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.源文件: 是读取用的, new FileInputStream("源文件")</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.目标文件: 是写入用的, new OutputStream("目标文件")</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 一边读取 源文件  一边写出到目标文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.关闭流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"F:\\书\\史铁生.docx"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"F:\\书\\copy.docx"</span>);</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((b=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*        //一次读取一个字节数组</span></span><br><span class="line"><span class="comment">        byte[] bs = new byte[1024];//用来保存读取到的字节数据</span></span><br><span class="line"><span class="comment">        int len = 0;//保存实际读取到的字节个数</span></span><br><span class="line"><span class="comment">        while((len=fis.read(bs))!=-1)&#123;</span></span><br><span class="line"><span class="comment">            fos.write(bs, 0, len);//写入bs中的从0下标开始len个字节 到文件中</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = e-s;</span><br><span class="line">        System.out.println(time);</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="缓冲流-相比较没有缓冲区的流-效率更高"><a href="#缓冲流-相比较没有缓冲区的流-效率更高" class="headerlink" title="缓冲流: 相比较没有缓冲区的流,效率更高"></a>缓冲流: 相比较没有缓冲区的流,效率更高</h5><p>BufferedOutputStream 缓冲输出流</p><p>构造方法</p><blockquote><p>public BufferedOutputStream(OutputStream out)  </p></blockquote><p>BufferedInputStream  缓冲输入流</p><p>构造方法</p><blockquote><p>public BufferedInputStream(InputStream in) </p></blockquote><h5 id="小案例：复制单级文件夹"><a href="#小案例：复制单级文件夹" class="headerlink" title="小案例：复制单级文件夹"></a>小案例：复制单级文件夹</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.文件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopySingleDirectory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        File srcfl = <span class="keyword">new</span> File(<span class="string">"F:\\demo1"</span>);</span><br><span class="line">        File dstfl = <span class="keyword">new</span> File(<span class="string">"F:\\demo2"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!dstfl.exists())&#123;</span><br><span class="line">            <span class="keyword">boolean</span> b = dstfl.mkdirs();</span><br><span class="line">            <span class="keyword">if</span> (b)&#123;</span><br><span class="line">                System.out.println(<span class="string">"文件夹不存在，成功创建"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"目标文件夹已存在，直接复制即可"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历文件  注意创建目标文件</span></span><br><span class="line">        File[] srcfiles = srcfl.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File src : srcfiles)&#123;</span><br><span class="line">            File dst = <span class="keyword">new</span> File(dstfl,src.getName());</span><br><span class="line">            copyfile(src,dst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyfile</span><span class="params">(File srcfl,File dstfl)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcfl));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(dstfl));</span><br><span class="line">        <span class="comment">//固定格式</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bs))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        System.out.println(<span class="string">"复制文件"</span>+srcfl.getName()+<span class="string">"成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小知识点-1"><a href="#小知识点-1" class="headerlink" title="小知识点"></a>小知识点</h5><p><strong>使用字节流读取中文的乱码问题:</strong></p><blockquote><p>如果是一个一个字节读取, 100%会出现乱码</p><p>如果是一个一个字节数组读取,可能也会出现乱码</p></blockquote><p>解决方法</p><blockquote><p>字符流</p><p>转换流</p></blockquote><h5 id="字符编码集"><a href="#字符编码集" class="headerlink" title="字符编码集"></a>字符编码集</h5><ul><li>ASCII码表    美国    每个字符对应一个字节    保存了字母，数字，以及一些常用符号    a-97 A-65 0-48</li><li>GB2313    保存常用汉字，一个中文占两字节，这两个字节全是负数</li><li>GBK    保存了基本所有汉字，统统占两个字节第一个字节为负，第二个字节随意</li><li>Unicode    统一码表（万国码表）所有文字统统两字符，向下兼容ASCII</li><li>UTF-8  在Unicode的基础上做了一些优化，能用一个字节的不用两个字节，且在每一个字节头加入了编码信息，一个中文占三个字节</li><li>Latin-1（ISO-8859-1）  拉丁码表，Tomact会用到</li></ul><p>编码 – &gt;文字到对应码值</p><p>解码 – &gt;码值到对应文字</p><h5 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h5><p>字符流的子类</p><p><strong>OutputStreamWriter</strong></p><p>查码表，是字符流通向字节流的桥梁，write方法与其他流一致</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase23.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeCN</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建可以把字符转成字节的转换流对象，并指定编码两种构造，指定编码也可不写，默认GBK</span></span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"c:\\cn8.txt"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//调用转换流，把文字写出去，其实是写到转换流的高效区中</span></span><br><span class="line">osw.write(<span class="string">"你好"</span>);<span class="comment">//写入高效区。</span></span><br><span class="line">osw.close();</span><br></pre></td></tr></table></figure><p><strong>InputStreamReader</strong></p><p>注意选择正确的解码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//演示字节转字符流的转换流</span></span><br><span class="line">readCN();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readCN</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//创建读取文件的字节流对象</span></span><br><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\cn8.txt"</span>);</span><br><span class="line"><span class="comment">//创建转换流对象 </span></span><br><span class="line"><span class="comment">//InputStreamReader isr = new InputStreamReader(in);这样创建对象，会用本地默认码表读取，将会发生错误解码的错误</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in,<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//使用转换流去读字节流中的字节</span></span><br><span class="line"><span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((ch = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println((<span class="keyword">char</span>)ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">isr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换流和子类区别：转换流可以选择解码/编码方式</p><p>java.lang.Object<br>    java.io.Writer<br>        java.io.OutputStreamWriter<br>            java.io.FileWriter</p><p>​    FileWriter和FileReader：作为子类，仅作为操作字符文件的便捷类存在。当操作的字符文件，使用的是默认编    码表时可以不用父类，而直接用子类就完成操作了，简化了代码。</p><h5 id="序列化流和反序列化流"><a href="#序列化流和反序列化流" class="headerlink" title="序列化流和反序列化流"></a>序列化流和反序列化流</h5><p>用于从流中读取对象的操作流 ObjectInputStream   称为 反序列化流</p><p>用于向流中写入对象的操作流 ObjectOutputStream   称为 序列化流</p><p>构造方法类似转换流，具体看API</p><p><strong>常见异常</strong></p><ul><li><p>当一个对象要能被序列化，这个对象所属的类必须实现Serializable接口。否则会发生异常NotSerializableException异常。</p></li><li><p>同时当反序列化对象时，如果对象所属的class文件在序列化之后进行的修改，那么进行反序列化也会发生异常InvalidClassException。发生这个异常的原因如下：</p><blockquote><p>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </p><p>该类包含未知数据类型 </p><p>该类没有可访问的无参数构造方法 </p><p>版本号默认有java管理，也可以生成版本号自己管理</p></blockquote></li></ul><p><strong>transient关键字</strong></p><p>不需要序列化的属性可以使用关键字transient修饰        同时static修饰的也不会序列化</p><h5 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h5><p>字节打印流  PrintStream</p><p>字符打印流  PrintWriter</p><p>两者基本一致，可以打印的目的地略有不同</p><blockquote><p>PrintStream    字符串的文件名，file对象，其他的tOutputStream，其他的Writer</p><p>PrintWriter    字符串的文件名，file对象，其他的tOutputStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWriterDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建流</span></span><br><span class="line"><span class="comment">//PrintWriter out = new PrintWriter(new FileWriter("printFile.txt"));</span></span><br><span class="line">PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="string">"printFile.txt"</span>);</span><br><span class="line"><span class="comment">//2，写数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">out.println(<span class="string">"helloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3,关闭流</span></span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三方小框架：commons-io"><a href="#第三方小框架：commons-io" class="headerlink" title="第三方小框架：commons-io"></a>第三方小框架：commons-io</h5><p>ps.第一方：官方，第二方：我们</p><p>jar包：java专用压缩包</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase24.JPG" alt></p><p>从上到下依次为：api文档，框架class文件，生成api文档的源文件，框架源文件，测试class文件，测试源文件，许可，注意事项</p><p><strong>添加jar包</strong></p><p>eclipse</p><blockquote><p>1.创建lib文件夹</p><p>2.将commons-io.jar拷贝到lib文件夹</p><p>3.右键点击，→</p></blockquote><p>IDEA</p><blockquote><p>file-&gt; project structure</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase25.JPG" alt></p><p>点最右侧那个+，然后OK就好</p></blockquote><p><strong>FileUtils</strong></p><blockquote><p>readFileToString(File file)：读取文件内容，并返回一个String；</p><p>writeStringToFile(File file，String content)：将内容content写入到file中；</p><p>copyFile(File srcFile, File destFile): 文件复制</p><p>copyDirectoryToDirectory(File srcDir,File destDir);文件夹复制</p></blockquote><p>多是一些静态方法，直接用类名就可调用</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p><strong>几个小概念</strong></p><blockquote><p>进程: 正在运行的程序 叫做进程</p><p>线程:    进程中的一个小任务</p><p>一个进程中通常是由多个线程在执行任务</p><p>main方法所在线程 我们称为主线程</p></blockquote><h5 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h5><p>Thread类:就是我们说的线程类</p><p>构造:</p><p>public Thread();//创建一个默认名字的线程对象</p><p>public Thread(String name);//创建一个指定名字的线程对象</p><p>创建新的线程的方法一:</p><blockquote><p>1.定义子类 继承 Thread</p><p>2.在子类中重写run方法(就是执行任务的方法,在run方法中写<strong>任务代码</strong>即可)</p><p>3.创建子类对象(就是创建一个线程对象)</p><p>4.开启这个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.创建子类线程对象</span></span><br><span class="line">MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="comment">//设置守护线程</span></span><br><span class="line">mt.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//4.开启线程,JVM自动会告诉CPU去执行线程任务代码</span></span><br><span class="line">mt.start();</span><br></pre></td></tr></table></figure><p>开启线程的第二种方式:</p><blockquote><p>1.定义实现类 实现Runnable接口</p><p>2.实现类要重写run方法(就是写任务代码的方法)</p><p>3.创建实现类对象</p><p>4.创建Thread对象,并把刚刚的实现类对象 作为参数传递</p><p>5.启动这个Thread对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"><span class="comment">//4.创建Thread对象,并把刚刚的实现类对象 作为参数传递</span></span><br><span class="line">Thread td = <span class="keyword">new</span> Thread(mr);</span><br><span class="line"><span class="comment">//5.开启线程</span></span><br><span class="line">td.start();</span><br></pre></td></tr></table></figure><p>内存图</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase26.bmp" alt></p><p>创建两个线程对象</p><blockquote><p>我们发现:</p><p>a.线程默认是有名字,名字Thread-n,n从0开始 依次递增的</p><p>b.我们可以修改线程的名字,但是一般不改</p><p>setName(String name);</p><p>c我们可以获取线程的名字,通过线程对象的getName方法获取</p><p>d.获取线程名字的最常用的方法</p><p>Thread.currentThread().getName();</p></blockquote><p>两种创建方式比较</p><p>从耦合性分析:</p><blockquote><p>第一种方式:线程和任务是紧紧联系在一起的,耦合性高</p><p>第二种方式:线程是线程,任务是任务,他们之间没有必然联系,给一个线程传递哪个任务那么该线程就执行哪个任务</p><p>所以说开发中,我们用第二种方式</p></blockquote><p>从代码的扩展性:</p><blockquote><p>第一种方式 由于是继承Thread,那么子线程类就不能继承别的类</p><p>第二种方式 由于是实现了接口,同时可以继承别的类</p><p>所以说开发中,我们用第二种方式</p></blockquote><h5 id="用匿名内部类创建对象"><a href="#用匿名内部类创建对象" class="headerlink" title="用匿名内部类创建对象"></a>用匿名内部类创建对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 匿名内部类:</span></span><br><span class="line"><span class="comment"> * 快速创建一个类的子类对象,或者一个接口的实现类对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 格式:</span></span><br><span class="line"><span class="comment"> * new 父类()&#123;</span></span><br><span class="line"><span class="comment"> * 重写方法();</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> * new 接口()&#123;</span></span><br><span class="line"><span class="comment"> * 实现方法()</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> * 使用匿名内部类 创建线程对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.第一种方式创建线程对象:继承方式</span></span><br><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"线程"</span>+getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"><span class="comment">//2.第二种方式创建线程对象:实现方式</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h5 id="案例：卖票"><a href="#案例：卖票" class="headerlink" title="案例：卖票"></a>案例：卖票</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:电影院卖票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 假设 上演"忍者神龟" 100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 有三个柜台在卖票,同时开卖,并且卖的都是这100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 三个柜台就是三个线程,他们同时执行同一个买票任务,同时操作一个共享数据100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicketsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建卖票任务对象</span></span><br><span class="line">TicketsRunnable tr = <span class="keyword">new</span> TicketsRunnable();</span><br><span class="line"><span class="comment">//2.创建 3个线程 去执行买票任务</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口3"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">120</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式一:</span></span><br><span class="line"><span class="comment"> *    给代码加上同步锁</span></span><br><span class="line"><span class="comment"> *    格式:</span></span><br><span class="line"><span class="comment"> *    synchronized(锁对象)&#123;</span></span><br><span class="line"><span class="comment"> *    代码</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> *    锁对象可以是任意对象</span></span><br><span class="line"><span class="comment"> *  先运行到那块的会拿到锁对象，然后执行几次后会将锁对象放回，让其他线程执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式二:</span></span><br><span class="line"><span class="comment"> *    同步方法</span></span><br><span class="line"><span class="comment"> *    格式:</span></span><br><span class="line"><span class="comment"> *    public synchronized void 方法名()&#123;</span></span><br><span class="line"><span class="comment"> *    需要运行的代码</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> *    注意:同步代码块和同步方法的原理是一样,都是具有锁对象,哪一个线程进来执行,那么该线程就持有这个锁对象</span></span><br><span class="line"><span class="comment"> *    这里同步方法使用的锁对象 叫做this对象</span></span><br><span class="line"><span class="comment"> *    如果同步方法是静态方法,那么他的锁对象是 当前类.class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">sale();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式三:</span></span><br><span class="line"><span class="comment"> * Lock接口方式</span></span><br><span class="line"><span class="comment"> * 我们实际用的是他的一个实现类:ReentrantLock</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在Lock接口中有两个方法:</span></span><br><span class="line"><span class="comment"> * lock();//获取锁</span></span><br><span class="line"><span class="comment"> * unlock();//释放锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">//创建一个Lock接口的实现类对象</span></span><br><span class="line">Lock l = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">l.lock();</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">l.unlock();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程状态图"><a href="#线程状态图" class="headerlink" title="线程状态图"></a>线程状态图</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase27.bmp" alt></p><h4 id="socket-网络编程"><a href="#socket-网络编程" class="headerlink" title="socket-网络编程"></a>socket-网络编程</h4><h5 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h5><p>网络通信协议:</p><blockquote><p>网络:由多台计算机,以及外部设备 连接起来一个系统 我们就称为网络</p><p>通信协议: 就像交通规则,规定网络上传输的数据的格式,大小,速度等等</p></blockquote><p>在我们现在的网络中都有哪些通信协议:</p><blockquote><p>TCP/IP协议</p><p>UDP协议</p><p>其他协议</p></blockquote><p>IP地址和端口号的介绍</p><blockquote><p>IP地址: 网络每一台计算的唯一标识</p><p>1Byte=8Bit</p><p>IP地址 每一个段 0-255 </p><p>端口号:</p><p>是每一个计算机中的”门”,一共有0-65535号门</p></blockquote><p>总结:我们向别的计算机发信息的时候</p><blockquote><p>确定 IP地址:为了找到那台计算机</p><p>确定 端口号: 为了确定发送到对方计算机中的哪个应用程序</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase28.bmp" alt></p><h5 id="InetAddress-代表IP地址类"><a href="#InetAddress-代表IP地址类" class="headerlink" title="InetAddress:代表IP地址类"></a>InetAddress:代表IP地址类</h5><blockquote><p>public static InetAddress getLocalHost();//获取你的计算机的IP地址对象</p><p>public String getHostName();//仅获取主机名</p><p>public String getHostAddress();//仅获取IP地址</p><p>public static InetAddress getByName(“其他主机的名字或者IP”);//远程主机的IP地址对象</p></blockquote><h5 id="UDP和TCP"><a href="#UDP和TCP" class="headerlink" title="UDP和TCP"></a>UDP和TCP</h5><p>UDP:用户数据报协议</p><blockquote><p>特点:面向无连接,数据是不安全,不完整    有无接收端均可</p><p>优点:效率高</p><p>比如:发短信,供屏软件,QQ视频</p></blockquote><p>TCP:传输控制协议</p><blockquote><p>特点:面向有连接,数据是安全,完整性    没有接收端会直接报错</p><p>比如:打电话,上网</p><p>TCP协议建立连接 有三个步骤 我们称为”三次握手”</p></blockquote><p><img src alt></p><h5 id="UDP使用"><a href="#UDP使用" class="headerlink" title="UDP使用"></a>UDP使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用UDP进行数据通信,需要用到两个类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 数据的发送接收器:DatagramSocket</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 数据包类:DatagramPacket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSender</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.创建DatagramPacket对象</span></span><br><span class="line"><span class="comment">//存储 发送的数据,对方的IP,端口号</span></span><br><span class="line">System.out.println(<span class="string">"请输入您要发送的数据:"</span>);</span><br><span class="line">String sendMsg = sc.nextLine();</span><br><span class="line"><span class="keyword">byte</span>[] bs = sendMsg.getBytes();</span><br><span class="line"><span class="comment">//IP地址:127.0.0.1  代表本机,本地回环地址</span></span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs,bs.length,InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">12345</span>);</span><br><span class="line"><span class="comment">//3.发送</span></span><br><span class="line">ds.send(dp);</span><br><span class="line">System.out.println(<span class="string">"发送数据成功!!!"</span>);<span class="comment">//192.168.146.72</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象,</span></span><br><span class="line"><span class="comment">//强调:接收端必须指定一个端口号</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.直接创建一个DatagramPacket对象</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs, bs.length);</span><br><span class="line"><span class="comment">//3.接收</span></span><br><span class="line">System.out.println(<span class="string">"等待发送端发送数据...."</span>);</span><br><span class="line">ds.receive(dp);<span class="comment">//这个方法具有等待功能,等待发送端发送过来的数据</span></span><br><span class="line">System.out.println(<span class="string">"接收数据成功!!"</span>);</span><br><span class="line"><span class="comment">//获取发送端的地址</span></span><br><span class="line">InetAddress sendAddress = dp.getAddress();</span><br><span class="line">System.out.println(<span class="string">"发送端是:"</span>+sendAddress.getHostAddress());</span><br><span class="line"><span class="comment">//获取真正的数据</span></span><br><span class="line"><span class="keyword">byte</span>[] data = dp.getData();</span><br><span class="line"><span class="comment">//获取发送端 发来了多少字节</span></span><br><span class="line"><span class="keyword">int</span> len = dp.getLength();</span><br><span class="line"><span class="comment">//打印数据</span></span><br><span class="line">String receiveMsg = <span class="keyword">new</span> String(data, <span class="number">0</span>, len);</span><br><span class="line">System.out.println(<span class="string">"发送端说:"</span>+receiveMsg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TCP使用"><a href="#TCP使用" class="headerlink" title="TCP使用"></a>TCP使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">进行简单数据交互</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP客户端:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.创建Socket对象,传入服务器的IP和端口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.通过Socket对象获取输出流,调用write方法写数据到服务器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.通过socket对象获取输入流,调用read方法读取服务器反馈的信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.关闭(Socket对象)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * TCP服务端:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.创建ServerSocket对象,传入一个端口,端口必须和客户端的一样</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.先获取哪一个客户端连接的服务器,通过accept()方法获取</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.通过Socket对象获取输入流,调用read方法读取客户端发来的数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.通过socket对象获取输出流,调用write方法向客户端反馈数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.关闭(ServerSocket,Socket)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yingpeng</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="comment">//2.获取到 哪一个 客户端连接的我</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line">Socket client = server.accept();<span class="comment">//此方法也具有等待功能,等待某一个客户端连接</span></span><br><span class="line"><span class="comment">//打印一些和客户端有关信息</span></span><br><span class="line">String ip = client.getInetAddress().getHostAddress();</span><br><span class="line">System.out.println(<span class="string">"小样,抓到你了:"</span>+ip);</span><br><span class="line"><span class="comment">//3.获取输入流,实际上是客户端写数据时的输出流</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">//4.读取数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(<span class="string">"客户端说:"</span>+<span class="keyword">new</span> String(bs,<span class="number">0</span>,len));</span><br><span class="line"><span class="comment">//5.要向客户端 回写数据,告诉客户端您的信息我已经收到了</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的消息已经收到..."</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给客户端反馈的信息发送成功!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">server.close();</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="comment">// 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这个构造方法干了很多事情:</span></span><br><span class="line"><span class="comment"> * a.自动去连接服务器</span></span><br><span class="line"><span class="comment"> * b.自动进行三次握手,建立连接</span></span><br><span class="line"><span class="comment"> * c.自动为连接中创建两个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 2.从客户端对象中获取 输出流:getOutputStream()</span></span><br><span class="line"><span class="comment">//OutputStream out = client.getOutputStream();</span></span><br><span class="line"> <span class="comment">// 3.调用输出流的Write方法写数据到服务器即可</span></span><br><span class="line"><span class="comment">//out.write("How are you".getBytes());</span></span><br><span class="line">client.getOutputStream().write(<span class="string">"How are you"</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给服务器发送数据成功!!"</span>);</span><br><span class="line"><span class="comment">//4.读取服务器 发送过来的反馈信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line">System.out.println(<span class="string">"服务器响应:"</span>+<span class="keyword">new</span> String(bs,<span class="number">0</span>,len));</span><br><span class="line"> <span class="comment">//  关闭资源</span></span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase29.bmp" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上传文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.创建Socket对象,连接服务器</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">System.out.println(<span class="string">"连接服务器成功.."</span>);</span><br><span class="line"><span class="comment">//2.获取输出流,把数据写向服务器</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line"><span class="comment">//3.创建文件的输入流,读取本地的文件数据</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\yingpeng\\Desktop\\pictures\\3.png"</span>);</span><br><span class="line"><span class="comment">//4.循环,读取本地文件,写到服务器</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fis.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭输出流</span></span><br><span class="line">client.shutdownOutput();</span><br><span class="line"><span class="comment">//5.获取服务器反馈的信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len1 = in.read(bs1);</span><br><span class="line">System.out.println(<span class="string">"服务器说:"</span>+<span class="keyword">new</span> String(bs1,<span class="number">0</span>,len1));</span><br><span class="line"><span class="comment">//6关闭</span></span><br><span class="line">client.close();</span><br><span class="line">out.close();</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器端服务器一直开启，通过多次执行客户端来多文件上传</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建ServerSocket对象,绑定一个端口</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.获取哪一个客户端连接的服务器</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line"><span class="keyword">final</span> Socket client = server.accept();</span><br><span class="line"><span class="comment">//开启一个线程,和clinet进行交互</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"小样:"</span>+client.getInetAddress().getHostAddress());</span><br><span class="line"><span class="comment">//3.获取输入流,读取客户端发来数据</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">//4.创建文件的输出流,把数据写到文件中</span></span><br><span class="line">String picName = <span class="string">"H:\\upload\\"</span>+System.currentTimeMillis()+<span class="string">".png"</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(picName);</span><br><span class="line"><span class="comment">//5.循环 从输入流读取客户端数据, 写入到文件中</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=in.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">fos.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;<span class="comment">//1小时</span></span><br><span class="line">System.out.println(<span class="string">"客户端的文件已经保存完毕,可以查看了"</span>+picName);</span><br><span class="line"><span class="comment">//6.告知客户端,文件真的真的真的上传成功</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的文件真的真的真的上传成功"</span>.getBytes());</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.关闭</span></span><br><span class="line"><span class="comment">//server.close();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个bug</strong></p><p>客户端传输完文件需主动调用client.shutdownoutputstream来关闭输出流，不然服务器会不知道是执行完了还是网络延迟</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase30.bmp" alt></p><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>一个应用程序已写好，后期出现的接口子类无法直接在该应用中new一个对象，该怎么办？</p><p>子类不确定，可以通过提供配置文件形式将不确定的信息存储在配置文件中即可。该程序只要之前写好读取配置文件的信息即可。</p><p>如果存储了指定的子类名，就根据具体名称找该类并进行加载和对象的创建，这些动作都是在定义软件时写好的</p><p>没有类之前就将创建对象的动作写好了，这就是动态的获取指定的类，并使用类中的功能——反射技术</p><h5 id="字节码文件对应的类"><a href="#字节码文件对应的类" class="headerlink" title="字节码文件对应的类"></a>字节码文件对应的类</h5><p>class Class    描述字节码文件的类</p><p>Field field    将字段封装成对象类型</p><p>Constructor cons    将构造函数封装成了对象类型</p><p>Method method    将类中的成员都封装成了对象</p><p>getField()</p><p>getMethod()</p><p>getConstrctor()</p><h5 id="获取字节码文件对象"><a href="#获取字节码文件对象" class="headerlink" title="获取字节码文件对象"></a>获取字节码文件对象</h5><p>要想获取字节码文件中的成员，首先要获取字节码文件对象</p><p><strong>法一</strong></p><p>通过object类中的getClass方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Class clszz1=p1.getClass();</span><br></pre></td></tr></table></figure><p>虽然通用，但必须有指定类，并对该类进行实例化才能调用getClass方法</p><p><strong>法二</strong></p><p>调用任意一个数据类型的一个静态成员class</p><p>不用实例化类，但还是需要指定的类</p><p><strong>法三</strong></p><p>使用class类中的forName方法，通过给定类名来获取相应的字节码文件对象</p><p>最常用，只需从配置文件中解析到类名即可</p><p>调用newInstanse()方法来实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String className = <span class="string">"cn.itcast.domain.Person"</span>;<span class="comment">//一般从配置文件解析获取</span></span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line">Object obj = clazz.newInstanse();</span><br><span class="line"><span class="comment">//1.通过给定类名称加载对应字节码文件，并封装成字节码文件对象</span></span><br><span class="line"><span class="comment">//2.通过new创建Person对象</span></span><br><span class="line"><span class="comment">//3.调用构造方法初始化</span></span><br><span class="line"><span class="comment">//通常被反射的类会提供无参构造，若没有会报instantiationException</span></span><br><span class="line"><span class="comment">//如果提供了，但是权限不够会报illegalAccessException</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//1.加载Person类，并将类封装成字节码对象</span></span><br><span class="line"><span class="comment">//2.通过new创建Person对象</span></span><br><span class="line"><span class="comment">//3.调用构造方法初始化</span></span><br><span class="line"></span><br><span class="line">String className = <span class="string">"cn.itcast.domain.Person"</span>;</span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line">Constructor cons = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//获取指定的构造器</span></span><br><span class="line">Object obj = cons.newInstance(<span class="string">"wangwu"</span>,<span class="number">23</span>);<span class="comment">//有了构造器对象后，通过其来初始化对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字段需要先获取到class对象</span></span><br><span class="line">Field field = clazz.getField(字段名);<span class="comment">//公共字段可以这样获取</span></span><br><span class="line">Field field = clazz.getDeclaredField(字段名);<span class="comment">//获取以声明字段多数方法都有对应的declare</span></span><br><span class="line">field.set(obj,<span class="number">30</span>)<span class="comment">//需要获取到字段和字节码对象，只可修改公共字段</span></span><br><span class="line">field.setAccessible();<span class="comment">//暴力访问，去除该字段访问权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取方法，需要先获取到class对象</span></span><br><span class="line">Method method = clazz.getMethod(方法名,<span class="keyword">null</span>);<span class="comment">//第二个表示无参</span></span><br><span class="line">method.invoke(<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//第一个为字节码对象，后面表示无参</span></span><br><span class="line"></span><br><span class="line">Method method = clazz.getMethod(方法名,String.class,<span class="keyword">int</span>.class);<span class="comment">//第二个表示无参</span></span><br><span class="line">method.invoke(obj,<span class="string">"wangwu"</span>,<span class="number">33</span>);</span><br></pre></td></tr></table></figure><h3 id="java设计思想"><a href="#java设计思想" class="headerlink" title="java设计思想"></a>java设计思想</h3><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>前人把解决问题的方案总结出一个套路</p><h5 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h5><p>静态代理设计模式</p><p>设计个接口，限制代理需要做哪些事，用接口来接收不同代理</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase11.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo10_代理设计模式;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 代理类:经销商</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPerson</span> <span class="keyword">implements</span> <span class="title">ComputerInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ComputerInterface lianxiang;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyCompany</span><span class="params">(ComputerInterface lianxiang)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lianxiang = lianxiang;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buyComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"鼠标,键盘,电脑包,u盘,操作系统,3000$ + "</span>+lianxiang.buyComputer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"需要运费1000块"</span>);</span><br><span class="line">lianxiang.repair();</span><br><span class="line">System.out.println(<span class="string">"再给500块保管费"</span>);</span><br><span class="line">System.out.println(<span class="string">"再给100块运费"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理设计模式</p><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>向上抽取原则</li></ul><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase2.JPG" alt></p><h2 id="Java数据结构和算法"><a href="#Java数据结构和算法" class="headerlink" title="Java数据结构和算法"></a>Java数据结构和算法</h2><p>先看几个经典算法面试题</p><ul><li>用最快速度判断str2是否为str1子串    暴力破解（逐字匹配）/kmp算法《部分匹配表》</li><li>汉诺塔问题    递归，分治算法</li><li>八皇后问题    回溯算法</li><li>马踏棋盘    图的深度优化算法（DFS），贪心算法（优化）</li></ul><p>算法是程序的灵魂，大厂对算法要求越来越高</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;### &lt;/p&gt;
&lt;h4 id=&quot;入门及环境搭建&quot;&gt;&lt;a href=&quot;#入门及环境搭建&quot; class=&quot;headerlink&quot; title=&quot;入门及环境搭建&quot;&gt;&lt;/a&gt;入门及环境搭建&lt;/h4&gt;&lt;h5 id=&quot;下载JDK&quot;&gt;&lt;a href=&quot;#下载JDK&quot; class=&quot;headerlink&quot; title=&quot;下载JDK&quot;&gt;&lt;/a&gt;下载JDK&lt;/h5&gt;&lt;p&gt;进入Oracle官网，下载相应版本，最近下载好像都得注册个账号&lt;/p&gt;
&lt;p&gt;下完按到所需目录，一般默认，一直下一步即可，完了设置一下环境变量&lt;/p&gt;
&lt;p&gt;此电脑-&amp;gt;属性-&amp;gt;高级系统设置-&amp;gt;环境变量-&amp;gt;编辑path，把bin目录路径加入&lt;/p&gt;
&lt;p&gt;classpath也可以设置&lt;/p&gt;
&lt;p&gt;在cmd中，输入java -version检查是否安装成功&lt;/p&gt;
&lt;p&gt;javac 文件路径（编译，生成。class文件）&lt;/p&gt;
&lt;p&gt;java 文件名，不加后缀，运行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDE选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前比较流行的是eclipse和IDEA，我更喜欢IDEA，熟练了快捷键和各种模板之后会用得很舒服&lt;/p&gt;
&lt;h5 id=&quot;语言特点&quot;&gt;&lt;a href=&quot;#语言特点&quot; class=&quot;headerlink&quot; title=&quot;语言特点&quot;&gt;&lt;/a&gt;语言特点&lt;/h5&gt;&lt;p&gt;通过编译成统一的字节码，不同平台下载对应JVM来实现跨平台&lt;/p&gt;
&lt;p&gt;完全面向对象，简单，高性能，分布式，多线程，健壮&lt;/p&gt;
&lt;p&gt;JDK（用于开发）-&amp;gt;JRE（运行环境）-&amp;gt;JVM(依次包含)&lt;/p&gt;
&lt;p&gt;java SE    标准版，定位于个人计算机用户&lt;/p&gt;
&lt;p&gt;java EE    企业版，定位于服务器端领域&lt;/p&gt;
&lt;p&gt;java ME    微型版，定位于消费电子产品的应用&lt;/p&gt;
&lt;p&gt;越高级语言越容易入门，但要精通还需沉下心来&lt;/p&gt;
&lt;h4 id=&quot;数据类型和运算符&quot;&gt;&lt;a href=&quot;#数据类型和运算符&quot; class=&quot;headerlink&quot; title=&quot;数据类型和运算符&quot;&gt;&lt;/a&gt;数据类型和运算符&lt;/h4&gt;&lt;h5 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h5&gt;&lt;p&gt;单行，多行，文档注释&lt;/p&gt;
&lt;h5 id=&quot;标识符的命名规则&quot;&gt;&lt;a href=&quot;#标识符的命名规则&quot; class=&quot;headerlink&quot; title=&quot;标识符的命名规则&quot;&gt;&lt;/a&gt;标识符的命名规则&lt;/h5&gt;&lt;p&gt;虽然不同语言之间会有细微区别，但为了便于编写，感觉大多数语言都推荐采用比较大众的规范&lt;/p&gt;
&lt;p&gt;不可以是java关键字，并且大小写敏感&lt;/p&gt;
&lt;p&gt;类名    大驼峰命名法&lt;/p&gt;
&lt;p&gt;方法和变量    小驼峰命名法&lt;/p&gt;
&lt;p&gt;常量    大写&lt;/p&gt;
&lt;p&gt;数据类型向上隐士转换，向下需要显示加括号强转&lt;/p&gt;
&lt;h5 id=&quot;基本数据类型（四类八种）&quot;&gt;&lt;a href=&quot;#基本数据类型（四类八种）&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型（四类八种）&quot;&gt;&lt;/a&gt;基本数据类型（四类八种）&lt;/h5&gt;&lt;p&gt;byte(1)  boolean(1)  short(2)  char(2)unicode字符集  int()4  float(4)  long(8)  double(8)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限制double小数点数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DecimalFormat df = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DecimalFormat(&lt;span class=&quot;string&quot;&gt;&quot;0.00&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df.format(total);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;string与基本类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包装类的parse和tostring方法&lt;/p&gt;
&lt;h5 id=&quot;引用数据类型&quot;&gt;&lt;a href=&quot;#引用数据类型&quot; class=&quot;headerlink&quot; title=&quot;引用数据类型&quot;&gt;&lt;/a&gt;引用数据类型&lt;/h5&gt;&lt;p&gt;string，数组，集合ArrayList，Scanner，Random，自定义类型&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>xmind使用</title>
    <link href="http://yoursite.com/2019/08/13/xmind%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/13/xmind使用/</id>
    <published>2019-08-13T12:43:43.000Z</published>
    <updated>2019-08-13T13:15:17.872Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h4 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h4><p>使用的较简单的免费版，本意只是为了简单的做一些总结<br>之所以选择xmind:zen而不是xmind 8是因为感觉xmind:zen相对来说更小，启动速度更快，并且感觉更加代表了未来的发展方向，xmind 8有些笨重了<br><a href="https://www.xmind.cn" target="_blank" rel="noopener">官网</a></p><h4 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h4><p><strong>编辑主题文字：</strong>选中主题“双击鼠标”或者按【空格键<strong>】</strong></p><p><strong>添加同级主题：</strong>快捷键<strong>【</strong>enter/return<strong>】</strong></p><p><strong>添加子主题：</strong>可快捷键【tab】</p><p><strong>删除：</strong>选中主题按【delete/backspace】</p><a id="more"></a><p><strong>添加外框：</strong>选中要框选的主题按工具栏的【外框】进行添加</p><p><strong>添加概要：</strong>选中主题按工具栏的【概要】进行添加</p><p><strong>添加笔记：</strong> ctrl+shift+n(note)</p><p><strong>撤销:</strong> Ctrl+z</p><p><strong>恢复:</strong> Ctrl+y</p><p>emmm,帮助-&gt;快捷键助手，基本列出了常用快捷键，还可以自定义快捷键</p><p>自己直接上手也很easy，就不一一总结了</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>整体使用还是比较符合我的预期的，启动快，简约，操作方便，虽然免费版导出格式受限，并且还有水印，但这个对我基本没什么影响</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;软件下载&quot;&gt;&lt;a href=&quot;#软件下载&quot; class=&quot;headerlink&quot; title=&quot;软件下载&quot;&gt;&lt;/a&gt;软件下载&lt;/h4&gt;&lt;p&gt;使用的较简单的免费版，本意只是为了简单的做一些总结&lt;br&gt;之所以选择xmind:zen而不是xmind 8是因为感觉xmind:zen相对来说更小，启动速度更快，并且感觉更加代表了未来的发展方向，xmind 8有些笨重了&lt;br&gt;&lt;a href=&quot;https://www.xmind.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用技巧&quot;&gt;&lt;a href=&quot;#使用技巧&quot; class=&quot;headerlink&quot; title=&quot;使用技巧&quot;&gt;&lt;/a&gt;使用技巧&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;编辑主题文字：&lt;/strong&gt;选中主题“双击鼠标”或者按【空格键&lt;strong&gt;】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加同级主题：&lt;/strong&gt;快捷键&lt;strong&gt;【&lt;/strong&gt;enter/return&lt;strong&gt;】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加子主题：&lt;/strong&gt;可快捷键【tab】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除：&lt;/strong&gt;选中主题按【delete/backspace】&lt;/p&gt;
    
    </summary>
    
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="软件使用" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>java开发工具之intelliJ IDEA</title>
    <link href="http://yoursite.com/2019/07/30/java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8BintelliJ-IDEA/"/>
    <id>http://yoursite.com/2019/07/30/java开发工具之intelliJ-IDEA/</id>
    <published>2019-07-30T04:56:21.000Z</published>
    <updated>2020-01-30T03:45:24.128Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Java开发主流工具是Eclipse（IBM开发）和intellij IDEA（jetbrains）。目前intellij IDEA明显使用人数增加。</p><h5 id="主要优势"><a href="#主要优势" class="headerlink" title="主要优势"></a>主要优势</h5><p>强大的整合能力，比如git，Maven，Spring等</p><p>提示功能的快速，便捷，范围广</p><p>好用的快捷键和代码模板</p><p>精确搜索</p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p><a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">下载地址</a></p><h5 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.JPG" alt></p><p>第一个目录存的是配置信息，比如字体，快捷键设置，插件</p><p>第二个存的是索引，缓存等（刚启动时会自动生成索引，这段时间最好安静等待，不然可能会报一些莫名其妙的错）</p><p>如果出了什么问题，可以把第二个目录干掉，一般重启一下就好了</p><p>程序主体安装在自己安装时选择的目录下</p><a id="more"></a><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>行号旁边单击可以添加断点，右击断点可以改为条件断点</p><p>单步，跳出之类的与大多数IDE一致</p><h5 id="取消自动更新"><a href="#取消自动更新" class="headerlink" title="取消自动更新"></a>取消自动更新</h5><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%8F%96%E6%B6%88%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.JPG" alt></p><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>可以直接在设置中查找插件    Plugins</p><h5 id="生成javadoc"><a href="#生成javadoc" class="headerlink" title="生成javadoc"></a>生成javadoc</h5><p>tool -&gt; generate javadoc</p><p>选择要生成的文件，位置</p><p>locate     zh_CN</p><p>other command line arguments: -encoding UTF-8 -charset UTF-8</p><h5 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h5><p>具体自行百度</p><h5 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h5><p>font修改字体大小及样式</p><p>editor内可以单独修改编辑器和控制台样式</p><p>language default -&gt; comments 修改注释颜色</p><p>editor -&gt; code style -&gt; file and code template -&gt; include -&gt; file header(编写头部信息)</p><p>editor -&gt; encoding -&gt; 可以将编码格式都改为utf-8（右下角显示了当前文件编码格式）</p><p>（reload  改变当前文件显示方式   convert    彻底转变）</p><p>build -&gt; compiler(设置自动编译)</p><p>file -&gt; power save module(省电模式，关闭代码提示等功能)</p><p>右击别的文件标签可以设置显示方式，同时打开多个文件</p><h5 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h5><p>setting -&gt;keymap -&gt; 在搜索框中输入功能，会提示对应快捷键/点击搜索图标，可以输入快捷键，提示对应功能</p><p>run    Ctrl+f5、shift+f10</p><p>提示补全    Ctrl+Alt+空格</p><p>单行注释    Ctrl+/</p><p>多行注释    Ctrl+shift+/</p><p>向下复制一行    Ctrl+d</p><p>删除选中行    Ctrl+y</p><p>向上移动一行    Ctrl+shift+向上箭头</p><p>向下移动一行    Ctrl+shift+向下箭头</p><p>向下开始新的一行    Ctrl+enter</p><p>向上开始新的一行    Ctrl+shift+enter</p><p>查看源码    按住Ctrl，点击要查看的/还有一种暂时没找见快捷键</p><p>查看继承关系    光标位于想查看元素上，ctrl+h</p><p>万能解错/生成返回值    alt+enter</p><p>返回到前一个编辑的页面    alt+right</p><p>进入到下一个编辑的页面    alt+left</p><p>格式化代码    Ctrl+alt+l</p><p>提示方法参数类型    Ctrl+p</p><p>复制，剪切，粘贴，全选与Windows一致</p><p>撤销    Ctrl+z</p><p>反撤销    ctrl+shift+z</p><p>选中数行，整体后移    tab</p><p>选中数行，整体前移    shift+tab</p><p>查看类的结构    ctrl+o</p><p>重构：修改变量名和方法名    shift+f6</p><p>大小写转化    Ctrl+shift+u</p><p>生成构造函数    alt+fn+insert</p><p>查看文档说明    Ctrl+q</p><p>收起所有方法    Ctrl+shift+减号</p><p>打开所有方法    Ctrl+shift+等号</p><p>打开代码所在硬盘文件夹    Ctrl+shift+x（我在设置中自己设置的）</p><p>生成try—catch等    alt+ctrl</p><p>查看方法在那些地方被调用过    Ctrl+h</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;Java开发主流工具是Eclipse（IBM开发）和intellij IDEA（jetbrains）。目前intellij IDEA明显使用人数增加。&lt;/p&gt;
&lt;h5 id=&quot;主要优势&quot;&gt;&lt;a href=&quot;#主要优势&quot; class=&quot;headerlink&quot; title=&quot;主要优势&quot;&gt;&lt;/a&gt;主要优势&lt;/h5&gt;&lt;p&gt;强大的整合能力，比如git，Maven，Spring等&lt;/p&gt;
&lt;p&gt;提示功能的快速，便捷，范围广&lt;/p&gt;
&lt;p&gt;好用的快捷键和代码模板&lt;/p&gt;
&lt;p&gt;精确搜索&lt;/p&gt;
&lt;h5 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/download/#section=windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;安装目录&quot;&gt;&lt;a href=&quot;#安装目录&quot; class=&quot;headerlink&quot; title=&quot;安装目录&quot;&gt;&lt;/a&gt;安装目录&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/guardwarm/imageBed/master/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.JPG&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;第一个目录存的是配置信息，比如字体，快捷键设置，插件&lt;/p&gt;
&lt;p&gt;第二个存的是索引，缓存等（刚启动时会自动生成索引，这段时间最好安静等待，不然可能会报一些莫名其妙的错）&lt;/p&gt;
&lt;p&gt;如果出了什么问题，可以把第二个目录干掉，一般重启一下就好了&lt;/p&gt;
&lt;p&gt;程序主体安装在自己安装时选择的目录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>看过的一些编程书及评价</title>
    <link href="http://yoursite.com/2019/07/28/%E7%9C%8B%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BC%96%E7%A8%8B%E4%B9%A6%E5%8F%8A%E8%AF%84%E4%BB%B7/"/>
    <id>http://yoursite.com/2019/07/28/看过的一些编程书及评价/</id>
    <published>2019-07-28T14:10:10.000Z</published>
    <updated>2020-01-30T03:30:39.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><hr><h4 id="汇编语言基础教程-James-T-Streib"><a href="#汇编语言基础教程-James-T-Streib" class="headerlink" title="汇编语言基础教程         James T.Streib"></a>汇编语言基础教程         James T.Streib</h4><p>整体讲解不够深入，用了很多高级汇编指令，与最初想了解底层如何实现的初衷相违背，并且很多话说的不清楚，很绕。整体学到了一些东西，算是入门了，但整体感觉不好，不推荐。</p><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><hr><h4 id="跟阿铭学linux（第三版）"><a href="#跟阿铭学linux（第三版）" class="headerlink" title="跟阿铭学linux（第三版）"></a>跟阿铭学linux（第三版）</h4><p>学linux最初的各种命令是看的网课。那几个明明运用及理解都不难的命令，反反复复讲了好长时间，白白浪费了不少时间。我感觉看书来学习linux的各种命令更高效，这本书整体节奏不错，难度感觉略高一点，但认着看，感觉看的很舒服，收货很多。勉强算适合小白吧，我感觉还是有一些对新手不怎么友好的点。</p><p>（这本书学习笔记参见）</p><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;汇编&quot;&gt;&lt;a href=&quot;#汇编&quot; class=&quot;headerlink&quot; title=&quot;汇编&quot;&gt;&lt;/a&gt;汇编&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;汇编语言基础教程-James-T-Streib&quot;&gt;&lt;a href=&quot;#汇编语言基础教程-James-T-Streib&quot; class=&quot;headerlink&quot; title=&quot;汇编语言基础教程         James T.Streib&quot;&gt;&lt;/a&gt;汇编语言基础教程         James T.Streib&lt;/h4&gt;&lt;p&gt;整体讲解不够深入，用了很多高级汇编指令，与最初想了解底层如何实现的初衷相违背，并且很多话说的不清楚，很绕。整体学到了一些东西，算是入门了，但整体感觉不好，不推荐。&lt;/p&gt;
&lt;h3 id=&quot;运维&quot;&gt;&lt;a href=&quot;#运维&quot; class=&quot;headerlink&quot; title=&quot;运维&quot;&gt;&lt;/a&gt;运维&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;跟阿铭学linux（第三版）&quot;&gt;&lt;a href=&quot;#跟阿铭学linux（第三版）&quot; class=&quot;headerlink&quot; title=&quot;跟阿铭学linux（第三版）&quot;&gt;&lt;/a&gt;跟阿铭学linux（第三版）&lt;/h4&gt;&lt;p&gt;学linux最初的各种命令是看的网课。那几个明明运用及理解都不难的命令，反反复复讲了好长时间，白白浪费了不少时间。我感觉看书来学习linux的各种命令更高效，这本书整体节奏不错，难度感觉略高一点，但认着看，感觉看的很舒服，收货很多。勉强算适合小白吧，我感觉还是有一些对新手不怎么友好的点。&lt;/p&gt;
&lt;p&gt;（这本书学习笔记参见）&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>linux之centos学习笔记</title>
    <link href="http://yoursite.com/2019/07/28/linux%E4%B9%8Bcentos%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/28/linux之centos学习笔记/</id>
    <published>2019-07-28T14:06:43.000Z</published>
    <updated>2020-01-31T12:55:37.737Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><hr><h5 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h5><p><strong>绝对路径与相对路径</strong>：区别在于是否从根目录开始，本地绝对路径更稳定，服务器端用相对路径</p><p><strong>cd</strong></p><p><code>cd 路径</code>   . 当前目录 .. 上级目录</p><p>什么都不加默认跳转到当前用户根目录下<br>只能跳转到目录，不可以跳转到文件，会报错</p><p><strong>mkdir</strong></p><p>-m   指定文件权限，不常用<br>-p    创建一串级联目录，已存在时不报错 </p><a id="more"></a><p><strong>ls</strong></p><p>-l    详细信息<br>-d    查看指定目录属性<br>-h    人性化显示大小</p><p>ll=ls -l</p><p><strong>rmdir</strong>  不常用，仅用于删除目录</p><p>-p    级联删除，如果目录非空时报错</p><p><strong>rm</strong></p><p>-r    删除目录时必须加<br>-f    强制删除，不再询问是否删除</p><p><strong>PATH变量</strong></p><p>一串用：分隔的路径，执行命令时会默认从PATH中找<br>修改:    PATH=$PATH:新路径</p><p><strong>cp 【选项】 【源文件】 【目标文件】</strong></p><p>-r    复制目录时加<br>-i    安全选项，覆盖时会询问，默认alise cp=“cp -i”</p><p><strong>mv 【选项】 【源文件或目录】 【目标文件或目录】</strong></p><p>目标文件是目录，若存在，则将源文件或目录移动到目标目录下；若不存在，则将原目录重命名为给定文件名<br>目标文件是文件，若存在，则询问是否覆盖，若不存在，则将源文件重命名为给定的目标文件</p><p><strong>cat</strong></p><p>-n    显示行号<br>-A    显示所有内容，包括特殊字符</p><p><strong>tac</strong>    与命令tac一样，倒叙查看</p><p><strong>more    文件内容较多时使用</strong></p><p>Ctrl+D    向上翻屏<br>Ctrl+F    向下翻屏，同空格<br>空格    向下翻屏<br>q    退出<br>/字符串    从当前行向下查找字符串，按n定位下一个<br>？字符串    从当前行向上查找字符串，按n定位下一个（可以使用通配符）</p><p><strong>less    作用同more，但命令更多</strong></p><p>j    向上移动一行<br>k    向上移动</p><p><strong>head</strong>    默认显示文件前十行</p><p>-n 1/-n1/-1    显示指定行数，三种方式皆可</p><p><strong>tail</strong>    同head，倒叙查看</p><p><strong>文件属性</strong></p><ul><li>第一列<pre><code>第一位  d    目录  -    普通文件      l    链接文件      b    块设备      c    串行端口设备文件      s    套接字文件，socket</code></pre>  后九位<br>  每三位为一组，分别为user，group，others权限<br>  最后一位<br>  使用了SElinux context为点<br>  设置了acl属性为+号</li><li>第二列<br>  该文件占用的节点（inode），有几种访问方式</li><li>第三列<br>  所有者</li><li>第四列<br>  所属组</li><li>第五列<br>  该文件大小    </li><li>第六七八列<br>  分别为月日及时间</li><li>第九列<br>  文件名</li></ul><p><strong>chgrp</strong>    不常用<br>更改文件所属组<br>chgrp 【组名】 【文件名】<br>-R    级联更改子目录名或文件名</p><p><strong>chown</strong><br>更改文件所有者<br>chown 【-R】 账户名：组名    文件名<br>-R    仅用于目录，作用是级联更改</p><p><strong>chmod</strong><br>更改用户权限，目录默认为755，文件默认为644<br>chmod  750  文件或目录名<br>chmod  u=rwx，og=rw  文件或目录名   u，g，o，a（all）<br>chmod  a-x  文件或目录名</p><p><strong>umask</strong><br>修改文件默认权限<br>umask  xxx    xxx=默认值-所需默认值（文件默认为666，目录默认为777）<br>特例：666-333=444（333代表去了可写和可执行权限，但本来就没有可执行）</p><p><strong>chattr</strong><br>修改文件特殊属性<br>chattr 【+-=】【Asaci】 【文件或目录名】  分别是增加，减少和设定<br><strong><em>存疑：=还不清楚</em></strong><br>-A    文件或目录的atime将不可修改<br>-s    将数据同步写入磁盘<br>-a    只能追加不能删除，非root不可设定该属性（常用）<br>-c    自动压缩文件，读取时自动解压<br>-i    文件不能删除，重命名，设定链接，以及写入数据（常用）</p><p><strong>lsattr  文件或目录名</strong><br>该命令用于读取文件或者目录的特殊权限<br>-a    列出所有文件，包括隐藏文件<br>-R    连同子目录数据列出</p><p><strong>set uid，set gid，sticky bit</strong><br>权限其实共四位，第一位由这三个决定，分别为4,2,1，具体表现在第三位，若为小写则原本有x，大写则无，例如rwsrwsrwt为7777<br>set uid    针对二进制可执行文件，使文件在执行阶段拥有该文件所有者权限    passwd命令<br>set gid    作用在二进制文件上时，同上，作用在目录上时，任何用户在此目录下创建的文件都具有和该目录所属组相同的组<br>sticky bit    设置该权限后，就算用户拥有写权限，也只可以添加而不可删除文件    /tmp/</p><h5 id="在linux下搜索文件"><a href="#在linux下搜索文件" class="headerlink" title="在linux下搜索文件"></a>在linux下搜索文件</h5><p><strong>which</strong><br>查找可执行文件绝对路径<br>which vi</p><p><strong>whereis</strong><br>通过预先生成的文件列表库查找<br>whereis 【-bms】 【文件名称】<br>-b    只查找二级制文件<br>-m    只查找帮助文件<br>-s    只查找源代码文件</p><p><strong>locate</strong>    不常用<br>类似于whereis，包含所搜索关键词的目录和文件都会列出，所以不适合精确搜索</p><p><strong>find    重要</strong><br>find 【路径】 【参数】<br>-atime +n/-n    访问或执行时间大于或小于n天<br>-ctime +n/-n    写入、更改inode属性的时间大于或小于n天<br>-mtime +n/-n    写入时间大于或小于n天        <strong>用得最多</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;文件和目录管理&quot;&gt;&lt;a href=&quot;#文件和目录管理&quot; class=&quot;headerlink&quot; title=&quot;文件和目录管理&quot;&gt;&lt;/a&gt;文件和目录管理&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;绝对路径与相对路径&lt;/strong&gt;：区别在于是否从根目录开始，本地绝对路径更稳定，服务器端用相对路径&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd 路径&lt;/code&gt;   . 当前目录 .. 上级目录&lt;/p&gt;
&lt;p&gt;什么都不加默认跳转到当前用户根目录下&lt;br&gt;只能跳转到目录，不可以跳转到文件，会报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mkdir&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-m   指定文件权限，不常用&lt;br&gt;-p    创建一串级联目录，已存在时不报错 &lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>出现过的小问题</title>
    <link href="http://yoursite.com/2019/07/26/%E5%87%BA%E7%8E%B0%E8%BF%87%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/26/出现过的小问题/</id>
    <published>2019-07-26T05:49:44.000Z</published>
    <updated>2020-02-01T10:35:59.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="与git相关"><a href="#与git相关" class="headerlink" title="与git相关"></a>与git相关</h3><p>​    fatal: Not a git repository (or any of the parent directories): .git</p><p>​    <code>git init</code></p><p>​    生成子项目</p><p>​    <code>git submodule add 项目路径  文件路径</code></p><h3 id="与hexo相关"><a href="#与hexo相关" class="headerlink" title="与hexo相关"></a>与hexo相关</h3><p>常用命令</p><p>​    清楚缓存   <code>hexo clean</code></p><p>​    本地检测   <code>hexo s</code>   (-p 4001   指定端口，默认4000)  （–debug检测）</p><p>​    生成静态文件   <code>hexo g</code>（-w 监视文件变动）</p><p>​    部署   <code>hexo d</code></p><p>​    (<code>hexo clean &amp;&amp; hexo g -d</code>)</p><h3 id="与Markdown相关"><a href="#与Markdown相关" class="headerlink" title="与Markdown相关"></a>与Markdown相关</h3><ul><li>感觉没有光标移动很不舒服，暂时没找到解决办法</li><li>默认开启了拼写检查，很多编程的英文下面都是红线，很难受</li></ul><p>文件 -&gt; 偏好设置，下拉就可以找到钱拼写检查</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5.JPG" alt>)</p><ul><li><p>不喜欢默认主题的可以在偏好设置中获取主题</p><p><img src="https://raw.githubusercontent.com/guardwarm/imageBed/master/typora%E4%B8%BB%E9%A2%98.JPG" alt></p><p>选择自己喜欢的点击download，会给出css源码（有时也会直接给一个压缩文件），自己ctrl A,ctrl C存为一个css文件，导入主题文件夹即可</p><p>（从偏好设置中打开主题文件夹，导入即可）</p></li></ul><p>与intellij IDEA相关</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;与git相关&quot;&gt;&lt;a href=&quot;#与git相关&quot; class=&quot;headerlink&quot; title=&quot;与git相关&quot;&gt;&lt;/a&gt;与git相关&lt;/h3&gt;&lt;p&gt;​    fatal: Not a git repository (or any of the parent
      
    
    </summary>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>汇编基础</title>
    <link href="http://yoursite.com/2019/07/21/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/07/21/汇编基础/</id>
    <published>2019-07-21T03:08:24.000Z</published>
    <updated>2020-01-30T03:30:26.853Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li><p>直接在硬件工作，与机器语言一一对应</p></li><li><p>机器语言   01010000   本质：电平脉冲（早期通过穿孔卡片是实现）    push ax</p><p>难以阅读且易错</p></li><li><p>汇编语言主体是汇编指令，相当于机器指令的助记符</p></li><li><p>程序–&gt;  汇编指令  –&gt;  编译器–&gt;  机器码  –&gt;  计算机</p></li><li><blockquote><p>汇编语言包括</p><blockquote><p>汇编指令（机器码的助记符）<strong>核心</strong></p><p>伪指令（由编译器执行）</p><p>其他符号（由编译器执行）</p></blockquote></blockquote></li></ul><a id="more"></a><hr><ul><li>CPU：控制计算机运作并进行运算  <strong>核心部件</strong></li><li>内存：存储数据，不常用的置于磁盘中</li><li></li></ul><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接在硬件工作，与机器语言一一对应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;机器语言   01010000   本质：电平脉冲（早期通过穿孔卡片是实现）    push ax&lt;/p&gt;
&lt;p&gt;难以阅读且易错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;汇编语言主体是汇编指令，相当于机器指令的助记符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序–&amp;gt;  汇编指令  –&amp;gt;  编译器–&amp;gt;  机器码  –&amp;gt;  计算机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;汇编语言包括&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;汇编指令（机器码的助记符）&lt;strong&gt;核心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;伪指令（由编译器执行）&lt;/p&gt;
&lt;p&gt;其他符号（由编译器执行）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="汇编" scheme="http://yoursite.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
