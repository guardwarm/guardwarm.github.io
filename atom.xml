<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guard warm</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-17T16:04:57.249Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>grandwarm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/09/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/17/正则表达式/</id>
    <published>2019-09-17T14:47:12.000Z</published>
    <updated>2019-09-17T16:04:57.249Z</updated>
    
    <content type="html"><![CDATA[<h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><p>正则表达式（regular expression，简称regex）：是一些用来匹配和处理文本的字符串</p><p>正则表达式通常被简称为模式，其实是一些由字符构成的字符串</p><p>这些字符可以是普通字符（纯文本）或元字符（有特殊含义的特殊字符）</p><h5 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h5><p> .    匹配任何单个的字符</p><p>\    对特殊字符进行转义</p><h5 id="匹配一组字符"><a href="#匹配一组字符" class="headerlink" title="匹配一组字符"></a>匹配一组字符</h5><p>[和]    定义字符集合    [0-9a-zA-Z]</p><p>-    定义字符区间    0-9 a-z</p><p>^    对字符集合进行取非匹配    [^0-9a-zA-Z]</p><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><ul><li>空白字符</li></ul><p>[\b]    回退（删除）一个字符</p><p>\f    换页符</p><p>\n    换行符</p><p>\r    回车符</p><p>\t    制表符（tab）</p><p>\v    垂直制表符</p><p>\s    任何一个空白字符    [\f\n\r\t\v]</p><p>\S    任何一个非空白字符</p><ul><li>匹配数字</li></ul><p>\d    任何一个数字</p><p>\D    任何一个非数字</p><ul><li>匹配字母和数字</li></ul><p>\w    任何一个字母，数字和下划线</p><p>\W    任何一个非字母，数字和下划线</p><ul><li>进制</li></ul><p>\x    十六进制</p><p>\0    八进制</p><ul><li>POSIX字符串</li></ul><p>[[:alnum:]]                 数字字符</p><p>[[:alpha:]]                  字母字符</p><p>[[:lower:]]                  小写字母字符</p><p>[[:print:]]                    可显示的字符</p><p>[[:blank:]]                   空格(space)与定位字符</p><p>[[:punct:]]                   除[[:cntrl:]]和[[:alnum:]]外</p><p>[[:cntrl:]]                     ASCII控制字符(0-31和127)</p><p>[[:space:]]                   空白(whitespace)字符</p><p>[[:upper:]]                   大写字母字符</p><p>[[:digit:]]                      数字字符</p><p>[[:graph:]]                   非空格(nonspace)字符</p><p>[[:xdigit:]]                    十六进制数字字符</p><h5 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h5><p>+    给字符或字符集合作为后缀，表示匹配一个或多个字符或字符合集</p><p>*    给字符或字符集合作为后缀，表示匹配零个或多个字符或字符合集</p><p>{num1，num2}    精确重复次数    {6} {1,4}  {3,}</p><p>?    给字符或字符集合作为后缀，表示匹配零个或一个字符或字符合集</p><p>前三个为贪婪型元字符，为了防止过度匹配，会在其后加个？变为懒惰型元字符</p><h5 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h5&gt;&lt;p&gt;正则表达式（regular expression，简称regex）：是一些用来匹配和处理文本的字符串&lt;/p&gt;
&lt;p&gt;正则表达式通常被简称为模
      
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://yoursite.com/2019/09/04/git%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/04/git使用/</id>
    <published>2019-09-04T15:43:18.000Z</published>
    <updated>2019-09-14T12:49:47.135Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git版本控制系统"><a href="#Git版本控制系统" class="headerlink" title="Git版本控制系统"></a>Git版本控制系统</h4><ul><li>记录版本信息（记录每一次的修改）</li><li>方便团队相互之间协作，共同开发</li></ul><p>常用版本控制系统</p><ul><li>svn/cvs：集中式版本控制系统    共用一个服务器，一旦出问题就全完了，保存差异</li><li>git：分布式版本控制系统    保存的是所有文件的快照，每个人本地都相当于一个服务器</li></ul><h4 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h4><p>这个网上很常见，自行参考网上教程</p><h4 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h4><h5 id="目的：托管项目代码"><a href="#目的：托管项目代码" class="headerlink" title="目的：托管项目代码"></a>目的：托管项目代码</h5><p>工作区 -&gt; 暂存区 -&gt; 历史区</p><h5 id="1-Git的全局配置"><a href="#1-Git的全局配置" class="headerlink" title="1.Git的全局配置"></a>1.Git的全局配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一次安装完成git后，要在全局环境下配置基本信息：我是谁？</span><br><span class="line"><span class="meta">$</span> git config -l查看配置信息</span><br><span class="line"><span class="meta">$</span> git config --global -l查看全局配置信息</span><br><span class="line">配置全局信息，用户名和邮箱</span><br><span class="line"><span class="meta">$</span> git config --global user.name 'xxx'</span><br><span class="line"><span class="meta">$</span> git config --global user.email 'xxx@xx.xx'</span><br><span class="line">初始化ssh</span><br><span class="line"><span class="meta">$</span> ssh-Keygon先是确定保存路径，再是密码，三次回车即可</span><br><span class="line">在C:\Users\asus\.ssh用记事本打开id_ssh.pub,复制其中内容</span><br></pre></td></tr></table></figure><p><img src="/.com//git6.JPG" alt></p><h5 id="2-创建仓库完成版本控制"><a href="#2-创建仓库完成版本控制" class="headerlink" title="2.创建仓库完成版本控制"></a>2.创建仓库完成版本控制</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">创建本地git仓库</span><br><span class="line"><span class="meta">$</span> git init</span><br><span class="line">会生成一个隐藏文件夹“.git”（这个文件夹很重要，暂存区和历史区以及一些其他数据都在里面存着）</span><br><span class="line"></span><br><span class="line">在本地编写完成代码后（在工作区），把一些文件提交到暂存区</span><br><span class="line"><span class="meta">$</span> git add xxx把某一个文件或者文件夹提交到暂存区</span><br><span class="line"><span class="meta">$</span> git add .|| git add A把当前仓库中所有最新修改的文件都提交到暂存区</span><br><span class="line"><span class="meta">$</span> git status查看当前文件的状态（红色代表工作区，绿色代表暂存区，看不见东西代表所有东西都已提交到历史区）</span><br><span class="line"></span><br><span class="line">把暂存区内容提交到历史区</span><br><span class="line"><span class="meta">$</span> git commit -m'描述信息'</span><br><span class="line">本地版本库回退</span><br><span class="line"><span class="meta">$</span> git checkout -- 文件名回到最近的一次add/commit时的状态</span><br><span class="line"><span class="meta">$</span> git reset --hard/mixed/soft HEAD~num</span><br><span class="line">--hard回退全部，包括HEAD，index，working tree</span><br><span class="line">--mixed 回退部分，包括HEAD，index</span><br><span class="line">--soft只回退HEAD</span><br><span class="line">查看历史版本信息（历史记录）</span><br><span class="line"><span class="meta">$</span> git log</span><br><span class="line"><span class="meta">$</span> git reflog包含回滚的信息可以获得版本号</span><br><span class="line">差异比较</span><br><span class="line"><span class="meta">$</span> git diff比较工作区和暂存区</span><br><span class="line"><span class="meta">$</span> git diff --cached比较暂存区和本地库最近一次提交的区别</span><br><span class="line"><span class="meta">$</span> git diff HEAD比较工作区和本地库最近一次提交的区别</span><br><span class="line">分支操作</span><br><span class="line"><span class="meta">$</span> git branch -d 分支名删除分支</span><br><span class="line"><span class="meta">$</span> git remote push 分支一：分支二将分支一推给分支二</span><br><span class="line"><span class="meta">$</span> git branch查看现在有哪些分支</span><br><span class="line"><span class="meta">$</span> git checkout 分支名切换到分支</span><br><span class="line"><span class="meta">$</span> git checkout -b 分支名创建并切换到新分支</span><br></pre></td></tr></table></figure><p><img src="/.com//git7.JPG" alt></p><p>通过移动head指针来改变版本</p><p><img src="/.com//git8.JPG" alt></p><p>一般多分支同时开发，然后由项目组长来分支合并</p><p><img src="/.com//git5.jpg" alt></p><p><img src="/.com//git4.jpg" alt></p><p><img src="/.com//git3.jpg" alt></p><h4 id><a href="#" class="headerlink" title></a><img src="/.com//git2.jpg" alt></h4><p><strong>git小技巧</strong></p><p><img src="/.com//git9.JPG" alt></p><p>把一些暂时用不到的修改，暂存起来</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>一个网站（开源的代码管理平台），用户注册号，可以在自己账户下创建仓库，用来管理项目的源代码（源代码基于git传到仓库中）</p><p>我们所熟知的插件，类库，框架等都在这个平台上有托管，我们可以下载观看和研究源码等</p><p><strong>settings用户设置</strong></p><ul><li>profile    修改自己的基本信息</li><li>account    作用修改用户名</li><li>security    可以改自己的密码</li><li>emails    私有仓库作为内部团队协作管理的项目</li><li>……</li></ul><p>new  repository -&gt; 填写信息，公私有都免费 -&gt; create repository</p><ul><li>public    公共开源</li><li>private    私有，作为内部团队项目</li></ul><p>settings -&gt; 删除仓库</p><p>​               -&gt; collaborators 设置协助开发人员，需对方同意邀请</p><p>code可以查看历史版本和分支信息</p><h5 id="3-把本地仓库信息提交到远程仓库"><a href="#3-把本地仓库信息提交到远程仓库" class="headerlink" title="3.把本地仓库信息提交到远程仓库"></a>3.把本地仓库信息提交到远程仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">查看本地仓库和哪些远程仓库保持连接</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br><span class="line">让本地仓库和远程仓库创建一个连接origin是随便起的一个名字，但一般都用这个</span><br><span class="line"><span class="meta">$</span> git remote add origin [仓库地址]</span><br><span class="line"><span class="meta">$</span> git remote rename old new重命名</span><br><span class="line">解除关联信息</span><br><span class="line"><span class="meta">$</span> git remote rm origin</span><br><span class="line">提交之前最好先拉取</span><br><span class="line"><span class="meta">$</span> git pull origin master</span><br><span class="line">将本地代码提交到远程仓库（第一次需要输入用户名和密码）</span><br><span class="line"><span class="meta">$</span> git push origin master</span><br><span class="line">将远程仓库代码拉取到本地</span><br><span class="line"><span class="meta">$</span> git clone [远程仓库git地址] [别名，默认为仓库名，也可以起一个作为拉取后的文件夹名]</span><br><span class="line">/*</span><br><span class="line"> *真实项目开发流程：</span><br><span class="line"> *1.组长或者负责人先创建中央仓库</span><br><span class="line"> *2.小组成员基于$ git clone 把远程仓库及默认的内容克隆到本地（解决了三个事情：初始化一个</span><br><span class="line"> 本地仓库“git init”，和对应的远程仓库也保持了关联“git remote add”，把远程仓库默认内人拉取到本地</span><br><span class="line"> “git pull”</span><br><span class="line"> *3.每个组员写自己的程序后，基于“git add/git commit”把自己修改的内容存放到历史区，然后通过</span><br><span class="line"> “git pull/git push”把本地信息和远程仓库信息保持同步即可（可能涉及冲突处理）</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><img src="/.com//git1.jpg" alt></p><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><p>node package manger:NODE模块管理工具，根据NPM我们可快速安装、卸载所需要的资源文件</p><p>区NODE官网：下载NODE重启支持版，安装NODE后，NPM也跟着安装了</p><p>基于npm是从<a href>npmjs.com</a>平台下下载安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//在终端中检测安装是否成功，出现版本号即成功了</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npm install xxx把模块安装在当前项目中（node_modules）</span><br><span class="line">$ npm install xxx -g把模块安装在全局环境中</span><br><span class="line">$ npm i xxx@<span class="number">1.0</span>.<span class="number">0</span>安装指定版本号的模块</span><br><span class="line">$ npm view xx version &gt; xxx.version.json查看某个模块的版本信息（输出到指定json文件中）</span><br><span class="line"></span><br><span class="line">$ npm init -y初始化当前项目的配置依赖清单</span><br><span class="line">$ npm i xxx -save把模块保存在清单生产依赖中</span><br><span class="line">$ npm i xxx --save-dev把模块保存在清单开发依赖中</span><br><span class="line">$ npm install跑环境，按照清单安装所需模块</span><br><span class="line"></span><br><span class="line">$ npm root -g查看全局安装模块的目录</span><br><span class="line">$ npm -uninstall xxx</span><br><span class="line">$ npm -uninstall xxx -g卸载安装过的模块</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Git版本控制系统&quot;&gt;&lt;a href=&quot;#Git版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;Git版本控制系统&quot;&gt;&lt;/a&gt;Git版本控制系统&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;记录版本信息（记录每一次的修改）&lt;/li&gt;
&lt;li&gt;方便团队相互之间协作
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>java</title>
    <link href="http://yoursite.com/2019/08/16/java/"/>
    <id>http://yoursite.com/2019/08/16/java/</id>
    <published>2019-08-16T05:15:33.000Z</published>
    <updated>2019-09-16T05:19:58.429Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h3><h4 id="入门及环境搭建"><a href="#入门及环境搭建" class="headerlink" title="入门及环境搭建"></a>入门及环境搭建</h4><h5 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h5><p>进入Oracle官网，下载相应版本，最近下载好像都得注册个账号</p><p>下完按到所需目录，一般默认，一直下一步即可，完了设置一下环境变量</p><p>此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;编辑path，把bin目录路径加入</p><p>classpath也可以设置</p><p>在cmd中，输入java -version检查是否安装成功</p><p>javac 文件路径（编译，生成。class文件）</p><p>java 文件名，不加后缀，运行</p><p><strong>IDE选择</strong></p><p>目前比较流行的是eclipse和IDEA，我更喜欢IDEA，熟练了快捷键和各种模板之后会用得很舒服</p><h5 id="语言特点"><a href="#语言特点" class="headerlink" title="语言特点"></a>语言特点</h5><p>通过编译成统一的字节码，不同平台下载对应JVM来实现跨平台</p><p>完全面向对象，简单，高性能，分布式，多线程，健壮</p><p>JDK（用于开发）-&gt;JRE（运行环境）-&gt;JVM(依次包含)</p><p>java SE    标准版，定位于个人计算机用户</p><p>java EE    企业版，定位于服务器端领域</p><p>java ME    微型版，定位于消费电子产品的应用</p><p>越高级语言越容易入门，但要精通还需沉下心来</p><h4 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h4><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>单行，多行，文档注释</p><h5 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h5><p>虽然不同语言之间会有细微区别，但为了便于编写，感觉大多数语言都推荐采用比较大众的规范</p><p>不可以是java关键字，并且大小写敏感</p><p>类名    大驼峰命名法</p><p>方法和变量    小驼峰命名法</p><p>常量    大写</p><p>数据类型向上隐士转换，向下需要显示加括号强转</p><h5 id="基本数据类型（四类八种）"><a href="#基本数据类型（四类八种）" class="headerlink" title="基本数据类型（四类八种）"></a>基本数据类型（四类八种）</h5><p>byte(1)  boolean(1)  short(2)  char(2)unicode字符集  int()4  float(4)  long(8)  double(8)</p><h5 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h5><p>string，数组，集合ArrayList，Scanner，Random，自定义类型</p><a id="more"></a><h4 id="包的声明和访问"><a href="#包的声明和访问" class="headerlink" title="包的声明和访问"></a>包的声明和访问</h4><p>包的本质就是文件夹，在包名中以.来区分上下级文件关系</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase8.JPG" alt></p><p>作用：分类管理文件</p><p>包的声明：package 包名        指示某个类在哪个包下    包的声明必须和类的实际位置保持一致</p><p>包的导入：用来告诉编译器我们要用的类在哪个包下        import 包名.类名</p><p>不导包时需采用全限定类名：包名.类名（所有用到类名的地方都需这样写）</p><h4 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h4><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase9.JPG" alt></p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象是一种编程思想，是相当于面向过程的</p><p>面向过程：遇到问题，亲力亲为一步一步解决        核心理念：谁的功能谁负责</p><p>面向对象：遇到一个问题，找具有解决这个问题能力的对象，调用它的方法</p><p>面向对象三大特性：封装（安全性），继承（拓展性），多态（）</p><p>类的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="comment">//成员类名</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个标准的类封装：隐藏细节，对外暴露公共防蚊1方式构造：无参必须有，全参最好有</span></span><br><span class="line"><span class="comment">//类名作为方法参数或返回值时需要传入或返回的应该是该类的对象</span></span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase1.JPG" alt></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是两个类之间的关系，子类继承父类</p><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><p>区分局部变量和成员变量同名的情况</p><p>this的本质：实际上是个对象    谁调用的方法，this指的就是谁</p><p>匿名对象：（可用可不用）    没有名字的对象</p><p>只创建对象，但不用变量接收</p><p>在一些用来传参后续不调用时使用</p><p>特点：匿名对象也是一个对象，具有对象所有功能</p><p>​            每次调用都是一个新的对象，所一每个对象只能使用一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.xxx<span class="comment">//调用该对象属性</span></span><br><span class="line"><span class="keyword">this</span>.aaa()<span class="comment">//调用该对象方法</span></span><br><span class="line"><span class="comment">//高级使用：用来调用本类的其他构造通过输入不同参数来调用不同构造</span></span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase4.JPG" alt></p><h5 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h5><p>区分子类和父类成员同名的情况，但默认优先调用子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.xxx<span class="comment">//调用父类属性</span></span><br><span class="line"><span class="keyword">super</span>.aaa()<span class="comment">//调用父类方法</span></span><br><span class="line"><span class="keyword">super</span>();<span class="comment">//调用父类构造方法，通过输入不同参数来调用不同构造，默认调用无参构造</span></span><br><span class="line"><span class="comment">//无论调用子类那个构造，都会先调用父类构造，符合单一职责原则，一个类只需负责给本类变量初始化</span></span><br></pre></td></tr></table></figure><h5 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承必须合理人是人他妈生的，妖是妖他妈生的</span></span><br><span class="line"><span class="comment">//继承中的成员抽取了子类中的共性内容</span></span><br><span class="line"><span class="comment">//子类会自动继承父类中所有成员，但private不可访问</span></span><br><span class="line"><span class="comment">//创建子类对象时会先创建其父类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承后成员变量不同时，没有任何问题，相同时优先访问子类</span></span><br><span class="line"><span class="comment">//继承后成员方法不同时，没有任何问题，相同时(子类重写了父类方法时)优先访问子类，但可以通过super.方法名访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只能单继承，但可以多层继承（直接父类唯一，但可以有多个间接父类）</span></span><br><span class="line"><span class="comment">//多继承的话调用方法时会产生不确定性，同名父类成员不知道该掉哪个</span></span><br></pre></td></tr></table></figure><p>继承大大提高代码重用性</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase3.JPG" alt></p><ul><li><p>方法的重载：在同一个类中，方法名相同，但参数列表不同（参数类型，参数顺序，参数个数任一不同）</p></li><li><p>方法的重写（覆盖，覆写override）：子类中出现了和父类一模一样的方法</p><ul><li>重写原因：当子类发现继承过来的方法不适用时需要重写自己的方法</li><li>重写要求：该方法子类权限需大于等于父类权限（一般都是相同权限）    public  protected  default  private</li></ul><p>private方法不可重写    方法名，参数列表，返回值类型必须一模一样</p></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>一个对象的多种状态</p><p>java中的前提：必须有字符类关系，必须有方法的重写</p><h5 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h5><p>抽象类：以前一个类中包含抽象方法即为抽象类，现在只要由关键字abstract修饰即为抽象类</p><p>抽象类不可以实例化，天生就是作为父类的</p><p>抽象方法：只有声明而没有实现        向上抽取时会出现一种特殊情况，方法功能声明相同，但方法主体不同，这时只抽取方法声明，所得即为抽象方法        必须用关键字abstract修饰        不能调用，为了强制子类去重写</p><blockquote><p>类名作为返回值或参数时，传递和返回的应是该类对象</p><p>抽象类作为返回值或参数时，传递和返回的应是该类的子类的对象</p></blockquote><p>链式编程：当返回值为调用这个方法的对象时，便可以链式的调用下去</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase5.JPG" alt></p><p><strong>小练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例：武警开坦克打飞机</span></span><br><span class="line"><span class="comment">//名词提取：武警 坦克  飞机再分析每个类对应属性和方法</span></span><br></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>类：一堆具有共同属性和成员方法的对象的集合</p><p>接口：方法的集合，只能定义抽象方法    天生作为父接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class类</span></span><br><span class="line"><span class="comment">//abstract class抽象类</span></span><br><span class="line"><span class="comment">//interface接口</span></span><br><span class="line"><span class="comment">//enum枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line"><span class="comment">//不能定义普通成员变量，只能定义抽象方法</span></span><br><span class="line"><span class="comment">//可以定义常量public static final 变量名即使不加修饰，编译器也会自动添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发中常用模式：一个类继承一个抽象类，实现多个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> <span class="title">B</span> <span class="keyword">implements</span> 接口<span class="title">A</span>，接口<span class="title">B</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类与类之间是单继承，一个子类只能有一个直接父类</p><p>接口与接口之间支持多继承也支持多层继承</p><p>类与接口之间不叫继承（extends）而是实现（implements）    可以多实现</p><p><strong>比较抽象类和接口</strong></p><p>相同点：都不能实例化，都是作为父类/父接口，子类继承/实现都不行重写抽象方法</p><p>不同点：抽象类中不全是抽象方法，可以有普通成员变量，修饰的关键字不同    弥补了java的单继承</p><p>思想上的区别：抽象类中必须定义整个体系的共性内容</p><p>​                            接口中定义整个继承体系之外额外的扩展功能（谁想有这些功能就来是实现下这个接口）</p><p>优先使用接口    需要定义子类行为又要为子类提供共性功能时才用抽象类</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase6.JPG" alt></p><h5 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h5><p>父类类型 变量名 = new 子类类型();</p><p>父类类型变量指向了子类对象</p><p>注意事项：多态使用变量是，编译和运行都看父类        调用成员方法，编译看父类，运行看子类</p><p>多态的弊端：只能调用子父类共有的方法，不能调用子类特有的（因为编译时看父类，特有的编译过不了）</p><p>好处：提高灵活性，父类可以接收任何一个子类对象    传哪个子类运行哪个子类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弊端解决方案</span></span><br><span class="line"><span class="comment">//向下转型：强制类型转换double转int，父类转之类把向下和强转关联记忆吧</span></span><br><span class="line"><span class="comment">//向上转型:隐式类型转换  子类转父类（多态） 向下转换会面临不知道该转成哪个子类的困扰，易出现类型转换异常</span></span><br><span class="line"><span class="comment">//向下转型弊端解决：instanceof格式：boolean b = 父类对象名 instanceof 子类对象名</span></span><br></pre></td></tr></table></figure><h5 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h5><ul><li><p>成员内部类：定义类中方法外</p><p>在其他类中创建对象    外部类名.内部类名 对象名 = new 外部类名().new 内部类();</p></li><li><p>局部内部类：定义方法中</p><p>在其他类中无法使用，只能局部使用</p></li></ul><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>一种特殊的语法，用于快速创建抽象类的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//创建抽闲类对象</span><br><span class="line">//创建子类继承抽象类重写抽象方法new子类对象</span><br><span class="line">//用匿名内部类可以一步完成</span><br><span class="line">new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;.调用属性/方法;</span><br><span class="line"></span><br><span class="line">//最常用</span><br><span class="line">抽象类名 对象名 = new 抽象类名()&#123;</span><br><span class="line">//重写方法</span><br><span class="line">&#125;;</span><br><span class="line">//只重写抽象方法而不写独有的方法，因为没有名字，即使写了也无法向下强转为子类调用</span><br></pre></td></tr></table></figure><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//当我们使用到这个类的时候（实例化或使用静态成员等等），JVM会自动执行静态代码块中的内容</span></span><br><span class="line">        <span class="comment">//仅在第一次使用到这个类的时候会执行一次，第二次就不会了</span></span><br><span class="line">        <span class="comment">//优先级高于main和构造方法</span></span><br><span class="line">        <span class="comment">//用于初始化类，比如MySQL加载驱动等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><h5 id="static-静态的"><a href="#static-静态的" class="headerlink" title="static    静态的"></a>static    静态的</h5><p>用于修饰类中的成员    被static修饰的成员访问时无需实例化再调用，可以直接通过类名访问（推荐）</p><p>当一个对象不独属于某个成员，而是所有成员共享事应加static修饰</p><p><strong>静态没有多态性</strong>，静态属于类，而多态属于对象    多态调用静态成员时没有多态性（访问的是父类而非子类）</p><p>静态优先于对象存在</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase7.JPG" alt></p><h5 id="final-最终的"><a href="#final-最终的" class="headerlink" title="final    最终的"></a>final    最终的</h5><p>可以修饰类，成员变量，成员方法，局部变量（基本类型，引用类型）</p><p>通过最终来理解这些性质</p><blockquote><p>final修饰类——最终类：不能被继承，但可以有父类（太监类）</p><p>final修饰成员变量：该变量必需在被实例化前赋值，且只能赋值一次</p><p>final修饰成员方法：该方法不能被子类重写</p><p>final修饰的基本类型局部变量只能赋值一次</p><p>final修饰的引用类型局部变量只能赋值一次，但其所指向的对象的内容可以随意改变</p></blockquote><h5 id="类中各种成员的初始化的顺序"><a href="#类中各种成员的初始化的顺序" class="headerlink" title="类中各种成员的初始化的顺序"></a>类中各种成员的初始化的顺序</h5><blockquote><p>1.如果类中存在继承关系(像 Son 继承 Father)  则首先会初始化导出类(Son)的基类(Father)，然后再是导出类</p><p>2.在基类首先会初始化静态 的东西  静态代码块&gt;静态变量  而且只初始化一次 （因为静态的东西都是跟着类的加载而加载的）</p><p>3.随后就是初始化导出类的静态东西  跟基类的静态初始化一样（同上）</p><p>4.初始化基类无参构造器（调用有参就初始化有参构造器）</p><p>5.初始化导出类无参构造器（注意：导出类的成员变量和代码块都是是比构造函数的初始化要早。。看输出结果可知）可知）</p></blockquote><h4 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h4><p>是类层次的根类，所有类都直接或间接继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//两个重要方法</span><br><span class="line">boolean equals(Object obj);//obj中定义的是根据地址计算出的hashcode</span><br><span class="line">//string类中重写了，改为比较字符串内容,我们自己定义类也一般会重写</span><br><span class="line">String toString(Object obj)//返回该对象的字符串表示默认包名.类名@hashcode(地址)</span><br><span class="line">//system.out 打印对象会默认调用tostring    我们一般会重写这个方法</span><br></pre></td></tr></table></figure><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>java代码编译或执行过程中出现的一些问题</p><h5 id="异常的继承体系"><a href="#异常的继承体系" class="headerlink" title="异常的继承体系"></a>异常的继承体系</h5><blockquote><p>Throwable：可以抛出去的东西</p><blockquote><p>Exception：异常（普通问题）</p><blockquote><p>编译时异常：Exception及其子类（RuntimeException除外）</p><p>运行时异常：RuntimeException及其子类</p></blockquote><p>Errow：错误（严重的问题）</p></blockquote></blockquote><h5 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h5><p>异常处理：异常处理指的是一种可能性，只有当出现了异常时才会执行异常处理代码，否则正常执行</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase10.JPG" alt></p><blockquote><p>异常处理方式</p><p>不处理</p><blockquote><p>throw：动词，真正的抛出一个异常</p><p>throws：形容词，用来形容一个方法，表示该方法可能抛出的异常 要求调用者去处理它</p><p>public void 方法名（参数）throws 可能抛出的异常类型{</p><p>}</p></blockquote><p>捕获处理</p><blockquote><p>try(){</p><p>​    可能出现异常的代码</p><p>}catch(对应类型的异常对象){</p><p>​    //catch可以有多个</p><p>​    //处理异常</p><p>}finally{</p><p>​    //写上必须要执行的代码，比如释放资源等</p><p>}</p><p>一次捕获多次处理: 一个try 多个catch  (多个catch中 必须是异常子类在前,父类在后)</p><p>多次捕获多次处理: 多个try,每个try多应一个catch</p><p>一次捕获一次处理(最常用的):一个try一个catch(catch中异常类必须所有可能出现异常的父类)</p></blockquote></blockquote><p>注意事项：子类异常必须从属于父类异常  </p><p>技巧: 如何区分一个异常类 到底是编译时还是运行时异常</p><blockquote><p>1.编译时异常 在编译的时候会报错的 (需要我们去处理)</p><p>2.运行时异常 在编译的时候不会报错</p><p>只要定义一个方法,在方法中抛出一个异常对象,如果编译报错那么就是编译时异常</p><p>如果编译成功,那么就是运行时异常</p></blockquote><p>请你说出十个运行时异常:</p><blockquote><p>1.RuntimeException</p><p>2.ClassCastException:类型转换异常 (向下转型的时候)</p><p>3.ArrayIndexOutOfBoundsException:数组下标越界</p><p>4.StringIndexOutOfBoundsException:字符串下标越界</p><p>5.NullPointerException:空指针异常</p></blockquote><p>自定义异常类：</p><blockquote><p>1.创建一个类,这个类必须用Exception结尾</p><p>2.必须继承 Exception 或者 RumtimeException</p><p>3.自定义的异常 至少有两个构造</p><blockquote><p>a.空参数构造</p><p>b.带有String类型参数的构造        </p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo09_自定义异常的练习;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoSuchAgeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoSuchAgeException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//带有String的构造内部调用super(s)，将传入的string交给父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoSuchAgeException</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p>Date类:日期类    多数方法都过时了，不常用</p><p>标准时间1970年1月1日0时0分0秒</p><p>构造:</p><blockquote><p>public Date();//代表当前系统时间的Date对象</p><p>public Date(long time);//代表距离标准时间 time毫秒值的Date对象</p></blockquote><p>成员方法:</p><blockquote><p>public String toString();//Date    重写Object类的toString方法</p><p>public long getTime();//获取当前Date对象的毫米值        与public Date(long time)互逆</p></blockquote><p>DateFormat:日期格式化类,是一个抽象类</p><p>具体的子类:SimpleDateFormat</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/java12.JPG" alt></p><p>构造:</p><blockquote><p>public SimpleDateFormat(String pattern);//以指定的模式创建格式化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(yyyy年MM月dd日HH时mm分ss秒);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>成员方法:</p><blockquote><p>public String format(Date d);//把date对象按照指定的模式 转成字符串</p><p>public Date parse(String s);//把字符串转成Date对象,如果字符串有问题,就会抛出ParseException</p></blockquote><h4 id="Calendar-日历类"><a href="#Calendar-日历类" class="headerlink" title="Calendar:日历类"></a>Calendar:日历类</h4><p>获取Calendar对象</p><blockquote><p>public static Calendar getInstance();//返回的是抽象类Calendar的某一个子类</p></blockquote><p>成员方法:</p><blockquote><p>public int get(int field);//获取指定字段的值</p><p>public void add(int field,int amount);//给指定的字段增加值</p><p>public void set(int field,int value);//修改指定字段的值</p><p>public Date getTime();//把Calendar对象转成Date 对象</p><p>getTime().getTime()    相当于调用date的方法来获取毫秒值</p></blockquote><h4 id="System-系统类"><a href="#System-系统类" class="headerlink" title="System:系统类"></a>System:系统类</h4><p>该类无法思力华，被私有化了</p><blockquote><p>public static void exit(0);//结束JVM</p><p>public static void gc();//通知垃圾回收器过来收垃圾，只是通知，不一定会来</p><p>public static getProperty(String key);//根据键 获取值</p><p>public static long currentTimeMillis();//获取当前系统的毫秒值</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase13.JPG" alt></p><h4 id="Math-数学类"><a href="#Math-数学类" class="headerlink" title="Math:数学类"></a>Math:数学类</h4><p>都是些静态方法，直接调用就好</p><blockquote><p>求最大值    max</p><p>求最小值     min</p><p>求绝对值    abs</p><p>求随机数      random    返回一个[0,1)之间的数，通过简单计算得到自己想要的范围</p><p>求四舍五入    </p><p>ceil(向上取整) </p><p>floor(向下取整) </p><p>pow(求次幂)</p></blockquote><h4 id="基类数据类型包装类"><a href="#基类数据类型包装类" class="headerlink" title="基类数据类型包装类"></a>基类数据类型包装类</h4><p>八种基本类对应的包装类型</p><blockquote><p>byte    boolean    short    char    int    float    double    long</p><p>Byte    Boolean    Short    Character    Interger    Float    Double    Long</p></blockquote><p>作用</p><blockquote><p>在集合中只允许存储包装类型，不可以存基本类型</p><p><strong>实现字符串的转换</strong>   public static int parseInt(String s);    将字符串转为int，其它基本类型类比即可</p></blockquote><p>自动拆箱装箱</p><blockquote><p>装箱：基本类型-&gt;包装类型    </p><p>拆箱：包装类型-&gt;基本类型</p></blockquote><blockquote><p>哪些数据类型 重写了toString()</p><p>1.String类</p><p>2.保存数据的引用类型 (Integer,Double…,集合,map)</p><p>3.自定义类 可以重写toString  </p></blockquote><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>所有编程语言都支持，用来匹配字符串的</p><p>boolean b = 普通字符串  匹配  正则表达式</p><blockquote><p>public boolean matches(String regex);</p><p>boolean b = “普通字符串”.matches(“正则表达式”);</p></blockquote><blockquote><p>public String[] split(String regex);        切割字符串,返回切割后的字符串数组</p></blockquote><p>书写技巧：一位一位的匹配</p><p>通配符</p><blockquote><p>正则表达式中 “.”代表任意字符</p><p>在DOS中 “*”代表任意内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * QQ号码需要满足的规则:</span></span><br><span class="line"><span class="comment"> * 1.必须是0-9的数字</span></span><br><span class="line"><span class="comment"> * 2.开头必须1-9中的一个数字</span></span><br><span class="line"><span class="comment"> * 3.位数必须 5-12位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qq</span><span class="params">()</span></span>&#123;</span><br><span class="line">String qq = <span class="string">"12355a63564"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = qq.matches(<span class="string">"[1-9][0-9]&#123;4,11&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 举例：校验手机号码</span></span><br><span class="line"><span class="comment"> * 1：要求为11位0-9的数字</span></span><br><span class="line"><span class="comment"> * 2：第1位为1，第2位为3、4、5、7、8中的一个，后面9位为0到9之间的任意数字。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">phone</span><span class="params">()</span></span>&#123;</span><br><span class="line">String phone = <span class="string">"18600363521"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = phone.matches(<span class="string">"1[34578][0-9]&#123;9&#125;"</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 案例:切割电话</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String phone = <span class="string">"2345--4564----6546-----1345"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切割phone  把号码切割出来</span></span><br><span class="line"><span class="comment">//+号 在正则表达式中有特殊意义,表示连续的多个相同的字符</span></span><br><span class="line">String[] phones = phone.split(<span class="string">"-+"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; phones.length; i++) &#123;</span><br><span class="line">System.out.println(phones[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:切割ip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split02</span><span class="params">()</span></span>&#123;</span><br><span class="line">String ip = <span class="string">"192...168....123......110"</span>;</span><br><span class="line"><span class="comment">//"."号 在正则表达式中 表示 任意字符</span></span><br><span class="line"><span class="comment">//转译字符</span></span><br><span class="line"><span class="comment">//\t</span></span><br><span class="line"><span class="comment">//\n</span></span><br><span class="line">String[] ips = ip.split(<span class="string">"\\.+"</span>);<span class="comment">//在正则表达式中 "\\" 代表一个"\"</span></span><br><span class="line">System.out.println(ips.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ips.length; i++) &#123;</span><br><span class="line">System.out.println(ips[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String中的方法（4532）"><a href="#String中的方法（4532）" class="headerlink" title="String中的方法（4532）"></a>String中的方法（4532）</h4><h5 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIngoreCase</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> startIndex)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> startIndex,<span class="keyword">int</span> endIndex)</span></span>;<span class="comment">//左闭右开</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexof</span><span class="params">(String subStr)</span></span>;<span class="comment">//少用</span></span><br></pre></td></tr></table></figure><h5 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span>；</span></span><br></pre></td></tr></table></figure><h5 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span></span>;<span class="comment">//去掉两端空格</span></span><br><span class="line">String[] split(String str);<span class="comment">//一某一个字符串来分割字符串</span></span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合框架:</p><blockquote><p>List–&gt; ArrayList,LinkedList,Vector</p><p>Set –&gt; HashSet,LinkedHashSet,TreeSet</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase14.JPG" alt></p><h5 id="Collection接口中的公共方法"><a href="#Collection接口中的公共方法" class="headerlink" title="Collection接口中的公共方法:"></a>Collection接口中的公共方法:</h5><p>子类不是都有下标，所有Collection无下标，故而无法进行改查操作</p><blockquote><p>增: add(E e);</p><p>删: remove(Object obj);</p><p>改: 无</p><p>查: 无</p><p>其他:</p><blockquote><p>int size();//长度</p><p>boolean contains(Object obj);</p><p>void clear();//清空</p><p>Object[] toArray();    //集合转换成数组</p></blockquote></blockquote><p>在ArrayList中 有一个方法  </p><p>addAll(Collection c);//把集合c里面的每一个元素添加到ArrayList中</p><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>在Collection根解扣子中定义一种公共的遍历方式:迭代器遍历</p><p>Iterator&lt;泛型和集合的一样&gt; it = 集合对象.iterator();    底层类似链表</p><p>迭代器对象 有两个方法:</p><blockquote><p>hasNext();//判断有没有下一个</p><p>next();//取出下一个</p></blockquote><p><strong>以上两个方法必须配合使用</strong></p><p>补充</p><blockquote><p>Concurrent(并发)Modification(修改)Exception</p><p>java规定,如果一个集合使用迭代器遍历,那么在遍历的过程中 <strong>不允许修改集合的长度(</strong>增加或者删除)</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase15.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个集合对象,使用多态</span></span><br><span class="line">Collection&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//2.添加</span></span><br><span class="line">names.add(<span class="string">"郭德纲"</span>);</span><br><span class="line">names.add(<span class="string">"刘德华"</span>);</span><br><span class="line">names.add(<span class="string">"柳岩"</span>);</span><br><span class="line">names.add(<span class="string">"范伟"</span>);</span><br><span class="line">names.add(<span class="string">"范伟1"</span>);</span><br><span class="line"><span class="comment">//3.获取names集合的迭代器对象</span></span><br><span class="line">Iterator&lt;String&gt; it = names.iterator();</span><br><span class="line"><span class="comment">//4.标准代码</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;<span class="comment">//反复判断有没有下一个元素</span></span><br><span class="line">String s = it.next();<span class="comment">//如果有取出下一个元素</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h5><p>增强for循环比普通的for循环增强在哪?</p><blockquote><p>增强在语法上更加简单</p></blockquote><p>格式:</p><blockquote><p>for(数据类型 变量名:数组/集合){</p><p>syso(变量名);</p><p>}</p></blockquote><p>注意:</p><blockquote><p>当你使用增强for循环遍历集合的时候</p><p>底层采用的是迭代器    </p></blockquote><p>总结: </p><blockquote><p>当你使用增强for循环遍历集合的时候,不能修改集合的长度</p></blockquote><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>泛泛的类型,不确定的类型，类型参数化</p><p>格式:</p><blockquote><p><e>,&lt;K,V&gt;</e></p></blockquote><p>好处</p><blockquote><p>避免了强制类型转换</p><p>将运行时的ClassCsatException变为了编译错误</p></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/java16.JPG" alt></p><p>泛型通配符</p><blockquote><p>?:代表任意类型</p><p>&lt;? extends Animal&gt; : 表示一种泛型,这种泛型必须是Animal 或者Animal的子类</p><p>&lt;? super Animal&gt;:表示一种泛型,这种泛型必须是Animal  或者Animal的父类</p></blockquote><p>泛型可以用在类上，方法上，接口上</p><blockquote><p>泛型用在类上: 泛型类</p><blockquote><p>格式:public class 类名<e></e></p><p>当你创建该类的对象的时候,就可以确定</p></blockquote><p>泛型用在方法上:泛型方法</p><blockquote><p>格式:public <t> 返回值类型 方法名(T t);</t></p><p>当你调用方法,传递参数的时候确定</p></blockquote><p>泛型用在接口上:泛型接口</p><blockquote><p>格式:public interface 接口名<e>    </e></p><p>1.实现类实现接口的时候,直接确定</p><p>2.实现类实现接口的时候,不确定泛型,而是直接把泛型继承下来,当这个实现类创建对象的时候确定</p></blockquote></blockquote><h5 id="堆栈和队列"><a href="#堆栈和队列" class="headerlink" title="堆栈和队列"></a>堆栈和队列</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase18.JPG" alt></p><h5 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase19.JPG" alt></p><h5 id="list接口"><a href="#list接口" class="headerlink" title="list接口"></a>list接口</h5><p>List接口的特点:</p><blockquote><p>a.有下标</p><p>b.有序的(有序不是自然顺序,不是123,abc,有序指的是存和取的顺序一致)</p><p>c.可重复</p></blockquote><p>实现类:ArrayList,LinkedList,Vector</p><blockquote><p>ArrayList:底层采用数组结构,查询快,增删慢</p><p>LinkedList:底层采用链表结构,查询慢,增删快</p><p>Vector:底层采用数组结构,查询快,增删慢（基本不用）</p></blockquote><p>List结构中具有的方法:</p><blockquote><p>增: add(E e);add(int index,E e);</p><p>删: remove(Object obj);remove(int index);</p><p>改: set(int index,E e);</p><p>查: get(int index);</p><p>其他:</p><p>size(),clear(),contains(Object obj),toArray()</p><p>iterator();isEmpty()</p></blockquote><p>实现类的方法:</p><blockquote><p>1.ArrayList:方法基本和List中定义的一模一样</p><p>2.LinkedList:除了和List接口中一样的方法之外</p><p>LinkedList提供了大量首位操作的方法</p><blockquote><p>第一组:</p><p>void addFirst(E e);</p><p>void addLast(E e);</p><p>第二组:</p><p>E removeFirst();//删除首个元素,返回被删除的元素</p><p>E removeLast();//删除尾部元素,返回被删除的元素</p><p>第三组:</p><p>E getFirst();</p><p>E getLast();</p><p>第四组:</p><p>E pop();//弹出,删除集合中的某一个元素,和 removeFirst功能是一样的</p><p>void push(E e);//推入,把一个元素添加到集合中, 和addFist功能是一样的</p></blockquote></blockquote><h5 id="set接口"><a href="#set接口" class="headerlink" title="set接口"></a>set接口</h5><p>Set接口的特点:</p><blockquote><p>a.无下标</p><p>b.无序的(无序指的是存和取的顺序不一定一致,LinkedHashSet和TreeSet除外)</p><p>c.不可重复</p></blockquote><p>实现类:HashSet,LinkedHashSet,TreeSet</p><blockquote><p>HashSet:底层采用哈希表结构,查询快,增删快,无序的</p><p>LinkedHashSet:底层采用 链表+哈希表,查询快,增删快,有序的</p></blockquote><p>Set接口中的特有方法: 没有,和父接口Collection基本一模一样</p><p>实现类:HashSet和LinkedHashSet中的方法基本和Set接口一模一样</p><p><strong>对象的哈希值:</strong></p><blockquote><p>任何对象,都有一个哈希值,哈希值是对象的一个数字表示</p><p>对象的字符串表示,toString方法,默认表示格式:包名.类名@地址值</p><p>如果获取对象的哈希值?</p><p>每一个对象都有一个方法,hashCode方法,这方法定义在了Object类中,所以每个对象都具有</p><p>我们以前说的地址值,实际上根本不是地址值,而是哈希值的16进制</p><p>在java中怎么看真正地址值? 看不了</p><p>哈希值的由来</p><blockquote><p>是由真正的地址值计算的,通过一种散列算法(哈希算法)</p><p>所以 一般来说 地址值 不一样, 哈希值也是不一样的</p><p>不可逆算法(MD5,WPA2)</p><p>碰撞算法(一个一个试)</p><p>暴力破解&amp;字典破解(破解wifi教程)</p></blockquote><p>字符串的哈希值:</p><blockquote><p>由于String类重写了HashCode  那么哈希值不在通过地址值计算</p><p>我们观察源码,发现通过字符串的内容计算,所以只要字符串内容相同,哈希值必定相同</p><p>思考:</p><p>只要字符串内容一样,哈希值 必定一样</p><p>两个字符串的内容不一样,哈希值可能一样</p><p>比如: abc 和 acD</p></blockquote></blockquote><p><strong>哈希表结构:</strong></p><blockquote><blockquote><p>数组结构+链表结构的组合,查询快,增删快</p><p>HashSet:采用了哈希表结构</p><p>LinkedHashSet:采用了链表+哈希表结构</p></blockquote><p>哈希表结构,判断元素是否重复的原理:</p><blockquote><p>1.先判断 新元素的哈希值 和 所有旧元素的哈希值是否相同</p><p>如果都不相同,直接判断不重复,添加</p><p>2.再调用  新元素 和  哈希值相同的旧元素的equals方法</p><p>如果返回是true 判定重复元素 ,不添加</p><p>如果返回是false 判定不重复,添加</p></blockquote><p>总结:</p><blockquote><p>只有哈希值相同,并且equals返回true,才判定重复</p></blockquote></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase20.JPG" alt></p><blockquote><p>判断元素重复不重复的原理:</p><blockquote><p>1 比较哈希值</p><p>2 调用equals方法</p><p>只有 哈希值相同,并且equals方法true,才是重复元素,才不存储</p></blockquote><blockquote><p>contains方法,判断是否包含某一个元素</p><blockquote><p>ArrayList的contains方法:</p><p>names.contains(“abc”);//判断 names集合中是否包含 “abc”</p><p>只比较 equals的返回值,如果某一个元素和要判断的元素equals方法true,那么就是包含该元素</p></blockquote><p>HashSet的contains方法:</p><blockquote><p>set.contains(“abc”);//</p><p>先判断哈希值</p><p>再使用equals方法</p><p>只有旧元素和判断的元素 的哈希值相同 并且 euqals方法true 才判定包含</p></blockquote></blockquote></blockquote><p><strong>使用HashSet存储自定义元素(Dog对象)</strong></p><blockquote><p>结论:</p><p>如果我们<strong>自定义了类</strong> 要使用HashSet存储</p><p>如何保证元素的唯一性:</p><p>必须重写自定义类的两个方法,hashCode和equals</p><p>定义一个标准的类:</p><blockquote><p>1.封装(private+get/set)</p><p>2.构造(无参+全参)</p><p>3.toString(快速打印对象信息)</p><p>4.hashCode和equals(保证元素使用哈希表结构存储时的唯一性)</p></blockquote></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><h5 id="Map集合的特点"><a href="#Map集合的特点" class="headerlink" title="Map集合的特点:"></a>Map集合的特点:</h5><blockquote><p>1.Map集合 和 Collection集合 没有继承关系,所以不能直接用迭代器</p><p>2.Collection集合 每一个元素都是单独存在</p><p>Map集合的每一个元素都是成对存在的</p><p>3.Collection<e>一个泛型</e></p><p>Map&lt;K,V&gt;两个泛型, K代表键的类型,V代表值的类型</p><p>K,V可以相同  也可以不同,必须都是引用类型</p><p>4.在Map集合的元素中,<strong>键是唯一的,</strong>值是可以重复的</p><p>5.常用的实现类:</p><p>HashMap:无序</p><p>底层哈希表结构,保证键的唯一性<strong>,需要重写键对应类的hashCode和equals方法</strong></p><p>LinkedHashMap:有序</p><p>底层哈希表结构+链表,哈希表保证键的唯一,链表保证元素的有序</p><p>需要重写键对应类的hashCode和equals方法</p></blockquote><h5 id="Map-lt-K-V-gt-集合常用的方法"><a href="#Map-lt-K-V-gt-集合常用的方法" class="headerlink" title="Map&lt;K,V&gt;集合常用的方法:"></a>Map&lt;K,V&gt;集合常用的方法:</h5><blockquote><p>增: V put(K key,V value);//向集合中添加键值对</p><p>//如果集合中已存在该键,覆盖整个键值对,并返回被覆盖的键值对的值        </p><p>删: V remove(OBject key);//根据键 从map集合中删除 键值对,返回值表示被删除的键值对的值</p><p>改: 隐藏到了put方法</p><p>查: V get(K key);//根据键 从map集合中找到唯一对应的值</p></blockquote><h5 id="Map集合第一种遍历方法-以键找值"><a href="#Map集合第一种遍历方法-以键找值" class="headerlink" title="Map集合第一种遍历方法:以键找值"></a>Map集合第一种遍历方法:以键找值</h5><blockquote><p>1.先获取map集合的键的集合,这个集合是一个Set集合</p><p>Set<k> keys = map集合.keySet();</k></p><p>2.遍历keys集合    </p><p>a.foreach b.迭代器</p><p>3.在遍历的过程中,从map集合获取键对应的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取map的键的集合</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"><span class="comment">//4.遍历keys这个集合,获取到每一个键</span></span><br><span class="line"><span class="comment">//4.1迭代器遍历</span></span><br><span class="line">Iterator&lt;String&gt; it = keys.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"> String key = it.next();</span><br><span class="line"> <span class="comment">//根据key 从map集合中查找 对应值</span></span><br><span class="line"> String value = map.get(key);</span><br><span class="line"> <span class="comment">//打印</span></span><br><span class="line"> System.out.println(key+<span class="string">":"</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase21.JPG" alt></p><h5 id="map集合第二种遍历-：键值对遍历"><a href="#map集合第二种遍历-：键值对遍历" class="headerlink" title="map集合第二种遍历 ：键值对遍历"></a>map集合第二种遍历 ：键值对遍历</h5><blockquote><p>1.获取map集合中所有 结婚证对象</p><p>Set&lt;Map.Entry&lt;K,V&gt;&gt; set = map集合.entrySet();</p><p>2.遍历这个set集合,获取每一个Map.Entry类型的对象</p><p>a.迭代器 b.foreach</p><p>3.获取到 Map.Entry类型的对象之后</p><p>K key = entry.getKey();</p><p>V value = entry.getValue();</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取所有键值对关系对象的集合</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="comment">//4.遍历 这个entry集合, 拿出每一个结婚证对象</span></span><br><span class="line"><span class="comment">//使用迭代器遍历</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = entrySet.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line"><span class="comment">//获取这个entry中的 键和值</span></span><br><span class="line">String key = entry.getKey();</span><br><span class="line">String value = entry.getValue();</span><br><span class="line">System.out.println(key+<span class="string">"="</span>+value);</span><br></pre></td></tr></table></figure><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase22.JPG" alt></p><p><strong>回顾：内部类和内部接口</strong></p><blockquote><p>内部类:</p><p>一个类A,定义在另外一个类B 的内部,这个类A 这个类被称为内部类</p><p>OuterClass.InnerClass ic = new OuterClass().new InnerClass();</p><p>内部接口:</p><p>一个接口A,定义在另外一个接口B的内部,这个接口A, 这个接口A被称为内部接口</p><p>class Class2 implements OuterInter.InnerInter    只重写内部类中的方法即可</p></blockquote><h5 id="使用map存储自定义类型"><a href="#使用map存储自定义类型" class="headerlink" title="使用map存储自定义类型"></a>使用map存储自定义类型</h5><p>使用map存储:键为学号,值为一个学生的对象, 学生对象有属性（姓名，年龄）</p><p>使用map存储:键为学生（姓名，年龄）值为学生自己的家庭住址。</p><p>结论:</p><p>如果Map中的键是自定义类型,那么要保证键的唯一性,必须重写键对应类的hashCode和equals方法</p><h4 id="Properties属性集"><a href="#Properties属性集" class="headerlink" title="Properties属性集"></a>Properties属性集</h4><p>在开发中Map集合可能用到,但是Properties属性集,1000%会用到</p><h5 id="Properties类到底是什么"><a href="#Properties类到底是什么" class="headerlink" title="Properties类到底是什么?"></a>Properties类到底是什么?</h5><p>属性集,</p><p>class Propeties extends HashTable implements Map</p><p>所以:Properties本质上 就是一个Map集合</p><p>Properties是一个持久的属性集</p><p>所谓持久 就是 它具有自己写数据到文件的方法</p><p>Properties是没有泛型,泛型是固定,String 和 String</p><h5 id="Properties类-具有Map接口的一切方法"><a href="#Properties类-具有Map接口的一切方法" class="headerlink" title="Properties类,具有Map接口的一切方法"></a>Properties类,具有Map接口的一切方法</h5><blockquote><p>还有具有一些自己特有的方法:</p><blockquote><p>public String getProperty(String key)用指定的键在此属性列表中搜索属性的值,功能和Map中的get是一样</p><p>public Object setProperty(String key, String value);添加键值对,功能和Map的put方法是一样</p><p>public Set<string> stringPropertyNames()://和Map中的keySet方法是一样</string></p></blockquote><p>Properties具有持久化到文件的功能</p><blockquote><p>store();//保存数据到文件,实际上不是保存到文件 而是写入到流中,由流写到文件</p><p>load();//从文件中加载数据,实际上不是直接加载文件,而是加载流中的数据,而流的数据是从该文件中读取的</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//和Properties持久化有关的方法</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//从文件中读取数据</span></span><br><span class="line">ps.load(<span class="keyword">new</span> FileReader(<span class="string">"phones.properties"</span>));</span><br><span class="line">System.out.println(ps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Properties持久化数据到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writePs</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//1.定义Properties</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">ps.setProperty(<span class="string">"iphoneX"</span>, <span class="string">"8888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"xiaomiMix"</span>, <span class="string">"3888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"huaweiMate11"</span>, <span class="string">"6888"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"vivoX20"</span>, <span class="string">"1888"</span>);</span><br><span class="line"><span class="comment">//2.把ps的数据持久化到文件中</span></span><br><span class="line">ps.store(<span class="keyword">new</span> FileWriter(<span class="string">"phones.properties"</span>), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建一个Properties对象</span></span><br><span class="line">Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//2.添加数据</span></span><br><span class="line">ps.setProperty(<span class="string">"张三"</span>, <span class="string">"18"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"李四"</span>, <span class="string">"28"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"王五"</span>, <span class="string">"38"</span>);</span><br><span class="line">ps.setProperty(<span class="string">"前妻"</span>, <span class="string">"48"</span>);</span><br><span class="line"><span class="comment">//3.遍历</span></span><br><span class="line"><span class="comment">//1.stringPropertyNames 就是keySet</span></span><br><span class="line">Set&lt;String&gt; propertyNames = ps.stringPropertyNames();</span><br><span class="line"><span class="comment">//4.遍历</span></span><br><span class="line"><span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line"><span class="comment">//根据属性名 propertyName获取属性值</span></span><br><span class="line">String propertyValue = ps.getProperty(propertyName);</span><br><span class="line">System.out.println(propertyName+<span class="string">"="</span>+propertyValue); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h4><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>说的不是参数类型可变,而是<strong>参数的个数</strong>可以变化</p><p>语法: JDK1.5 出现新特性</p><p>public 返回值类型 方法名(数据类型… 参数名){}</p><p>注意:</p><blockquote><p>1.可变参数只是参数的个数是任意个,参数的类型不能改变    </p><p>2.一个方法中 只能有一个可变参数</p><p>3.当一个方法中有多个参数,并且有一个是可变参数的时候,要求这个可变参数必须在最后</p></blockquote><p>可变参数的<strong>本质</strong>: 就是一个数组</p><h5 id="Collections中的静态方法"><a href="#Collections中的静态方法" class="headerlink" title="Collections中的静态方法:"></a>Collections中的静态方法:</h5><blockquote><p>public static void shuffle(List list);//打乱顺序</p><p>public static void sort(List list);//把集合元素按照自然顺序(123,abc)排序</p></blockquote><p>Arrays:数组工具类</p><blockquote><p>public static List asList(数组/可变参数);//把一个数组 转成List集合</p><p>public static void sort(数组);//排序数组</p><p>public static String toString(数组);//把数组转成字符串</p></blockquote><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><blockquote><p>递归:是一个通用技术,所有的编程语言,只要有方法概念的编程语言都具有递归</p><p>什么叫递归:在一个方法的内部,再调用方法本身</p><p>无限递归本身是错误的:因为方法运行需要进栈,而栈空间不是无限大的</p><p>使用递归的前提****:</p><p>1.必须有一个可以是递归结束的出口</p><p>2.递归的次数,不能太多(具体的次数不好确定,与内存,CPU…都有关)</p><p>我们建议在开发中 能不用递归 就是不要用</p><p>急剧消耗内存(最常见是杀毒软件 扫描硬盘)</p><p>递归的其他分类:</p><p>直接递归:</p><p>在A方法的内部 直接调用A方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//定义一个方法,求1-n的和先想一下基于n-1步如何解决</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt; <span class="comment">//1+2+3...n = (1+2+3..n-1)+n</span></span><br><span class="line">&gt; <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">&gt; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> getSum(n-<span class="number">1</span>)+n;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//求1-n的和常用</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt; <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">&gt; sum+=i;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> sum;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">&gt;          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;      <span class="keyword">return</span> getSum2(n - <span class="number">2</span>) + n;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>间接递归:</p><p>在A方法的内部调用B方法,在B方法的内部调用C方法,在C方法的内部调用A方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">package</span> com.guardwarm.递归;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//定义方法  求 n个式子的和</span></span><br><span class="line">&gt; <span class="comment">//n=5</span></span><br><span class="line">&gt; <span class="comment">//1+(1+2)+(1+2+3)+(1+2+3+4)+(1+2+3+4+5)</span></span><br><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">undirectDiGui</span> </span>&#123;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;         System.out.println(<span class="string">"please enter a num"</span>);</span><br><span class="line">&gt;         Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">&gt;         <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">&gt;         <span class="keyword">int</span> sum = getsum(n);</span><br><span class="line">&gt;         System.out.println(sum);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;         <span class="keyword">return</span> getsum(n-<span class="number">1</span>)+zigetsum(n);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zigetsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;         <span class="keyword">return</span> zigetsum(n-<span class="number">1</span>)+n;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase23.bmp" alt></p><h4 id="斗地主案例"><a href="#斗地主案例" class="headerlink" title="斗地主案例"></a>斗地主案例</h4><h5 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase17.JPG" alt></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.斗地主;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 斗地主步骤:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.创建编号和牌对应的map集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.准备一副牌(54个数字1-54)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.洗牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.发牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5.排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 6.从map集合查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 7.看牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">doudizhuMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一副牌</span></span><br><span class="line">        Map&lt;Integer,String&gt; allcard = <span class="keyword">new</span> LinkedHashMap&lt;Integer, String&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; cards = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; p3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; dp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String num : nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String color : colors)&#123;</span><br><span class="line">                String card = num+ color;</span><br><span class="line">                allcard.put(id,card);</span><br><span class="line">                cards.add(id);</span><br><span class="line">                id++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        allcard.put(id,<span class="string">"大S"</span>);</span><br><span class="line">        cards.add(id);</span><br><span class="line">        id++;</span><br><span class="line">        allcard.put(id,<span class="string">"小S"</span>);</span><br><span class="line">        cards.add(id);</span><br><span class="line">        id++;</span><br><span class="line">        Collections.shuffle(cards);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line"><span class="comment">//        System.out.println(cards);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cards.size(); ++i) &#123;</span><br><span class="line">            Integer cd = cards.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">51</span>) &#123;</span><br><span class="line">                dp.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                p1.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                p2.add(cd);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                p3.add(cd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(p1);</span><br><span class="line">        Collections.sort(p2);</span><br><span class="line">        Collections.sort(p3);</span><br><span class="line">        Collections.sort(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*        System.out.println(p1);</span></span><br><span class="line"><span class="comment">        System.out.println(p2);</span></span><br><span class="line"><span class="comment">        System.out.println(p3);</span></span><br><span class="line"><span class="comment">        System.out.println(dp);*/</span></span><br><span class="line">        outputcard(p1,allcard);</span><br><span class="line">        outputcard(p2,allcard);</span><br><span class="line">        outputcard(p3,allcard);</span><br><span class="line">        outputcard(dp,allcard);</span><br><span class="line">       <span class="comment">/* Collections.sort(cards);</span></span><br><span class="line"><span class="comment">        System.out.println(cards);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputcard</span><span class="params">(ArrayList&lt;Integer&gt; ls,Map&lt;Integer,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Integer cardid:ls)&#123;</span><br><span class="line">            String card = map.get(cardid);</span><br><span class="line">            System.out.print(card+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IO流-读写文件"><a href="#IO流-读写文件" class="headerlink" title="IO流_读写文件"></a>IO流_读写文件</h4><p>（输入输出是相对程序而言的）</p><p>输出流：数据从java程序到文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileWriter:文件的字符输出流，写数据(一个字符，一个字符串，一个字符数组)</span></span><br><span class="line">write(<span class="keyword">int</span> ch);<span class="comment">//可以写ascll码值</span></span><br><span class="line">write(<span class="keyword">char</span>[] ch);</span><br><span class="line">write(<span class="keyword">char</span>[] ch,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len);</span><br><span class="line">write(String s);</span><br><span class="line">write(String s,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len);</span><br></pre></td></tr></table></figure><p>输入流：数据从文件到java程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileWriter:文件的字符输出流，写数据(一个字符，一个字符串，一个字符数组)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;<span class="comment">//读取一个字符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>;<span class="comment">//读取一个字符数组，返回值表示读取到的字符个数</span></span><br></pre></td></tr></table></figure><h4 id="File类"><a href="#File类" class="headerlink" title="File类:"></a>File类:</h4><p><strong>描述:文件和 目录路径名的抽象表示</strong></p><blockquote><p>文件:可以直接保存数据</p><p>目录路径名:文件夹,分类管理文件</p><p>结论:File类可以表示文件 也可以表示文件夹</p></blockquote><p><strong>构造:</strong></p><p>public File(String filepath);</p><p>绝对路径:以盘符开头的路径</p><p>相对路径:相对当前项目的根目录</p><p><strong>File对象的获取方法:</strong></p><blockquote><p>1.public String getAbsolutePath();//获取绝对路径</p><p>2.public String getName()//获取当前File对象的名字</p><p>3.public String getPath();//获取创建File对象时 传递的路径</p><p>4.public long length();//获取表示文件的File对象的占用的字节数,如果是文件夹的File对象,返回值不确定</p></blockquote><p><strong>File对象的删除和创建方法:</strong></p><p>1.创建方法:</p><blockquote><p>创建文件:</p><p>public boolean createNewFile();//创建一个新的文件(只能是文件,不能是文件夹),返回是否创建成功</p><p>创建文件夹</p><p>public boolean mkdir();//创建一个新的文件夹,返回是否创建成功</p><p>public boolean mkdirs();//可以一次性创建多层文件夹</p></blockquote><p>2.判断方法:</p><blockquote><p>判断是否是文件</p><p>public boolean isFile();//返回是否是文件</p><p>判断是否是文件夹</p><p>public boolean isDirectory();//返回是否是文件夹</p><p>判断文件或者文件夹是否存在,是前面两个前提</p><p>public boolean exists();//返回该File 对象是否存在</p></blockquote><p>3.删除方法:</p><blockquote><p>public boolean delete();//删除文件或者文件夹</p><p>可以删除的是单个文件,或者空文件夹</p></blockquote><p>File类的list和listFiles方法</p><blockquote><p>1.public String[] list();</p><p>2.public File[] listFiles();</p><p>注意:</p><p>只能列出当前文件夹下的一级子文件或者子文件夹，那个对象必须存在且是文件夹才可以调用</p></blockquote><p><strong>案例：使用递归遍历使用文件夹</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用递归遍历 一个文件夹aaa下的所有文件(包括一级的也包括n级文件)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.定义方法,遍历一个文件夹下的所有文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.在方法中判断 某一个File对象 ,如果是文件 直接打印</span></span><br><span class="line"><span class="comment"> * 如果不是文件,递归调用第1步定义的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiguiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.创建aaa文件夹的File 对象</span></span><br><span class="line">File aaa = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\yingpeng\\Desktop\\aaa"</span>);</span><br><span class="line"><span class="comment">//2.调用方法 列出 aaa下的所有文件</span></span><br><span class="line">printFiles(aaa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个方法:列出一个文件夹下的文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFiles</span><span class="params">(File objFileDir)</span></span>&#123;</span><br><span class="line"><span class="comment">//2.列出aaa文件夹下的所有File 对象</span></span><br><span class="line">File[] files = objFileDir.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line"><span class="comment">//判断是否是文件 或者 文件夹</span></span><br><span class="line"><span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//是文件夹.列出该文件夹下的所有东西</span></span><br><span class="line">printFiles(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文件过滤器:FileFilter</strong></p><p>在list和listFiles方法中使用，用来过滤文件，有多少个文件就会执行多少次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFileFilter</span> <span class="keyword">implements</span> <span class="title">FileFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">".."</span>);<span class="comment">//用来看这个方法执行了多少次</span></span><br><span class="line"><span class="keyword">if</span>(pathname.getName().endsWith(<span class="string">".PNG"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：map集合嵌套遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:</span></span><br><span class="line"><span class="comment"> * 需要定义一个Map集合,保存学生的学号和他对应的名字</span></span><br><span class="line"><span class="comment"> * Map&lt;String,String&gt;</span></span><br><span class="line"><span class="comment"> * JavaEE:</span></span><br><span class="line"><span class="comment"> * heima001  张三</span></span><br><span class="line"><span class="comment"> * heima003 李四</span></span><br><span class="line"><span class="comment"> * heima005 王五</span></span><br><span class="line"><span class="comment"> * UI:</span></span><br><span class="line"><span class="comment"> * heima001 小丽</span></span><br><span class="line"><span class="comment"> * heima004 小红</span></span><br><span class="line"><span class="comment"> * heima005 小美</span></span><br><span class="line"><span class="comment"> * PHP:</span></span><br><span class="line"><span class="comment"> * heima002 小黑</span></span><br><span class="line"><span class="comment"> * heima003 小白</span></span><br><span class="line"><span class="comment"> * heima006 小猪</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapQianTao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义所需map</span></span><br><span class="line">        Map&lt;String,String&gt; eeMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,String&gt; uiMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,String&gt; phpMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String,Map&lt;String,String&gt;&gt; outMap = <span class="keyword">new</span> HashMap&lt;String, Map&lt;String, String&gt;&gt;();</span><br><span class="line">        eeMap.put(<span class="string">"heima001"</span>,<span class="string">"张三"</span>);</span><br><span class="line">        eeMap.put(<span class="string">"heima003"</span>,<span class="string">"李四"</span>);</span><br><span class="line">        eeMap.put(<span class="string">"heima005"</span>,<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">        uiMap.put(<span class="string">"heima001"</span>,<span class="string">"小丽"</span>);</span><br><span class="line">        uiMap.put(<span class="string">"heima004"</span>,<span class="string">"小红"</span>);</span><br><span class="line">        uiMap.put(<span class="string">"heima005"</span>,<span class="string">"小美"</span>);</span><br><span class="line"></span><br><span class="line">        phpMap.put(<span class="string">"heima002"</span>,<span class="string">"小黑"</span>);</span><br><span class="line">        phpMap.put(<span class="string">"heima004"</span>,<span class="string">"小白"</span>);</span><br><span class="line">        phpMap.put(<span class="string">"heima005"</span>,<span class="string">"小猪"</span>);</span><br><span class="line"></span><br><span class="line">        outMap.put(<span class="string">"javaee"</span>,eeMap);</span><br><span class="line">        outMap.put(<span class="string">"ui"</span>,uiMap);</span><br><span class="line">        outMap.put(<span class="string">"php"</span>,phpMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先通过entrySet获取Set，然后再用set获取迭代器开始遍历</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Map&lt;String,String&gt;&gt;&gt; outSet = outMap.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Map&lt;String,String&gt;&gt;&gt; outit = outSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (outit.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Map&lt;String,String&gt;&gt; outEntry = outit.next();</span><br><span class="line">            String outKey = outEntry.getKey();</span><br><span class="line">            <span class="comment">//由于值是map，所以内部还得再遍历</span></span><br><span class="line">            Map&lt;String,String&gt; outvalue = outEntry.getValue();</span><br><span class="line">            System.out.println(outKey);</span><br><span class="line">            Set&lt;String&gt; mapKeys = outvalue.keySet();</span><br><span class="line">            <span class="keyword">for</span>(String key:mapKeys)&#123;</span><br><span class="line">                String mapValue = outvalue.get(key);</span><br><span class="line">                System.out.println(mapValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><p>根据流的流向分类:</p><blockquote><p>Input:输入流</p><p>Output:输出流</p></blockquote><p>根据流操作的数据来分类</p><blockquote><p>字符流: 操作字符    只能操作普通文本文件,</p><p>​        最常见的文本文件:.txt,.java,.c,.cpp等其他语言的源代码</p><p>​        只要用文本工具(记事本,notepad++,editplus) 可以打开的 ,而且打开后我们人类能看懂的 都是文本文件</p><p>​        注意:我们用的.doc,excel,ppt这些不是文本文件</p><p>字节流: 操作字节</p><p>​        能操作一切文件(文本文件,.mp3,视频.avi,.rmvb,mp4,doc,excel,ppt)</p></blockquote><p>java中的四大流:</p><blockquote><p>字符输入流:共同父类 Reader   比如:FileReader,BufferedReader</p><p>功能:读取一个字符,读取一个字符数组</p><p>字符输出流:共同的父类 Writer    比如:FileWriter BufferedWriter</p><p>功能:写一个字符,写一个字符数组(一部分),写一个字符串</p><p>字节输入流:共同父类 InputStream  比如:FileInputStream,BufferedInputStream</p><p>功能:读取一个字节,读取一个字节数组</p><p>字节输出流:共同父类 OutputStream 比如:FileOutputStream,BufferedOutputStream</p><p>功能:写一个字节,写一个字节数组(一部分)</p></blockquote><p>只要是输入流   此流的方法名 一定叫做 read</p><p>只要是输出流  此流的方法名 一定叫做 write</p><p>java中流的命名是十分规范的:    <strong>功能+父类的名字（4种）</strong></p><h5 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream:"></a>OutputStream:</h5><p>字节输出流的根类,这是一个抽象类</p><blockquote><p>public void close();//关闭流</p><p>public void flush();//刷新流</p></blockquote><p>和写数据有关系的方法;</p><blockquote><p>public void write(int b);//写一个字节 </p><p>public void write(byte[] bs);//写一个字节数组</p><p>public void write(byte[] bs,int startIndex,int lenght);//写一个字节数组的一部分</p></blockquote><p><strong>FileOutputStream</strong></p><p>OutputStream具体子类</p><p>追加:</p><blockquote><p>以前用的构造:</p><p>​    public FileOutputStream(String filename);//默认就是覆盖</p><p>​    public FileOutputStream(File file);//给定一个File对象,这个File对象代表我们要写入的文件</p><p>请用这个构造,实现追加:</p><p>​    public FileOutputStream(String filename,boolean flag)</p><p>​    public FileOutputStream(File file,boolean flag)</p></blockquote><p>换行（不同操作系统用不同换行）:</p><blockquote><p>windows:\r\n</p><p>Linux:\n</p><p>Mac:\r</p></blockquote><h5 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream:"></a>InputStream:</h5><p>字节输入流的根类,这是一个抽象类</p><p>public int read();//读取一个字节,返回的是码值</p><p>public int read(byte[] bs);//读取一个字节数组,返回值表示实际读取到的字节数</p><p>我们用InputStream具体子类:<strong>FileInputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.文件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 复制文件练习:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.源文件: 是读取用的, new FileInputStream("源文件")</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.目标文件: 是写入用的, new OutputStream("目标文件")</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 一边读取 源文件  一边写出到目标文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.关闭流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"F:\\书\\史铁生.docx"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"F:\\书\\copy.docx"</span>);</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((b=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*        //一次读取一个字节数组</span></span><br><span class="line"><span class="comment">        byte[] bs = new byte[1024];//用来保存读取到的字节数据</span></span><br><span class="line"><span class="comment">        int len = 0;//保存实际读取到的字节个数</span></span><br><span class="line"><span class="comment">        while((len=fis.read(bs))!=-1)&#123;</span></span><br><span class="line"><span class="comment">            fos.write(bs, 0, len);//写入bs中的从0下标开始len个字节 到文件中</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = e-s;</span><br><span class="line">        System.out.println(time);</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="缓冲流-相比较没有缓冲区的流-效率更高"><a href="#缓冲流-相比较没有缓冲区的流-效率更高" class="headerlink" title="缓冲流: 相比较没有缓冲区的流,效率更高"></a>缓冲流: 相比较没有缓冲区的流,效率更高</h5><p>BufferedOutputStream 缓冲输出流</p><p>构造方法</p><blockquote><p>public BufferedOutputStream(OutputStream out)  </p></blockquote><p>BufferedInputStream  缓冲输入流</p><p>构造方法</p><blockquote><p>public BufferedInputStream(InputStream in) </p></blockquote><h5 id="小案例：复制单级文件夹"><a href="#小案例：复制单级文件夹" class="headerlink" title="小案例：复制单级文件夹"></a>小案例：复制单级文件夹</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guardwarm.文件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopySingleDirectory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        File srcfl = <span class="keyword">new</span> File(<span class="string">"F:\\demo1"</span>);</span><br><span class="line">        File dstfl = <span class="keyword">new</span> File(<span class="string">"F:\\demo2"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!dstfl.exists())&#123;</span><br><span class="line">            <span class="keyword">boolean</span> b = dstfl.mkdirs();</span><br><span class="line">            <span class="keyword">if</span> (b)&#123;</span><br><span class="line">                System.out.println(<span class="string">"文件夹不存在，成功创建"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"目标文件夹已存在，直接复制即可"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历文件  注意创建目标文件</span></span><br><span class="line">        File[] srcfiles = srcfl.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File src : srcfiles)&#123;</span><br><span class="line">            File dst = <span class="keyword">new</span> File(dstfl,src.getName());</span><br><span class="line">            copyfile(src,dst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyfile</span><span class="params">(File srcfl,File dstfl)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcfl));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(dstfl));</span><br><span class="line">        <span class="comment">//固定格式</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bs))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        System.out.println(<span class="string">"复制文件"</span>+srcfl.getName()+<span class="string">"成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小知识点-1"><a href="#小知识点-1" class="headerlink" title="小知识点"></a>小知识点</h5><p><strong>使用字节流读取中文的乱码问题:</strong></p><blockquote><p>如果是一个一个字节读取, 100%会出现乱码</p><p>如果是一个一个字节数组读取,可能也会出现乱码</p></blockquote><p>解决方法</p><blockquote><p>字符流</p><p>转换流</p></blockquote><h5 id="字符编码集"><a href="#字符编码集" class="headerlink" title="字符编码集"></a>字符编码集</h5><ul><li>ASCII码表    美国    每个字符对应一个字节    保存了字母，数字，以及一些常用符号    a-97 A-65 0-48</li><li>GB2313    保存常用汉字，一个中文占两字节，这两个字节全是负数</li><li>GBK    保存了基本所有汉字，统统占两个字节第一个字节为负，第二个字节随意</li><li>Unicode    统一码表（万国码表）所有文字统统两字符，向下兼容ASCII</li><li>UTF-8  在Unicode的基础上做了一些优化，能用一个字节的不用两个字节，且在每一个字节头加入了编码信息，一个中文占三个字节</li><li>Latin-1（ISO-8859-1）  拉丁码表，Tomact会用到</li></ul><p>编码 – &gt;文字到对应码值</p><p>解码 – &gt;码值到对应文字</p><h5 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h5><p>字符流的子类</p><p><strong>OutputStreamWriter</strong></p><p>查码表，是字符流通向字节流的桥梁，write方法与其他流一致</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase23.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeCN</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建可以把字符转成字节的转换流对象，并指定编码两种构造，指定编码也可不写，默认GBK</span></span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"c:\\cn8.txt"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//调用转换流，把文字写出去，其实是写到转换流的高效区中</span></span><br><span class="line">osw.write(<span class="string">"你好"</span>);<span class="comment">//写入高效区。</span></span><br><span class="line">osw.close();</span><br></pre></td></tr></table></figure><p><strong>InputStreamReader</strong></p><p>注意选择正确的解码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//演示字节转字符流的转换流</span></span><br><span class="line">readCN();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readCN</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//创建读取文件的字节流对象</span></span><br><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\cn8.txt"</span>);</span><br><span class="line"><span class="comment">//创建转换流对象 </span></span><br><span class="line"><span class="comment">//InputStreamReader isr = new InputStreamReader(in);这样创建对象，会用本地默认码表读取，将会发生错误解码的错误</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in,<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//使用转换流去读字节流中的字节</span></span><br><span class="line"><span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((ch = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println((<span class="keyword">char</span>)ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">isr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换流和子类区别：转换流可以选择解码/编码方式</p><p>java.lang.Object<br>    java.io.Writer<br>        java.io.OutputStreamWriter<br>            java.io.FileWriter</p><p>​    FileWriter和FileReader：作为子类，仅作为操作字符文件的便捷类存在。当操作的字符文件，使用的是默认编    码表时可以不用父类，而直接用子类就完成操作了，简化了代码。</p><h5 id="序列化流和反序列化流"><a href="#序列化流和反序列化流" class="headerlink" title="序列化流和反序列化流"></a>序列化流和反序列化流</h5><p>用于从流中读取对象的操作流 ObjectInputStream   称为 反序列化流</p><p>用于向流中写入对象的操作流 ObjectOutputStream   称为 序列化流</p><p>构造方法类似转换流，具体看API</p><p><strong>常见异常</strong></p><ul><li><p>当一个对象要能被序列化，这个对象所属的类必须实现Serializable接口。否则会发生异常NotSerializableException异常。</p></li><li><p>同时当反序列化对象时，如果对象所属的class文件在序列化之后进行的修改，那么进行反序列化也会发生异常InvalidClassException。发生这个异常的原因如下：</p><blockquote><p>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </p><p>该类包含未知数据类型 </p><p>该类没有可访问的无参数构造方法 </p><p>版本号默认有java管理，也可以生成版本号自己管理</p></blockquote></li></ul><p><strong>transient关键字</strong></p><p>不需要序列化的属性可以使用关键字transient修饰        同时static修饰的也不会序列化</p><h5 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h5><p>字节打印流  PrintStream</p><p>字符打印流  PrintWriter</p><p>两者基本一致，可以打印的目的地略有不同</p><blockquote><p>PrintStream    字符串的文件名，file对象，其他的tOutputStream，其他的Writer</p><p>PrintWriter    字符串的文件名，file对象，其他的tOutputStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWriterDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建流</span></span><br><span class="line"><span class="comment">//PrintWriter out = new PrintWriter(new FileWriter("printFile.txt"));</span></span><br><span class="line">PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="string">"printFile.txt"</span>);</span><br><span class="line"><span class="comment">//2，写数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">out.println(<span class="string">"helloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3,关闭流</span></span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三方小框架：commons-io"><a href="#第三方小框架：commons-io" class="headerlink" title="第三方小框架：commons-io"></a>第三方小框架：commons-io</h5><p>ps.第一方：官方，第二方：我们</p><p>jar包：java专用压缩包</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase24.JPG" alt></p><p>从上到下依次为：api文档，框架class文件，生成api文档的源文件，框架源文件，测试class文件，测试源文件，许可，注意事项</p><p><strong>添加jar包</strong></p><p>eclipse</p><blockquote><p>1.创建lib文件夹</p><p>2.将commons-io.jar拷贝到lib文件夹</p><p>3.右键点击，→</p></blockquote><p>IDEA</p><blockquote><p>file-&gt; project structure</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase25.JPG" alt></p><p>点最右侧那个+，然后OK就好</p></blockquote><p><strong>FileUtils</strong></p><blockquote><p>readFileToString(File file)：读取文件内容，并返回一个String；</p><p>writeStringToFile(File file，String content)：将内容content写入到file中；</p><p>copyFile(File srcFile, File destFile): 文件复制</p><p>copyDirectoryToDirectory(File srcDir,File destDir);文件夹复制</p></blockquote><p>多是一些静态方法，直接用类名就可调用</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p><strong>几个小概念</strong></p><blockquote><p>进程: 正在运行的程序 叫做进程</p><p>线程:    进程中的一个小任务</p><p>一个进程中通常是由多个线程在执行任务</p><p>main方法所在线程 我们称为主线程</p></blockquote><h5 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h5><p>Thread类:就是我们说的线程类</p><p>构造:</p><p>public Thread();//创建一个默认名字的线程对象</p><p>public Thread(String name);//创建一个指定名字的线程对象</p><p>创建新的线程的方法一:</p><blockquote><p>1.定义子类 继承 Thread</p><p>2.在子类中重写run方法(就是执行任务的方法,在run方法中写<strong>任务代码</strong>即可)</p><p>3.创建子类对象(就是创建一个线程对象)</p><p>4.开启这个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.创建子类线程对象</span></span><br><span class="line">MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="comment">//设置守护线程</span></span><br><span class="line">mt.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//4.开启线程,JVM自动会告诉CPU去执行线程任务代码</span></span><br><span class="line">mt.start();</span><br></pre></td></tr></table></figure><p>开启线程的第二种方式:</p><blockquote><p>1.定义实现类 实现Runnable接口</p><p>2.实现类要重写run方法(就是写任务代码的方法)</p><p>3.创建实现类对象</p><p>4.创建Thread对象,并把刚刚的实现类对象 作为参数传递</p><p>5.启动这个Thread对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"><span class="comment">//4.创建Thread对象,并把刚刚的实现类对象 作为参数传递</span></span><br><span class="line">Thread td = <span class="keyword">new</span> Thread(mr);</span><br><span class="line"><span class="comment">//5.开启线程</span></span><br><span class="line">td.start();</span><br></pre></td></tr></table></figure><p>内存图</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase26.bmp" alt></p><p>创建两个线程对象</p><blockquote><p>我们发现:</p><p>a.线程默认是有名字,名字Thread-n,n从0开始 依次递增的</p><p>b.我们可以修改线程的名字,但是一般不改</p><p>setName(String name);</p><p>c我们可以获取线程的名字,通过线程对象的getName方法获取</p><p>d.获取线程名字的最常用的方法</p><p>Thread.currentThread().getName();</p></blockquote><p>两种创建方式比较</p><p>从耦合性分析:</p><blockquote><p>第一种方式:线程和任务是紧紧联系在一起的,耦合性高</p><p>第二种方式:线程是线程,任务是任务,他们之间没有必然联系,给一个线程传递哪个任务那么该线程就执行哪个任务</p><p>所以说开发中,我们用第二种方式</p></blockquote><p>从代码的扩展性:</p><blockquote><p>第一种方式 由于是继承Thread,那么子线程类就不能继承别的类</p><p>第二种方式 由于是实现了接口,同时可以继承别的类</p><p>所以说开发中,我们用第二种方式</p></blockquote><h5 id="用匿名内部类创建对象"><a href="#用匿名内部类创建对象" class="headerlink" title="用匿名内部类创建对象"></a>用匿名内部类创建对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 匿名内部类:</span></span><br><span class="line"><span class="comment"> * 快速创建一个类的子类对象,或者一个接口的实现类对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 格式:</span></span><br><span class="line"><span class="comment"> * new 父类()&#123;</span></span><br><span class="line"><span class="comment"> * 重写方法();</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> * new 接口()&#123;</span></span><br><span class="line"><span class="comment"> * 实现方法()</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> * 使用匿名内部类 创建线程对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.第一种方式创建线程对象:继承方式</span></span><br><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"线程"</span>+getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"><span class="comment">//2.第二种方式创建线程对象:实现方式</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h5 id="案例：卖票"><a href="#案例：卖票" class="headerlink" title="案例：卖票"></a>案例：卖票</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 案例:电影院卖票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 假设 上演"忍者神龟" 100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 有三个柜台在卖票,同时开卖,并且卖的都是这100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 三个柜台就是三个线程,他们同时执行同一个买票任务,同时操作一个共享数据100张票</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicketsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建卖票任务对象</span></span><br><span class="line">TicketsRunnable tr = <span class="keyword">new</span> TicketsRunnable();</span><br><span class="line"><span class="comment">//2.创建 3个线程 去执行买票任务</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(tr,<span class="string">"窗口3"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">120</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式一:</span></span><br><span class="line"><span class="comment"> *    给代码加上同步锁</span></span><br><span class="line"><span class="comment"> *    格式:</span></span><br><span class="line"><span class="comment"> *    synchronized(锁对象)&#123;</span></span><br><span class="line"><span class="comment"> *    代码</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> *    锁对象可以是任意对象</span></span><br><span class="line"><span class="comment"> *  先运行到那块的会拿到锁对象，然后执行几次后会将锁对象放回，让其他线程执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式二:</span></span><br><span class="line"><span class="comment"> *    同步方法</span></span><br><span class="line"><span class="comment"> *    格式:</span></span><br><span class="line"><span class="comment"> *    public synchronized void 方法名()&#123;</span></span><br><span class="line"><span class="comment"> *    需要运行的代码</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> *    注意:同步代码块和同步方法的原理是一样,都是具有锁对象,哪一个线程进来执行,那么该线程就持有这个锁对象</span></span><br><span class="line"><span class="comment"> *    这里同步方法使用的锁对象 叫做this对象</span></span><br><span class="line"><span class="comment"> *    如果同步方法是静态方法,那么他的锁对象是 当前类.class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">sale();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题方式三:</span></span><br><span class="line"><span class="comment"> * Lock接口方式</span></span><br><span class="line"><span class="comment"> * 我们实际用的是他的一个实现类:ReentrantLock</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在Lock接口中有两个方法:</span></span><br><span class="line"><span class="comment"> * lock();//获取锁</span></span><br><span class="line"><span class="comment"> * unlock();//释放锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">//创建一个Lock接口的实现类对象</span></span><br><span class="line">Lock l = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//任务代码 就是卖票 100张</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">l.lock();</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"第"</span>+count);</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">l.unlock();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线程状态图"><a href="#线程状态图" class="headerlink" title="线程状态图"></a>线程状态图</h5><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase27.bmp" alt></p><h4 id="socket-网络编程"><a href="#socket-网络编程" class="headerlink" title="socket-网络编程"></a>socket-网络编程</h4><h5 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h5><p>网络通信协议:</p><blockquote><p>网络:由多台计算机,以及外部设备 连接起来一个系统 我们就称为网络</p><p>通信协议: 就像交通规则,规定网络上传输的数据的格式,大小,速度等等</p></blockquote><p>在我们现在的网络中都有哪些通信协议:</p><blockquote><p>TCP/IP协议</p><p>UDP协议</p><p>其他协议</p></blockquote><p>IP地址和端口号的介绍</p><blockquote><p>IP地址: 网络每一台计算的唯一标识</p><p>1Byte=8Bit</p><p>IP地址 每一个段 0-255 </p><p>端口号:</p><p>是每一个计算机中的”门”,一共有0-65535号门</p></blockquote><p>总结:我们向别的计算机发信息的时候</p><blockquote><p>确定 IP地址:为了找到那台计算机</p><p>确定 端口号: 为了确定发送到对方计算机中的哪个应用程序</p></blockquote><h5 id="InetAddress-代表IP地址类"><a href="#InetAddress-代表IP地址类" class="headerlink" title="InetAddress:代表IP地址类"></a>InetAddress:代表IP地址类</h5><blockquote><p>public static InetAddress getLocalHost();//获取你的计算机的IP地址对象</p><p>public String getHostName();//仅获取主机名</p><p>public String getHostAddress();//仅获取IP地址</p><p>public static InetAddress getByName(“其他主机的名字或者IP”);//远程主机的IP地址对象</p></blockquote><h5 id="UDP和TCP"><a href="#UDP和TCP" class="headerlink" title="UDP和TCP"></a>UDP和TCP</h5><p>UDP:用户数据报协议</p><blockquote><p>特点:面向无连接,数据是不安全,不完整</p><p>优点:效率高</p><p>比如:发短信,供屏软件,QQ视频</p></blockquote><p>TCP:传输控制协议</p><blockquote><p>特点:面向有连接,数据是安全,完整性</p><p>比如:打电话,上网</p><p>TCP协议建立连接 有三个步骤 我们称为”三次握手”</p></blockquote><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>一个应用程序已写好，后期出现的接口子类无法直接在该应用中new一个对象，该怎么办？</p><p>子类不确定，可以通过提供配置文件形式将不确定的信息存储在配置文件中即可。该程序只要之前写好读取配置文件的信息即可。</p><p>如果存储了指定的子类名，就根据具体名称找该类并进行加载和对象的创建，这些动作都是在定义软件时写好的</p><p>没有类之前就将创建对象的动作写好了，这就是动态的获取指定的类，并使用类中的功能——反射技术</p><h5 id="字节码文件对应的类"><a href="#字节码文件对应的类" class="headerlink" title="字节码文件对应的类"></a>字节码文件对应的类</h5><p>class Class    描述字节码文件的类</p><p>Field field    将字段封装成对象类型</p><p>Constructor cons    将构造函数封装成了对象类型</p><p>Method method    将类中的成员都封装成了对象</p><p>getField()</p><p>getMethod()</p><p>getConstrctor()</p><h5 id="获取字节码文件对象"><a href="#获取字节码文件对象" class="headerlink" title="获取字节码文件对象"></a>获取字节码文件对象</h5><p>要想获取字节码文件中的成员，首先要获取字节码文件对象</p><p><strong>法一</strong></p><p>通过object类中的getClass方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Class clszz1=p1.getClass();</span><br></pre></td></tr></table></figure><p>虽然通用，但必须有指定类，并对该类进行实例化才能调用getClass方法</p><p><strong>法二</strong></p><p>调用任意一个数据类型的一个静态成员class</p><p>不用实例化类，但还是需要指定的类</p><p><strong>法三</strong></p><p>使用class类中的forName方法，通过给定类名来获取相应的字节码文件对象</p><p>最常用，只需从配置文件中解析到类名即可</p><p>调用newInstanse()方法来实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String className = <span class="string">"cn.itcast.domain.Person"</span>;<span class="comment">//一般从配置文件解析获取</span></span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line">Object obj = clazz.newInstanse();</span><br><span class="line"><span class="comment">//1.通过给定类名称加载对应字节码文件，并封装成字节码文件对象</span></span><br><span class="line"><span class="comment">//2.通过new创建Person对象</span></span><br><span class="line"><span class="comment">//3.调用构造方法初始化</span></span><br><span class="line"><span class="comment">//通常被反射的类会提供无参构造，若没有会报instantiationException</span></span><br><span class="line"><span class="comment">//如果提供了，但是权限不够会报illegalAccessException</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//1.加载Person类，并将类封装成字节码对象</span></span><br><span class="line"><span class="comment">//2.通过new创建Person对象</span></span><br><span class="line"><span class="comment">//3.调用构造方法初始化</span></span><br><span class="line"></span><br><span class="line">String className = <span class="string">"cn.itcast.domain.Person"</span>;</span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line">Constructor cons = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//获取指定的构造器</span></span><br><span class="line">Object obj = cons.newInstance(<span class="string">"wangwu"</span>,<span class="number">23</span>);<span class="comment">//有了构造器对象后，通过其来初始化对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字段需要先获取到class对象</span></span><br><span class="line">Field field = clazz.getField(字段名);<span class="comment">//公共字段可以这样获取</span></span><br><span class="line">Field field = clazz.getDeclaredField(字段名);<span class="comment">//获取以声明字段多数方法都有对应的declare</span></span><br><span class="line">field.set(obj,<span class="number">30</span>)<span class="comment">//需要获取到字段和字节码对象，只可修改公共字段</span></span><br><span class="line">field.setAccessible();<span class="comment">//暴力访问，去除该字段访问权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取方法，需要先获取到class对象</span></span><br><span class="line">Method method = clazz.getMethod(方法名,<span class="keyword">null</span>);<span class="comment">//第二个表示无参</span></span><br><span class="line">method.invoke(<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//第一个为字节码对象，后面表示无参</span></span><br><span class="line"></span><br><span class="line">Method method = clazz.getMethod(方法名,String.class,<span class="keyword">int</span>.class);<span class="comment">//第二个表示无参</span></span><br><span class="line">method.invoke(obj,<span class="string">"wangwu"</span>,<span class="number">33</span>);</span><br></pre></td></tr></table></figure><h3 id="java设计思想"><a href="#java设计思想" class="headerlink" title="java设计思想"></a>java设计思想</h3><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>前人把解决问题的方案总结出一个套路</p><h5 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h5><p>静态代理设计模式</p><p>设计个接口，限制代理需要做哪些事，用接口来接收不同代理</p><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase11.JPG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo10_代理设计模式;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 代理类:经销商</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPerson</span> <span class="keyword">implements</span> <span class="title">ComputerInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ComputerInterface lianxiang;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyCompany</span><span class="params">(ComputerInterface lianxiang)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lianxiang = lianxiang;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buyComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"鼠标,键盘,电脑包,u盘,操作系统,3000$ + "</span>+lianxiang.buyComputer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"需要运费1000块"</span>);</span><br><span class="line">lianxiang.repair();</span><br><span class="line">System.out.println(<span class="string">"再给500块保管费"</span>);</span><br><span class="line">System.out.println(<span class="string">"再给100块运费"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理设计模式</p><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>向上抽取原则</li></ul><p><img src="/.com//java%E8%BF%9B%E9%98%B6/javase2.JPG" alt></p><h2 id="Java数据结构和算法"><a href="#Java数据结构和算法" class="headerlink" title="Java数据结构和算法"></a>Java数据结构和算法</h2><p>先看几个经典算法面试题</p><ul><li>用最快速度判断str2是否为str1子串    暴力破解（逐字匹配）/kmp算法《部分匹配表》</li><li>汉诺塔问题    递归，分治算法</li><li>八皇后问题    回溯算法</li><li>马踏棋盘    图的深度优化算法（DFS），贪心算法（优化）</li></ul><p>算法是程序的灵魂，大厂对算法要求越来越高</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p>去MySQL官网下社区版，根据网上教程配置属性</p><p>还下了SQLyog，可以图形化界面写mysql（注册码百度一下很好找）</p><h4 id="数据库（DB）和数据库管理系统（DBMS）"><a href="#数据库（DB）和数据库管理系统（DBMS）" class="headerlink" title="数据库（DB）和数据库管理系统（DBMS）"></a>数据库（DB）和数据库管理系统（DBMS）</h4><p>数据库：存储数据的仓库，本质是一个文件管理系统</p><p>数据库管理系统：是一个软件，用来管理文件</p><p>我们常说的数据库，实际上是数据库管理系统，一般习惯称为数据库</p><p>一般不直接操作DB，而是通过DBMS来操作DB</p><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%931.JPG" alt></p><h4 id="表（java中一个类）"><a href="#表（java中一个类）" class="headerlink" title="表（java中一个类）"></a>表（java中一个类）</h4><p>行：一条记录    类的一个对象</p><p>列：一个字段    java中一个属性</p><h4 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h4><p>MySQL：开源免费，小型的数据库，已经被Oracle收购，开始收费（6.x之后）</p><p>Oracle：收费的大型数据库，收购了SUN,MySQL</p><p>DB2：IBM的数据库，常用在银行，效率差，安全性高</p><p>SQLSever：Microsoft的，常用于c#，.net</p><p>SyBase：已经淡出历史舞台，提供了一个专业的数据建模工具——PowerDesigner</p><p>SQLite：嵌入式的小型数据库，用于手机端</p><p>MySQL开启和关闭</p><p>法一：此电脑-&gt;管理-&gt;服务-&gt;找到MySQL即可</p><p>法二：以管理员权限打开command</p><p>net start mysql</p><p>net stop mysql</p><p>mysql -u root -p(直接跟密码或回车然后会提示输入密码)</p><p>法三：用SQLyog</p><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%932.JPG" alt></p><p>DDL：数据库定义语言    defination</p><p>主要是对数据库数据库表进行创建删除等维护操作</p><p>create 创建  drop  删除  alter  修改  show  查看</p><p>DCL：数据库操纵/控制语言    control</p><p>控制数据库访问权限</p><p>DML：数据库操作语言    manager</p><p>主要是对表中数据进行增删改</p><p>insert  增加  delete  删除  update  修改</p><p>DQL：数据库查询语言    query</p><p>主要是对表中数据进行查询</p><p>select  查询  from  从  where  条件</p><h4 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h4><ul><li><p>SQL语句可以单行或多行书写，以分号结尾</p></li><li><p>可使用空格和缩进来增强可读性</p></li><li><p>语句不区分大小写，关键字建议使用大写</p></li><li><p>/**/ 块注释</p><p># 单行注释</p></li><li><p>常用数据类型（还有很多，但不常用）</p><ul><li>int 整形</li><li>double 浮点型</li><li>varchar 字符串型</li><li>date 日期型 yyyy-mm-dd，没有时分秒</li></ul></li></ul><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><h5 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h5><p>​    增</p><p>​    create database 数据库名   采用默认编码，安装时选的</p><p>​    create database 数据库名 charset utf8</p><p>​    删</p><p>​    drop database 数据库名</p><p>​    改</p><p>​    修改数据库名字很麻烦</p><p>​    use 数据库名    修改正在使用的数据库</p><p>​    查</p><p>​    select database()    查询正在使用的数据库</p><p>​    show database    查询所有数据库</p><p>​    show create database 数据库名    查询某个数据库详细信息</p><h5 id="操作数据库表"><a href="#操作数据库表" class="headerlink" title="操作数据库表"></a>操作数据库表</h5><p>​    增</p><p>​    create table 表名（</p><p>​    字段名1 数据类型1（长度） [约束]，</p><p>​    字段名2 数据类型2（长度） [约束]</p><p>​    字段名2 数据类型2（长度） [约束]</p><p>​    ）；</p><p>​    删</p><p>​    drop table 表名</p><p>​    查</p><p>​    desc 表名 查看一个表的详细信息    description</p><p>​    show tables 查看所有的表</p><p>​    改</p><p>​    rename table 表名 to 新表名    改名字</p><h5 id="操作数据库表中的列"><a href="#操作数据库表中的列" class="headerlink" title="操作数据库表中的列"></a>操作数据库表中的列</h5><p>​    增</p><p>​    alter table 表名 add 列名 类型（长度） [约束]</p><p>​    删</p><p>​    alter table 表名 drop 列名</p><p>​    查（同查看表的信息）</p><p>​    desc 表名 查看一个表的详细信息</p><p>​    改    可以修改列的名字，类型，约束等等</p><p>​    alter table 表名 change 旧列名 新列名 类型(长度) 约束   修改列名,实际上类型和约束也可以一起改了</p><p>​    alter table 表名 modify 列名 类型（长度） 约束    修改类型和约束</p><p>​    alter table 表名 character set 字符集   一般不修改</p><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><p><strong>增</strong></p><p>insert into 表名 (列名1，列名2) values (value1，value2)    插入一条记录</p><p>列名可以选择一列或几列，前后必须一一对应</p><p>除了int，double，其它数据必须用””或’’引起来，推荐使用单引号</p><p>如果要插入的记录所有字段都有，则(列名1，列名2)可省略</p><p><strong>删</strong></p><p>delete from 表名    删除所有记录</p><p>delete from 表名 where 条件</p><p>改</p><p>update 表名 set 字段名=值 把该字段内所有的值都改了</p><p>update 表名 set 字段名=值 where 条件</p><h4 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h4><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><p>select [distinct] *|列名1，列名2 from 表名    查询表中所有行数据</p><p>distinct    去重查询</p><p>字段名+10    查询结果是表达式    运算查询</p><p>字段名+10 as 新名字    别名查询</p><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%933.JPG" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">where price &lt;&gt; 60;</span><br><span class="line"></span><br><span class="line">where not (price=60);</span><br><span class="line"></span><br><span class="line">where price &gt;= 400 and price &lt;= 600;</span><br><span class="line"></span><br><span class="line">where price between 400 and 600;</span><br><span class="line"></span><br><span class="line">where price in (400,600);价格是400和600的</span><br><span class="line"></span><br><span class="line">where price &gt;1000 or price &lt; 300;</span><br><span class="line"></span><br><span class="line">where pname like &apos;%霸%&apos;名字中含&apos;霸&apos;的商品</span><br><span class="line"></span><br><span class="line">where pname like &apos;_霸%&apos;名字中第二个字为&apos;霸&apos;的商品</span><br><span class="line"></span><br><span class="line">where pname is null;没有名字的，不可以用pname=null</span><br><span class="line"></span><br><span class="line">where price &gt;2000 and category_id in (&apos;c002&apos;,&apos;c003&apos;);</span><br><span class="line"></span><br><span class="line">where (price &gt;2000 and category_id=&apos;c002&apos;)</span><br><span class="line"></span><br><span class="line">or(price &gt;2000 and category_id=&apos;c003&apos;);</span><br></pre></td></tr></table></figure><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><p>对查询结果进行排序，关键字order by</p><p>格式：查询语句 order by 字段名 [ASC|DESC]</p><p>ASC 升序，从小到大，默认</p><p>DESC 降序，从大到小</p><h5 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h5><p>以前的查询都是横向记录查询，该查询是纵向个数查询</p><p>查询特点：查询到的是单一值</p><p>聚合函数：求记录数的聚合函数    </p><p>格式：聚合函数（字段名）</p><p>​    count函数会自动忽略空值</p><p>​    max：求最大值</p><p>​    min：求最小值</p><p>​    avg：求平均值</p><p>​    sum：求和</p><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><p>把查询到的结果分成几个组，先分组再查询，具体查询到的结果数，取决于分成几个组</p><p>若分组后还有条件需要判断，用having关键字</p><p>where写在基本查询语句后，且后面不可以写聚合函数</p><p>having写在分组查询后，且后面可以写聚合函数</p><p>格式：查询语句 group by 字段</p><p>select count(<em>) from product group by categroy_id having count(\</em>)&gt;1    </p><p>只显示个数大于1的商品分类，<strong>注意条件用having</strong></p><h5 id="完整查询过程"><a href="#完整查询过程" class="headerlink" title="完整查询过程"></a>完整查询过程</h5><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%934.JPG" alt></p><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>只查询记录的一部分</p><p>格式：limit 数值一（开始下标，从0开始计数），数值二（需要查出的记录数）</p><p>查询公式：假设每次查n条</p><p>第m页  limit (m-1)*n,n</p><h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><p><strong>交叉查询</strong></p><p>格式：select * from 表一，表二</p><p>总字段=表一字段+表二字段</p><p>总记录数=表一记录数*表二记录数</p><p>但交叉查询无实际意义，实际上是一个矩阵（坐标）的笛卡尔，是另外两个查询的基础</p><p><strong>内连接查询    inner join</strong></p><p>隐式内连接查询：不写关键字inner join</p><p>select * from 表一，表二 where 表一.主键=表二.外键</p><p>显式内连接查询：写关键字inner join</p><p>select * from 表一 inner join 表二 on 表一.主键=表二.外键</p><p><strong>外连接查询    outer join</strong></p><p>左外连接：left outer join</p><p>select * from 表一 left outer join 表二 on 表一.主键=表二.外键</p><p>左外连接，以左表为主，左表中数据都会有</p><p>右外连接：right outer join</p><p>select * from 表一 right outer join 表二 on 表一.主键=表二.外键</p><p>右外连接，以右表为主，右表中数据都会有</p><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>一个查询的结果，做另一个查询的一部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category_id <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> <span class="keyword">category</span> <span class="keyword">WHERE</span> cname <span class="keyword">IN</span>(<span class="string">'化妆品'</span>，<span class="string">'家电'</span>))；</span><br></pre></td></tr></table></figure><h4 id="SQL备份和恢复"><a href="#SQL备份和恢复" class="headerlink" title="SQL备份和恢复"></a>SQL备份和恢复</h4><p>在SQLyog中，右击数据库进行导入和导出</p><h4 id="三个知识点"><a href="#三个知识点" class="headerlink" title="三个知识点"></a>三个知识点</h4><h5 id="两个约束"><a href="#两个约束" class="headerlink" title="两个约束"></a>两个约束</h5><p>主键约束(primary key):只能有一个，值必须唯一且不能为空</p><p>自动增长约束（auto_increment):初始值唯一，若被设置为一个值后，下一个值从这个的基础上增加</p><p>删除表所有数据的两种方式</p><p>delete from 表名    所有记录被删除，但自增值不会重置</p><p>truncate table 表名    删除所有记录，并重置自增值 底层是先摧毁表，再重建</p><p>乱码问题</p><p>在DOS中查看utf8编码的数据库数据时会出现乱码问题，因为DOS默认的是gbk</p><p>解决方法</p><p>临时方案：set names gbk    临时的确告诉数据库我们用gbk来查询</p><p>永久方案：修改my.ini的配置文件，不建议</p><h4 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h4><p>添加数据完整性==添加表约束</p><p>实体完整性：对数据行的约束，比如主键约束，唯一约束</p><p>域完整性：对数据列的约束</p><p>引用完整性：外键约束（多表关系）</p><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%936.JPG" alt></p><h4 id="各种约束"><a href="#各种约束" class="headerlink" title="各种约束"></a>各种约束</h4><p>主键约束：primary key    保证该字段唯一并且不为空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">-- 在创建表的时候，不直接在字段后添加，而是在表的约束区域添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span>，<span class="comment">-- 此处为约束区域</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid)</span><br><span class="line">&#125;;</span><br><span class="line">//创建表后，通过修改表的结构，给某个字段添加主键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid)</span><br><span class="line"></span><br><span class="line">//删除主键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;<span class="comment">-- 因为只能有一个主键，所以无需加字段名</span></span><br></pre></td></tr></table></figure><p>唯一约束：unique    保证该字段唯一，可以为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建表的时候，不直接在字段后添加，而是在表的约束区域添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span>，</span><br><span class="line"><span class="comment">-- 此处为约束区域</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> unique_bid <span class="keyword">UNIQUE</span>(bid)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">DROP</span> <span class="keyword">UNIQUE</span>(约束名);<span class="comment">-- /如果添加唯一约束时没起名字，默认是字段名</span></span><br></pre></td></tr></table></figure><p>自动增长约束：auto_increment    把该字段的值交给数据库去维护，默认每次加一（这个字段必须是建，多为主键）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建表的时候，不直接在字段后添加，而是在表的约束区域添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">bprice <span class="keyword">DOUBLE</span>，</span><br><span class="line"><span class="comment">-- 此处为约束区域</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk_bid PRIMARY <span class="keyword">KEY</span>(bid)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> bid <span class="built_in">INT</span> AUTO_CREMENT<span class="comment">-- /字段名 类型 约束</span></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> bid <span class="built_in">INT</span>;</span><br></pre></td></tr></table></figure><p>非空约束：not null    被约束字段不可为空值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性,<span class="comment">-- 类似auto_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性;</span><br></pre></td></tr></table></figure><p>默认约束：default    给字段添加一个默认值，如果添加记录时没赋值的话用默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建表的时候直接在字段后面添加</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> books &#123;</span><br><span class="line">bid <span class="built_in">INT</span>,</span><br><span class="line">bname <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="string">'JAVA 入门'</span>,</span><br><span class="line">bprice <span class="keyword">DOUBLE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后，通过修改表的结构，给某个字段添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性,<span class="comment">-- 类似auto_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> books <span class="keyword">MODIFY</span> 字段 属性;</span><br></pre></td></tr></table></figure><h4 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h4><p>双向看，两边都是一个记录对另一边多个记录，这是多对多，否则为一对多</p><p>一对多：两张表即可</p><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%938.JPG" alt></p><p>多对多：需要一张中间表</p><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%939.JPG" alt></p><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%937.JPG" alt></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多对多建表，一张学生表，一张课程表，一张中间表，至少两个字段</span></span><br><span class="line"><span class="comment">-- 创建三张表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student&#123;</span><br><span class="line"><span class="keyword">sid</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">sname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">sage <span class="built_in">INT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course&#123;</span><br><span class="line">cid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">cname <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_course_item&#123;</span><br><span class="line">student_id <span class="built_in">INT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">-- 添加外键约束核心</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_course_item <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> item_student_fk</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(student_id) REFENRENCE student (<span class="keyword">sid</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student_course_item <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> item_course_fk</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(course_id) REFENRENCE course (cid);</span><br></pre></td></tr></table></figure><p>特例：有时候两张表内记录一对一，但字段过多，也会分成两张表</p><p><img src="/.com//%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%9310.JPG" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;java基础&quot;&gt;&lt;a href=&quot;#java基础&quot; class=&quot;headerlink&quot; title=&quot;java基础&quot;&gt;&lt;/a&gt;java基础&lt;/h3&gt;&lt;h4 id=&quot;入门及环境搭建&quot;&gt;&lt;a href=&quot;#入门及环境搭建&quot; class=&quot;headerlink&quot; title=&quot;入门及环境搭建&quot;&gt;&lt;/a&gt;入门及环境搭建&lt;/h4&gt;&lt;h5 id=&quot;下载JDK&quot;&gt;&lt;a href=&quot;#下载JDK&quot; class=&quot;headerlink&quot; title=&quot;下载JDK&quot;&gt;&lt;/a&gt;下载JDK&lt;/h5&gt;&lt;p&gt;进入Oracle官网，下载相应版本，最近下载好像都得注册个账号&lt;/p&gt;
&lt;p&gt;下完按到所需目录，一般默认，一直下一步即可，完了设置一下环境变量&lt;/p&gt;
&lt;p&gt;此电脑-&amp;gt;属性-&amp;gt;高级系统设置-&amp;gt;环境变量-&amp;gt;编辑path，把bin目录路径加入&lt;/p&gt;
&lt;p&gt;classpath也可以设置&lt;/p&gt;
&lt;p&gt;在cmd中，输入java -version检查是否安装成功&lt;/p&gt;
&lt;p&gt;javac 文件路径（编译，生成。class文件）&lt;/p&gt;
&lt;p&gt;java 文件名，不加后缀，运行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDE选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前比较流行的是eclipse和IDEA，我更喜欢IDEA，熟练了快捷键和各种模板之后会用得很舒服&lt;/p&gt;
&lt;h5 id=&quot;语言特点&quot;&gt;&lt;a href=&quot;#语言特点&quot; class=&quot;headerlink&quot; title=&quot;语言特点&quot;&gt;&lt;/a&gt;语言特点&lt;/h5&gt;&lt;p&gt;通过编译成统一的字节码，不同平台下载对应JVM来实现跨平台&lt;/p&gt;
&lt;p&gt;完全面向对象，简单，高性能，分布式，多线程，健壮&lt;/p&gt;
&lt;p&gt;JDK（用于开发）-&amp;gt;JRE（运行环境）-&amp;gt;JVM(依次包含)&lt;/p&gt;
&lt;p&gt;java SE    标准版，定位于个人计算机用户&lt;/p&gt;
&lt;p&gt;java EE    企业版，定位于服务器端领域&lt;/p&gt;
&lt;p&gt;java ME    微型版，定位于消费电子产品的应用&lt;/p&gt;
&lt;p&gt;越高级语言越容易入门，但要精通还需沉下心来&lt;/p&gt;
&lt;h4 id=&quot;数据类型和运算符&quot;&gt;&lt;a href=&quot;#数据类型和运算符&quot; class=&quot;headerlink&quot; title=&quot;数据类型和运算符&quot;&gt;&lt;/a&gt;数据类型和运算符&lt;/h4&gt;&lt;h5 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h5&gt;&lt;p&gt;单行，多行，文档注释&lt;/p&gt;
&lt;h5 id=&quot;标识符的命名规则&quot;&gt;&lt;a href=&quot;#标识符的命名规则&quot; class=&quot;headerlink&quot; title=&quot;标识符的命名规则&quot;&gt;&lt;/a&gt;标识符的命名规则&lt;/h5&gt;&lt;p&gt;虽然不同语言之间会有细微区别，但为了便于编写，感觉大多数语言都推荐采用比较大众的规范&lt;/p&gt;
&lt;p&gt;不可以是java关键字，并且大小写敏感&lt;/p&gt;
&lt;p&gt;类名    大驼峰命名法&lt;/p&gt;
&lt;p&gt;方法和变量    小驼峰命名法&lt;/p&gt;
&lt;p&gt;常量    大写&lt;/p&gt;
&lt;p&gt;数据类型向上隐士转换，向下需要显示加括号强转&lt;/p&gt;
&lt;h5 id=&quot;基本数据类型（四类八种）&quot;&gt;&lt;a href=&quot;#基本数据类型（四类八种）&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型（四类八种）&quot;&gt;&lt;/a&gt;基本数据类型（四类八种）&lt;/h5&gt;&lt;p&gt;byte(1)  boolean(1)  short(2)  char(2)unicode字符集  int()4  float(4)  long(8)  double(8)&lt;/p&gt;
&lt;h5 id=&quot;引用数据类型&quot;&gt;&lt;a href=&quot;#引用数据类型&quot; class=&quot;headerlink&quot; title=&quot;引用数据类型&quot;&gt;&lt;/a&gt;引用数据类型&lt;/h5&gt;&lt;p&gt;string，数组，集合ArrayList，Scanner，Random，自定义类型&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>xmind使用</title>
    <link href="http://yoursite.com/2019/08/13/xmind%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/13/xmind使用/</id>
    <published>2019-08-13T12:43:43.000Z</published>
    <updated>2019-08-13T13:15:17.872Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h4 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h4><p>使用的较简单的免费版，本意只是为了简单的做一些总结<br>之所以选择xmind:zen而不是xmind 8是因为感觉xmind:zen相对来说更小，启动速度更快，并且感觉更加代表了未来的发展方向，xmind 8有些笨重了<br><a href="https://www.xmind.cn" target="_blank" rel="noopener">官网</a></p><h4 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h4><p><strong>编辑主题文字：</strong>选中主题“双击鼠标”或者按【空格键<strong>】</strong></p><p><strong>添加同级主题：</strong>快捷键<strong>【</strong>enter/return<strong>】</strong></p><p><strong>添加子主题：</strong>可快捷键【tab】</p><p><strong>删除：</strong>选中主题按【delete/backspace】</p><a id="more"></a><p><strong>添加外框：</strong>选中要框选的主题按工具栏的【外框】进行添加</p><p><strong>添加概要：</strong>选中主题按工具栏的【概要】进行添加</p><p><strong>添加笔记：</strong> ctrl+shift+n(note)</p><p><strong>撤销:</strong> Ctrl+z</p><p><strong>恢复:</strong> Ctrl+y</p><p>emmm,帮助-&gt;快捷键助手，基本列出了常用快捷键，还可以自定义快捷键</p><p>自己直接上手也很easy，就不一一总结了</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>整体使用还是比较符合我的预期的，启动快，简约，操作方便，虽然免费版导出格式受限，并且还有水印，但这个对我基本没什么影响</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;软件下载&quot;&gt;&lt;a href=&quot;#软件下载&quot; class=&quot;headerlink&quot; title=&quot;软件下载&quot;&gt;&lt;/a&gt;软件下载&lt;/h4&gt;&lt;p&gt;使用的较简单的免费版，本意只是为了简单的做一些总结&lt;br&gt;之所以选择xmind:zen而不是xmind 8是因为感觉xmind:zen相对来说更小，启动速度更快，并且感觉更加代表了未来的发展方向，xmind 8有些笨重了&lt;br&gt;&lt;a href=&quot;https://www.xmind.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用技巧&quot;&gt;&lt;a href=&quot;#使用技巧&quot; class=&quot;headerlink&quot; title=&quot;使用技巧&quot;&gt;&lt;/a&gt;使用技巧&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;编辑主题文字：&lt;/strong&gt;选中主题“双击鼠标”或者按【空格键&lt;strong&gt;】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加同级主题：&lt;/strong&gt;快捷键&lt;strong&gt;【&lt;/strong&gt;enter/return&lt;strong&gt;】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加子主题：&lt;/strong&gt;可快捷键【tab】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除：&lt;/strong&gt;选中主题按【delete/backspace】&lt;/p&gt;
    
    </summary>
    
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="软件使用" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>java开发工具之intelliJ IDEA</title>
    <link href="http://yoursite.com/2019/07/30/java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8BintelliJ-IDEA/"/>
    <id>http://yoursite.com/2019/07/30/java开发工具之intelliJ-IDEA/</id>
    <published>2019-07-30T04:56:21.000Z</published>
    <updated>2019-08-03T05:54:35.759Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Java开发主流工具是Eclipse（IBM开发）和intellij IDEA（jetbrains）。目前intellij IDEA明显使用人数增加。</p><h5 id="主要优势"><a href="#主要优势" class="headerlink" title="主要优势"></a>主要优势</h5><p>强大的整合能力，比如git，Maven，Spring等</p><p>提示功能的快速，便捷，范围广</p><p>好用的快捷键和代码模板</p><p>精确搜索</p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p><a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">下载地址</a></p><h5 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h5><p><img src="/.com//img/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.JPG" alt="安装目录"></p><p>第一个目录存的是配置信息，比如字体，快捷键设置，插件</p><p>第二个存的是索引，缓存等（刚启动时会自动生成索引，这段时间最好安静等待，不然可能会报一些莫名其妙的错）</p><p><img src="/.com//img/index.JPG" alt="index"></p><p>如果出了什么问题，可以把第二个目录干掉，一般重启一下就好了</p><p>程序主体安装在自己安装时选择的目录下</p><a id="more"></a><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p><img src="/.com//img/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.JPG" alt="new project"></p><p>自己导入一下SDK，其余看需求勾选，只是java的话下一步就好</p><p>起个名字，选个存储路径就结束了</p><p><img src="/.com//img/%E9%A1%B9%E7%9B%AE%E5%91%BD%E5%90%8D.JPG" alt="name project"></p><p>创建一个moudle-&gt;package-&gt;再在内部创建java类</p><p>删除Module：右击，F4，减掉，再右击，就可以找到delete</p><p>右上角文件夹图标，点击可以查看项目属性</p><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>行号旁边单击可以添加断点，右击断点可以改为条件断点</p><p>单步，跳出之类的与大多数IDE一致</p><h5 id="取消自动更新"><a href="#取消自动更新" class="headerlink" title="取消自动更新"></a>取消自动更新</h5><p><img src="/.com//img/%E5%8F%96%E6%B6%88%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.JPG" alt="auto updata"></p><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>可以直接在设置中查找插件    Plugins</p><h5 id="生成javadoc"><a href="#生成javadoc" class="headerlink" title="生成javadoc"></a>生成javadoc</h5><p>tool -&gt; generate javadoc</p><p>选择要生成的文件，位置</p><p>locate     zh_CN</p><p>other command line arguments: -encoding UTF-8 -charset UTF-8</p><h5 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h5><p>具体自行百度</p><h5 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h5><p>setting -&gt; editor -&gt; General -&gt;Ctrl+鼠标滚轮改变字体大小/显示快速文档提示，可更改悬停时间/auto import自动导包（展开General）/显示方法间分隔符（apperance）/忽略大小写（code completion）/取消单行显示标签（editor tabs）</p><p>font修改字体大小及样式</p><p>editor内可以单独修改编辑器和控制台样式</p><p>language default -&gt; comments 修改注释颜色</p><p>editor -&gt; code style -&gt; file and code template -&gt; include -&gt; file header(编写头部信息)</p><p>editor -&gt; encoding -&gt; 可以将编码格式都改为utf-8（右下角显示了当前文件编码格式）</p><p>（reload  改变当前文件显示方式   convert    彻底转变）</p><p>build -&gt; compiler(设置自动编译)</p><p>file -&gt; power save module(省电模式，关闭代码提示等功能)</p><p>右击别的文件标签可以设置显示方式，同时打开多个文件</p><h5 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h5><p>setting -&gt;keymap -&gt; 在搜索框中输入功能，会提示对应快捷键/点击搜索图标，可以输入快捷键，提示对应功能</p><p>run    Ctrl+f5、shift+f10</p><p>提示补全    Ctrl+Alt+空格</p><p>单行注释    Ctrl+/</p><p>多行注释    Ctrl+shift+/</p><p>向下复制一行    Ctrl+d</p><p>删除选中行    Ctrl+y</p><p>向上移动一行    Ctrl+shift+向上箭头</p><p>向下移动一行    Ctrl+shift+向下箭头</p><p>向下开始新的一行    Ctrl+enter</p><p>向上开始新的一行    Ctrl+shift+enter</p><p>查看源码    按住Ctrl，点击要查看的/还有一种暂时没找见快捷键</p><p>查看继承关系    光标位于想查看元素上，ctrl+h</p><p>万能解错/生成返回值    alt+enter</p><p>返回到前一个编辑的页面    alt+right</p><p>进入到下一个编辑的页面    alt+left</p><p>格式化代码    Ctrl+alt+l</p><p>提示方法参数类型    Ctrl+p</p><p>复制，剪切，粘贴，全选与Windows一致</p><p>撤销    Ctrl+z</p><p>反撤销    ctrl+shift+z</p><p>选中数行，整体后移    tab</p><p>选中数行，整体前移    shift+tab</p><p>查看类的结构    ctrl+o</p><p>重构：修改变量名和方法名    shift+f6</p><p>大小写转化    Ctrl+shift+u</p><p>生成构造函数    alt+fn+insert</p><p>查看文档说明    Ctrl+q</p><p>收起所有方法    Ctrl+shift+减号</p><p>打开所有方法    Ctrl+shift+等号</p><p>打开代码所在硬盘文件夹    Ctrl+shift+x（我在设置中自己设置的）</p><p>生成try—catch等    alt+ctrl</p><p>查看方法在那些地方被调用过    Ctrl+h</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;Java开发主流工具是Eclipse（IBM开发）和intellij IDEA（jetbrains）。目前intellij IDEA明显使用人数增加。&lt;/p&gt;
&lt;h5 id=&quot;主要优势&quot;&gt;&lt;a href=&quot;#主要优势&quot; class=&quot;headerlink&quot; title=&quot;主要优势&quot;&gt;&lt;/a&gt;主要优势&lt;/h5&gt;&lt;p&gt;强大的整合能力，比如git，Maven，Spring等&lt;/p&gt;
&lt;p&gt;提示功能的快速，便捷，范围广&lt;/p&gt;
&lt;p&gt;好用的快捷键和代码模板&lt;/p&gt;
&lt;p&gt;精确搜索&lt;/p&gt;
&lt;h5 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/download/#section=windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;安装目录&quot;&gt;&lt;a href=&quot;#安装目录&quot; class=&quot;headerlink&quot; title=&quot;安装目录&quot;&gt;&lt;/a&gt;安装目录&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;/.com//img/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.JPG&quot; alt=&quot;安装目录&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一个目录存的是配置信息，比如字体，快捷键设置，插件&lt;/p&gt;
&lt;p&gt;第二个存的是索引，缓存等（刚启动时会自动生成索引，这段时间最好安静等待，不然可能会报一些莫名其妙的错）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/.com//img/index.JPG&quot; alt=&quot;index&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果出了什么问题，可以把第二个目录干掉，一般重启一下就好了&lt;/p&gt;
&lt;p&gt;程序主体安装在自己安装时选择的目录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>看过的一些编程书及评价</title>
    <link href="http://yoursite.com/2019/07/28/%E7%9C%8B%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BC%96%E7%A8%8B%E4%B9%A6%E5%8F%8A%E8%AF%84%E4%BB%B7/"/>
    <id>http://yoursite.com/2019/07/28/看过的一些编程书及评价/</id>
    <published>2019-07-28T14:10:10.000Z</published>
    <updated>2019-08-01T12:20:11.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><hr><h4 id="汇编语言基础教程-James-T-Streib"><a href="#汇编语言基础教程-James-T-Streib" class="headerlink" title="汇编语言基础教程         James T.Streib"></a>汇编语言基础教程         James T.Streib</h4><p>整体讲解不够深入，用了很多高级汇编指令，与最初想了解底层如何实现的初衷相违背，并且很多话说的不清楚，很绕。整体学到了一些东西，算是入门了，但整体感觉不好，不推荐。</p><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><hr><h4 id="跟阿铭学linux（第三版）"><a href="#跟阿铭学linux（第三版）" class="headerlink" title="跟阿铭学linux（第三版）"></a>跟阿铭学linux（第三版）</h4><p>学linux最初的各种命令是看的网课。那几个明明运用及理解都不难的命令，反反复复讲了好长时间，白白浪费了不少时间。我感觉看书来学习linux的各种命令更高效，这本书整体节奏不错，难度感觉略高一点，但认着看，感觉看的很舒服，收货很多。勉强算适合小白吧，我感觉还是有一些对新手不怎么友好的点。</p><p>（这本书学习笔记参见）</p><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;汇编&quot;&gt;&lt;a href=&quot;#汇编&quot; class=&quot;headerlink&quot; title=&quot;汇编&quot;&gt;&lt;/a&gt;汇编&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;汇编语言基础教程-James-T-Streib&quot;&gt;&lt;a href=&quot;#汇编语言基础教程-James-T-Streib&quot; class=&quot;headerlink&quot; title=&quot;汇编语言基础教程         James T.Streib&quot;&gt;&lt;/a&gt;汇编语言基础教程         James T.Streib&lt;/h4&gt;&lt;p&gt;整体讲解不够深入，用了很多高级汇编指令，与最初想了解底层如何实现的初衷相违背，并且很多话说的不清楚，很绕。整体学到了一些东西，算是入门了，但整体感觉不好，不推荐。&lt;/p&gt;
&lt;h3 id=&quot;运维&quot;&gt;&lt;a href=&quot;#运维&quot; class=&quot;headerlink&quot; title=&quot;运维&quot;&gt;&lt;/a&gt;运维&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;跟阿铭学linux（第三版）&quot;&gt;&lt;a href=&quot;#跟阿铭学linux（第三版）&quot; class=&quot;headerlink&quot; title=&quot;跟阿铭学linux（第三版）&quot;&gt;&lt;/a&gt;跟阿铭学linux（第三版）&lt;/h4&gt;&lt;p&gt;学linux最初的各种命令是看的网课。那几个明明运用及理解都不难的命令，反反复复讲了好长时间，白白浪费了不少时间。我感觉看书来学习linux的各种命令更高效，这本书整体节奏不错，难度感觉略高一点，但认着看，感觉看的很舒服，收货很多。勉强算适合小白吧，我感觉还是有一些对新手不怎么友好的点。&lt;/p&gt;
&lt;p&gt;（这本书学习笔记参见）&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>linux之centos学习笔记</title>
    <link href="http://yoursite.com/2019/07/28/linux%E4%B9%8Bcentos%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/28/linux之centos学习笔记/</id>
    <published>2019-07-28T14:06:43.000Z</published>
    <updated>2019-08-01T12:20:34.685Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><hr><h5 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h5><p><strong>绝对路径与相对路径</strong>：区别在于是否从根目录开始，本地绝对路径更稳定，服务器端用相对路径</p><p><strong>cd</strong></p><p><code>cd 路径</code>   . 当前目录 .. 上级目录</p><p>什么都不加默认跳转到当前用户根目录下<br>只能跳转到目录，不可以跳转到文件，会报错</p><p><strong>mkdir</strong></p><p>-m   指定文件权限，不常用<br>-p    创建一串级联目录，已存在时不报错 </p><a id="more"></a><p><strong>ls</strong></p><p>-l    详细信息<br>-d    查看指定目录属性<br>-h    人性化显示大小</p><p>ll=ls -l</p><p><strong>rmdir</strong>  不常用，仅用于删除目录</p><p>-p    级联删除，如果目录非空时报错</p><p><strong>rm</strong></p><p>-r    删除目录时必须加<br>-f    强制删除，不再询问是否删除</p><p><strong>PATH变量</strong></p><p>一串用：分隔的路径，执行命令时会默认从PATH中找<br>修改:    PATH=$PATH:新路径</p><p><strong>cp 【选项】 【源文件】 【目标文件】</strong></p><p>-r    复制目录时加<br>-i    安全选项，覆盖时会询问，默认alise cp=“cp -i”</p><p><strong>mv 【选项】 【源文件或目录】 【目标文件或目录】</strong></p><p>目标文件是目录，若存在，则将源文件或目录移动到目标目录下；若不存在，则将原目录重命名为给定文件名<br>目标文件是文件，若存在，则询问是否覆盖，若不存在，则将源文件重命名为给定的目标文件</p><p><strong>cat</strong></p><p>-n    显示行号<br>-A    显示所有内容，包括特殊字符</p><p><strong>tac</strong>    与命令tac一样，倒叙查看</p><p><strong>more    文件内容较多时使用</strong></p><p>Ctrl+D    向上翻屏<br>Ctrl+F    向下翻屏，同空格<br>空格    向下翻屏<br>q    退出<br>/字符串    从当前行向下查找字符串，按n定位下一个<br>？字符串    从当前行向上查找字符串，按n定位下一个（可以使用通配符）</p><p><strong>less    作用同more，但命令更多</strong></p><p>j    向上移动一行<br>k    向上移动</p><p><strong>head</strong>    默认显示文件前十行</p><p>-n 1/-n1/-1    显示指定行数，三种方式皆可</p><p><strong>tail</strong>    同head，倒叙查看</p><p><strong>文件属性</strong></p><ul><li>第一列<pre><code>第一位  d    目录  -    普通文件      l    链接文件      b    块设备      c    串行端口设备文件      s    套接字文件，socket</code></pre>  后九位<br>  每三位为一组，分别为user，group，others权限<br>  最后一位<br>  使用了SElinux context为点<br>  设置了acl属性为+号</li><li>第二列<br>  该文件占用的节点（inode），有几种访问方式</li><li>第三列<br>  所有者</li><li>第四列<br>  所属组</li><li>第五列<br>  该文件大小    </li><li>第六七八列<br>  分别为月日及时间</li><li>第九列<br>  文件名</li></ul><p><strong>chgrp</strong>    不常用<br>更改文件所属组<br>chgrp 【组名】 【文件名】<br>-R    级联更改子目录名或文件名</p><p><strong>chown</strong><br>更改文件所有者<br>chown 【-R】 账户名：组名    文件名<br>-R    仅用于目录，作用是级联更改</p><p><strong>chmod</strong><br>更改用户权限，目录默认为755，文件默认为644<br>chmod  750  文件或目录名<br>chmod  u=rwx，og=rw  文件或目录名   u，g，o，a（all）<br>chmod  a-x  文件或目录名</p><p><strong>umask</strong><br>修改文件默认权限<br>umask  xxx    xxx=默认值-所需默认值（文件默认为666，目录默认为777）<br>特例：666-333=444（333代表去了可写和可执行权限，但本来就没有可执行）</p><p><strong>chattr</strong><br>修改文件特殊属性<br>chattr 【+-=】【Asaci】 【文件或目录名】  分别是增加，减少和设定<br><strong><em>存疑：=还不清楚</em></strong><br>-A    文件或目录的atime将不可修改<br>-s    将数据同步写入磁盘<br>-a    只能追加不能删除，非root不可设定该属性（常用）<br>-c    自动压缩文件，读取时自动解压<br>-i    文件不能删除，重命名，设定链接，以及写入数据（常用）</p><p><strong>lsattr  文件或目录名</strong><br>该命令用于读取文件或者目录的特殊权限<br>-a    列出所有文件，包括隐藏文件<br>-R    连同子目录数据列出</p><p><strong>set uid，set gid，sticky bit</strong><br>权限其实共四位，第一位由这三个决定，分别为4,2,1，具体表现在第三位，若为小写则原本有x，大写则无，例如rwsrwsrwt为7777<br>set uid    针对二进制可执行文件，使文件在执行阶段拥有该文件所有者权限    passwd命令<br>set gid    作用在二进制文件上时，同上，作用在目录上时，任何用户在此目录下创建的文件都具有和该目录所属组相同的组<br>sticky bit    设置该权限后，就算用户拥有写权限，也只可以添加而不可删除文件    /tmp/</p><h5 id="在linux下搜索文件"><a href="#在linux下搜索文件" class="headerlink" title="在linux下搜索文件"></a>在linux下搜索文件</h5><p><strong>which</strong><br>查找可执行文件绝对路径<br>which vi</p><p><strong>whereis</strong><br>通过预先生成的文件列表库查找<br>whereis 【-bms】 【文件名称】<br>-b    只查找二级制文件<br>-m    只查找帮助文件<br>-s    只查找源代码文件</p><p><strong>locate</strong>    不常用<br>类似于whereis，包含所搜索关键词的目录和文件都会列出，所以不适合精确搜索</p><p><strong>find    重要</strong><br>find 【路径】 【参数】<br>-atime +n/-n    访问或执行时间大于或小于n天<br>-ctime +n/-n    写入、更改inode属性的时间大于或小于n天<br>-mtime +n/-n    写入时间大于或小于n天        <strong>用得最多</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;文件和目录管理&quot;&gt;&lt;a href=&quot;#文件和目录管理&quot; class=&quot;headerlink&quot; title=&quot;文件和目录管理&quot;&gt;&lt;/a&gt;文件和目录管理&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;绝对路径与相对路径&lt;/strong&gt;：区别在于是否从根目录开始，本地绝对路径更稳定，服务器端用相对路径&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd 路径&lt;/code&gt;   . 当前目录 .. 上级目录&lt;/p&gt;
&lt;p&gt;什么都不加默认跳转到当前用户根目录下&lt;br&gt;只能跳转到目录，不可以跳转到文件，会报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mkdir&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-m   指定文件权限，不常用&lt;br&gt;-p    创建一串级联目录，已存在时不报错 &lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>出现过的小问题</title>
    <link href="http://yoursite.com/2019/07/26/%E5%87%BA%E7%8E%B0%E8%BF%87%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/26/出现过的小问题/</id>
    <published>2019-07-26T05:49:44.000Z</published>
    <updated>2019-08-01T12:15:50.471Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="与git相关"><a href="#与git相关" class="headerlink" title="与git相关"></a>与git相关</h3><p>​    fatal: Not a git repository (or any of the parent directories): .git</p><p>​    <code>git init</code></p><p>​    生成子项目</p><p>​    <code>git submodule add 项目路径  文件路径</code></p><h3 id="与hexo相关"><a href="#与hexo相关" class="headerlink" title="与hexo相关"></a>与hexo相关</h3><p>常用命令</p><p>​    清楚缓存   <code>hexo clean</code></p><p>​    本地检测   <code>hexo s</code>   (-p 4001   指定端口，默认4000)  （–debug检测）</p><p>​    生成静态文件   <code>hexo g</code>（-w 监视文件变动）</p><p>​    部署   <code>hexo d</code></p><p>​    (<code>hexo clean &amp;&amp; hexo g -d</code>)</p><h3 id="与Markdown相关"><a href="#与Markdown相关" class="headerlink" title="与Markdown相关"></a>与Markdown相关</h3><ul><li>感觉没有光标移动很不舒服，暂时没找到解决办法</li><li>默认开启了拼写检查，很多编程的英文下面都是红线，很难受</li></ul><p>文件 -&gt; 偏好设置，下拉就可以找到钱拼写检查</p><p><img src="/.com//img/%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5.JPG" alt="拼写检查"></p><ul><li><p>不喜欢默认主题的可以在偏好设置中获取主题</p><p><img src="/.com//img/typora%E4%B8%BB%E9%A2%98.JPG" alt="typora themes"></p><p>选择自己喜欢的点击download，会给出css源码（有时也会直接给一个压缩文件），自己ctrl A,ctrl C存为一个css文件，导入主题文件夹即可</p><p>（从偏好设置中打开主题文件夹，导入即可）</p></li></ul><p>与intellij IDEA相关</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;与git相关&quot;&gt;&lt;a href=&quot;#与git相关&quot; class=&quot;headerlink&quot; title=&quot;与git相关&quot;&gt;&lt;/a&gt;与git相关&lt;/h3&gt;&lt;p&gt;​    fatal: Not a git repository (or any 
      
    
    </summary>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>学英语路上的点点滴滴.md</title>
    <link href="http://yoursite.com/2019/07/25/%E5%AD%A6%E8%8B%B1%E8%AF%AD%E8%B7%AF%E4%B8%8A%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    <id>http://yoursite.com/2019/07/25/学英语路上的点点滴滴/</id>
    <published>2019-07-25T12:53:37.000Z</published>
    <updated>2019-07-27T10:20:51.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="短句"><a href="#短句" class="headerlink" title="短句"></a>短句</h3><p>scissors,paper,stone    剪刀石头布</p><p>iron my clothes  熨衣服</p><p>I started off for a interview   我动身去参加面试</p><p>She needs to move out,find her first job,meet the love of her life,maybe even get married</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;短句&quot;&gt;&lt;a href=&quot;#短句&quot; class=&quot;headerlink&quot; title=&quot;短句&quot;&gt;&lt;/a&gt;短句&lt;/h3&gt;&lt;p&gt;scissors,paper,stone    剪刀石头布&lt;/p&gt;
&lt;p&gt;iron my clothes  熨衣服&lt;/p&gt;
&lt;p&gt;I sta
      
    
    </summary>
    
    
      <category term="英语" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>汇编基础</title>
    <link href="http://yoursite.com/2019/07/21/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/07/21/汇编基础/</id>
    <published>2019-07-21T03:08:24.000Z</published>
    <updated>2019-08-01T12:15:56.582Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li><p>直接在硬件工作，与机器语言一一对应</p></li><li><p>机器语言   01010000   本质：电平脉冲（早期通过穿孔卡片是实现）    push ax</p><p>难以阅读且易错</p></li><li><p>汇编语言主体是汇编指令，相当于机器指令的助记符</p></li><li><p>程序–&gt;  汇编指令  –&gt;  编译器–&gt;  机器码  –&gt;  计算机</p></li><li><blockquote><p>汇编语言包括</p><blockquote><p>汇编指令（机器码的助记符）<strong>核心</strong></p><p>伪指令（由编译器执行）</p><p>其他符号（由编译器执行）</p></blockquote></blockquote></li></ul><a id="more"></a><hr><ul><li>CPU：控制计算机运作并进行运算  <strong>核心部件</strong></li><li>内存：存储数据，不常用的置于磁盘中</li><li></li></ul><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>小甲鱼零基础汇编</li><li>汇编语言基础教程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接在硬件工作，与机器语言一一对应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;机器语言   01010000   本质：电平脉冲（早期通过穿孔卡片是实现）    push ax&lt;/p&gt;
&lt;p&gt;难以阅读且易错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;汇编语言主体是汇编指令，相当于机器指令的助记符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序–&amp;gt;  汇编指令  –&amp;gt;  编译器–&amp;gt;  机器码  –&amp;gt;  计算机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;汇编语言包括&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;汇编指令（机器码的助记符）&lt;strong&gt;核心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;伪指令（由编译器执行）&lt;/p&gt;
&lt;p&gt;其他符号（由编译器执行）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="汇编" scheme="http://yoursite.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
